// Signature format: 3.0
package com.mapbox.navigation.tripdata.maneuver.api {

  public final class MapboxLaneIconsApi {
    ctor public MapboxLaneIconsApi(com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources laneIconResources = LaneIconResources.<init>().build());
    ctor public MapboxLaneIconsApi();
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIcon getTurnLane(com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator laneIndicator);
  }

  public final class MapboxManeuverApi {
    ctor public MapboxManeuverApi(com.mapbox.navigation.base.formatter.DistanceFormatter formatter, com.mapbox.navigation.tripdata.maneuver.model.ManeuverOptions maneuverOptions = ManeuverOptions.<init>().build(), com.mapbox.navigation.tripdata.shield.api.MapboxRouteShieldApi routeShieldApi = com.mapbox.navigation.tripdata.shield.api.MapboxRouteShieldApi());
    ctor public MapboxManeuverApi(com.mapbox.navigation.base.formatter.DistanceFormatter formatter, com.mapbox.navigation.tripdata.maneuver.model.ManeuverOptions maneuverOptions = ManeuverOptions.<init>().build());
    ctor public MapboxManeuverApi(com.mapbox.navigation.base.formatter.DistanceFormatter formatter);
    method public void cancel();
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.tripdata.maneuver.model.ManeuverError,java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Maneuver>> getManeuvers(com.mapbox.navigation.base.route.NavigationRoute route, Integer? routeLegIndex = null);
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.tripdata.maneuver.model.ManeuverError,java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Maneuver>> getManeuvers(com.mapbox.navigation.base.route.NavigationRoute route);
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.tripdata.maneuver.model.ManeuverError,java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Maneuver>> getManeuvers(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public void getRoadShields(java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Maneuver> maneuvers, com.mapbox.navigation.tripdata.shield.model.RouteShieldCallback shieldCallback);
    method public void getRoadShields(String? userId, String? styleId, java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Maneuver> maneuvers, com.mapbox.navigation.tripdata.shield.model.RouteShieldCallback shieldCallback);
  }

  public final class MapboxTurnIconsApi {
    ctor public MapboxTurnIconsApi(com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources turnIconResources);
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.tripdata.maneuver.model.TurnIconError,com.mapbox.navigation.base.internal.maneuver.ManeuverTurnIcon> generateTurnIcon(String? type, Float? degrees, String? modifier, String? drivingSide);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources getTurnIconResources();
    method public void setTurnIconResources(com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources);
    method public void updateResources(com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources resources);
    property public final com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources turnIconResources;
  }

}

package com.mapbox.navigation.tripdata.maneuver.model {

  public final class Component {
    ctor public Component(String type, com.mapbox.navigation.tripdata.maneuver.model.ComponentNode node);
    method public com.mapbox.navigation.tripdata.maneuver.model.ComponentNode getNode();
    method public String getType();
    property public final com.mapbox.navigation.tripdata.maneuver.model.ComponentNode node;
    property public final String type;
  }

  public interface ComponentNode {
  }

  public final class DelimiterComponentNode implements com.mapbox.navigation.tripdata.maneuver.model.ComponentNode {
    method public String getText();
    method public com.mapbox.navigation.tripdata.maneuver.model.DelimiterComponentNode.Builder toBuilder();
    property public final String text;
  }

  public static final class DelimiterComponentNode.Builder {
    ctor public DelimiterComponentNode.Builder();
    method public com.mapbox.navigation.tripdata.maneuver.model.DelimiterComponentNode build();
    method public com.mapbox.navigation.tripdata.maneuver.model.DelimiterComponentNode.Builder text(String text);
  }

  public final class ExitComponentNode implements com.mapbox.navigation.tripdata.maneuver.model.ComponentNode {
    method public String getText();
    method public com.mapbox.navigation.tripdata.maneuver.model.ExitComponentNode.Builder toBuilder();
    property public final String text;
  }

  public static final class ExitComponentNode.Builder {
    ctor public ExitComponentNode.Builder();
    method public com.mapbox.navigation.tripdata.maneuver.model.ExitComponentNode build();
    method public com.mapbox.navigation.tripdata.maneuver.model.ExitComponentNode.Builder text(String text);
  }

  public final class ExitNumberComponentNode implements com.mapbox.navigation.tripdata.maneuver.model.ComponentNode {
    method public String getText();
    method public com.mapbox.navigation.tripdata.maneuver.model.ExitNumberComponentNode.Builder toBuilder();
    property public final String text;
  }

  public static final class ExitNumberComponentNode.Builder {
    ctor public ExitNumberComponentNode.Builder();
    method public com.mapbox.navigation.tripdata.maneuver.model.ExitNumberComponentNode build();
    method public com.mapbox.navigation.tripdata.maneuver.model.ExitNumberComponentNode.Builder text(String text);
  }

  public final class Lane {
    method public java.util.List<com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator> getAllLanes();
    property public final java.util.List<com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator> allLanes;
  }

  @com.mapbox.navigation.base.ExperimentalMapboxNavigationAPI public final class LaneFactory {
    method public static com.mapbox.navigation.tripdata.maneuver.model.Lane buildLane(java.util.List<com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator> allLanes);
    field public static final com.mapbox.navigation.tripdata.maneuver.model.LaneFactory INSTANCE;
  }

  public final class LaneIcon {
    method public int getDrawableResId();
    method public boolean getShouldFlip();
    property public final int drawableResId;
    property public final boolean shouldFlip;
  }

  public final class LaneIconResources {
    method public int getLaneOppositeSlightTurnOrSlightTurn();
    method public int getLaneOppositeSlightTurnOrSlightTurnUsingSlightTurn();
    method public int getLaneOppositeSlightTurnOrStraightOrSlightTurn();
    method public int getLaneOppositeSlightTurnOrStraightOrSlightTurnUsingSlightTurn();
    method public int getLaneOppositeSlightTurnOrStraightOrSlightTurnUsingStraight();
    method public int getLaneOppositeSlightTurnOrStraightOrTurn();
    method public int getLaneOppositeSlightTurnOrStraightOrTurnUsingStraight();
    method public int getLaneOppositeSlightTurnOrStraightOrTurnUsingTurn();
    method public int getLaneOppositeSlightTurnOrTurn();
    method public int getLaneOppositeSlightTurnOrTurnUsingTurn();
    method public int getLaneOppositeTurnOrSlightTurn();
    method public int getLaneOppositeTurnOrSlightTurnUsingSlightTurn();
    method public int getLaneOppositeTurnOrStraightOrSlightTurn();
    method public int getLaneOppositeTurnOrStraightOrSlightTurnUsingSlightTurn();
    method public int getLaneOppositeTurnOrStraightOrSlightTurnUsingStraight();
    method public int getLaneOppositeTurnOrStraightOrTurn();
    method public int getLaneOppositeTurnOrStraightOrTurnUsingStraight();
    method public int getLaneOppositeTurnOrStraightOrTurnUsingTurn();
    method public int getLaneOppositeTurnOrTurn();
    method public int getLaneOppositeTurnOrTurnUsingTurn();
    method public int getLaneSharpTurn();
    method public int getLaneSharpTurnUsingSharpTurn();
    method public int getLaneSlightTurn();
    method public int getLaneSlightTurnOrSharpTurn();
    method public int getLaneSlightTurnOrSharpTurnUsingSharpTurn();
    method public int getLaneSlightTurnOrSharpTurnUsingSlightTurn();
    method public int getLaneSlightTurnOrTurn();
    method public int getLaneSlightTurnOrTurnUsingSlightTurn();
    method public int getLaneSlightTurnOrTurnUsingTurn();
    method public int getLaneSlightTurnOrUturn();
    method public int getLaneSlightTurnOrUturnUsingSlightTurn();
    method public int getLaneSlightTurnOrUturnUsingUturn();
    method public int getLaneSlightTurnUsingSlightTurn();
    method public int getLaneStraight();
    method public int getLaneStraightOrSharpTurn();
    method public int getLaneStraightOrSharpTurnUsingSharpTurn();
    method public int getLaneStraightOrSharpTurnUsingStraight();
    method public int getLaneStraightOrSlightTurn();
    method public int getLaneStraightOrSlightTurnOrTurn();
    method public int getLaneStraightOrSlightTurnOrTurnUsingSlightTurn();
    method public int getLaneStraightOrSlightTurnOrTurnUsingStraight();
    method public int getLaneStraightOrSlightTurnOrTurnUsingTurn();
    method public int getLaneStraightOrSlightTurnUsingSlightTurn();
    method public int getLaneStraightOrSlightTurnUsingStraight();
    method public int getLaneStraightOrTurn();
    method public int getLaneStraightOrTurnOrUturn();
    method public int getLaneStraightOrTurnOrUturnUsingStraight();
    method public int getLaneStraightOrTurnOrUturnUsingTurn();
    method public int getLaneStraightOrTurnOrUturnUsingUturn();
    method public int getLaneStraightOrTurnUsingStraight();
    method public int getLaneStraightOrTurnUsingTurn();
    method public int getLaneStraightOrUturn();
    method public int getLaneStraightOrUturnUsingStraight();
    method public int getLaneStraightOrUturnUsingUturn();
    method public int getLaneStraightUsingStraight();
    method public int getLaneTurn();
    method public int getLaneTurnOrSharpTurn();
    method public int getLaneTurnOrSharpTurnUsingSharpTurn();
    method public int getLaneTurnOrSharpTurnUsingTurn();
    method public int getLaneTurnOrUturn();
    method public int getLaneTurnOrUturnUsingTurn();
    method public int getLaneTurnOrUturnUsingUturn();
    method public int getLaneTurnUsingTurn();
    method public int getLaneUturn();
    method public int getLaneUturnUsingUturn();
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder toBuilder();
    property public final int laneOppositeSlightTurnOrSlightTurn;
    property public final int laneOppositeSlightTurnOrSlightTurnUsingSlightTurn;
    property public final int laneOppositeSlightTurnOrStraightOrSlightTurn;
    property public final int laneOppositeSlightTurnOrStraightOrSlightTurnUsingSlightTurn;
    property public final int laneOppositeSlightTurnOrStraightOrSlightTurnUsingStraight;
    property public final int laneOppositeSlightTurnOrStraightOrTurn;
    property public final int laneOppositeSlightTurnOrStraightOrTurnUsingStraight;
    property public final int laneOppositeSlightTurnOrStraightOrTurnUsingTurn;
    property public final int laneOppositeSlightTurnOrTurn;
    property public final int laneOppositeSlightTurnOrTurnUsingTurn;
    property public final int laneOppositeTurnOrSlightTurn;
    property public final int laneOppositeTurnOrSlightTurnUsingSlightTurn;
    property public final int laneOppositeTurnOrStraightOrSlightTurn;
    property public final int laneOppositeTurnOrStraightOrSlightTurnUsingSlightTurn;
    property public final int laneOppositeTurnOrStraightOrSlightTurnUsingStraight;
    property public final int laneOppositeTurnOrStraightOrTurn;
    property public final int laneOppositeTurnOrStraightOrTurnUsingStraight;
    property public final int laneOppositeTurnOrStraightOrTurnUsingTurn;
    property public final int laneOppositeTurnOrTurn;
    property public final int laneOppositeTurnOrTurnUsingTurn;
    property public final int laneSharpTurn;
    property public final int laneSharpTurnUsingSharpTurn;
    property public final int laneSlightTurn;
    property public final int laneSlightTurnOrSharpTurn;
    property public final int laneSlightTurnOrSharpTurnUsingSharpTurn;
    property public final int laneSlightTurnOrSharpTurnUsingSlightTurn;
    property public final int laneSlightTurnOrTurn;
    property public final int laneSlightTurnOrTurnUsingSlightTurn;
    property public final int laneSlightTurnOrTurnUsingTurn;
    property public final int laneSlightTurnOrUturn;
    property public final int laneSlightTurnOrUturnUsingSlightTurn;
    property public final int laneSlightTurnOrUturnUsingUturn;
    property public final int laneSlightTurnUsingSlightTurn;
    property public final int laneStraight;
    property public final int laneStraightOrSharpTurn;
    property public final int laneStraightOrSharpTurnUsingSharpTurn;
    property public final int laneStraightOrSharpTurnUsingStraight;
    property public final int laneStraightOrSlightTurn;
    property public final int laneStraightOrSlightTurnOrTurn;
    property public final int laneStraightOrSlightTurnOrTurnUsingSlightTurn;
    property public final int laneStraightOrSlightTurnOrTurnUsingStraight;
    property public final int laneStraightOrSlightTurnOrTurnUsingTurn;
    property public final int laneStraightOrSlightTurnUsingSlightTurn;
    property public final int laneStraightOrSlightTurnUsingStraight;
    property public final int laneStraightOrTurn;
    property public final int laneStraightOrTurnOrUturn;
    property public final int laneStraightOrTurnOrUturnUsingStraight;
    property public final int laneStraightOrTurnOrUturnUsingTurn;
    property public final int laneStraightOrTurnOrUturnUsingUturn;
    property public final int laneStraightOrTurnUsingStraight;
    property public final int laneStraightOrTurnUsingTurn;
    property public final int laneStraightOrUturn;
    property public final int laneStraightOrUturnUsingStraight;
    property public final int laneStraightOrUturnUsingUturn;
    property public final int laneStraightUsingStraight;
    property public final int laneTurn;
    property public final int laneTurnOrSharpTurn;
    property public final int laneTurnOrSharpTurnUsingSharpTurn;
    property public final int laneTurnOrSharpTurnUsingTurn;
    property public final int laneTurnOrUturn;
    property public final int laneTurnOrUturnUsingTurn;
    property public final int laneTurnOrUturnUsingUturn;
    property public final int laneTurnUsingTurn;
    property public final int laneUturn;
    property public final int laneUturnUsingUturn;
  }

  public static final class LaneIconResources.Builder {
    ctor public LaneIconResources.Builder();
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources build();
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrSlightTurn(@DrawableRes int laneOppositeSlightTurnOrSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrSlightTurnUsingSlightTurn(@DrawableRes int laneOppositeSlightTurnOrSlightTurnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrStraightOrSlightTurn(@DrawableRes int laneOppositeSlightTurnOrStraightOrSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrStraightOrSlightTurnUsingSlightTurn(@DrawableRes int laneOppositeSlightTurnOrStraightOrSlightTurnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrStraightOrSlightTurnUsingStraight(@DrawableRes int laneOppositeSlightTurnOrStraightOrSlightTurnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrStraightOrTurn(@DrawableRes int laneOppositeSlightTurnOrStraightOrTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrStraightOrTurnUsingStraight(@DrawableRes int laneOppositeSlightTurnOrStraightOrTurnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrStraightOrTurnUsingTurn(@DrawableRes int laneOppositeSlightTurnOrStraightOrTurnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrTurn(@DrawableRes int laneOppositeSlightTurnOrTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeSlightTurnOrTurnUsingTurn(@DrawableRes int laneOppositeSlightTurnOrTurnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrSlightTurn(@DrawableRes int laneOppositeTurnOrSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrSlightTurnUsingSlightTurn(@DrawableRes int laneOppositeTurnOrSlightTurnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrStraightOrSlightTurn(@DrawableRes int laneOppositeTurnOrStraightOrSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrStraightOrSlightTurnUsingSlightTurn(@DrawableRes int laneOppositeTurnOrStraightOrSlightTurnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrStraightOrSlightTurnUsingStraight(@DrawableRes int laneOppositeTurnOrStraightOrSlightTurnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrStraightOrTurn(@DrawableRes int laneOppositeTurnOrStraightOrTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrStraightOrTurnUsingStraight(@DrawableRes int laneOppositeTurnOrStraightOrTurnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrStraightOrTurnUsingTurn(@DrawableRes int laneOppositeTurnOrStraightOrTurnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrTurn(@DrawableRes int laneOppositeTurnOrTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneOppositeTurnOrTurnUsingTurn(@DrawableRes int laneOppositeTurnOrTurnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSharpTurn(@DrawableRes int laneSharpTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSharpTurnUsingSharpTurn(@DrawableRes int laneSharpTurnUsingSharpTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurn(@DrawableRes int laneSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnOrSharpTurn(@DrawableRes int laneSlightTurnOrSharpTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnOrSharpTurnUsingSharpTurn(@DrawableRes int laneSlightTurnOrSharpTurnUsingSharpTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnOrSharpTurnUsingSlightTurn(@DrawableRes int laneSlightTurnOrSharpTurnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnOrTurn(@DrawableRes int laneSlightTurnOrTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnOrTurnUsingSlightTurn(@DrawableRes int laneSlightTurnOrTurnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnOrTurnUsingTurn(@DrawableRes int laneSlightTurnOrTurnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnOrUturn(@DrawableRes int laneSlightTurnOrUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnOrUturnUsingSlightTurn(@DrawableRes int laneSlightTurnOrUturnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnOrUturnUsingUturn(@DrawableRes int laneSlightTurnOrUturnUsingUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneSlightTurnUsingSlightTurn(@DrawableRes int laneSlightTurnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraight(@DrawableRes int laneStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSharpTurn(@DrawableRes int laneStraightOrSharpTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSharpTurnUsingSharpTurn(@DrawableRes int laneStraightOrSharpTurnUsingSharpTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSharpTurnUsingStraight(@DrawableRes int laneStraightOrSharpTurnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSlightTurn(@DrawableRes int laneStraightOrSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSlightTurnOrTurn(@DrawableRes int laneStraightOrSlightTurnOrTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSlightTurnOrTurnUsingSlightTurn(@DrawableRes int laneStraightOrSlightTurnOrTurnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSlightTurnOrTurnUsingStraight(@DrawableRes int laneStraightOrSlightTurnOrTurnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSlightTurnOrTurnUsingTurn(@DrawableRes int laneStraightOrSlightTurnOrTurnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSlightTurnUsingSlightTurn(@DrawableRes int laneStraightOrSlightTurnUsingSlightTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrSlightTurnUsingStraight(@DrawableRes int laneStraightOrSlightTurnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrTurn(@DrawableRes int laneStraightOrTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrTurnOrUturn(@DrawableRes int laneStraightOrTurnOrUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrTurnOrUturnUsingStraight(@DrawableRes int laneStraightOrTurnOrUturnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrTurnOrUturnUsingTurn(@DrawableRes int laneStraightOrTurnOrUturnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrTurnOrUturnUsingUturn(@DrawableRes int laneStraightOrTurnOrUturnUsingUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrTurnUsingStraight(@DrawableRes int laneStraightOrTurnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrTurnUsingTurn(@DrawableRes int laneStraightOrTurnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrUturn(@DrawableRes int laneStraightOrUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrUturnUsingStraight(@DrawableRes int laneStraightOrUturnUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightOrUturnUsingUturn(@DrawableRes int laneStraightOrUturnUsingUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneStraightUsingStraight(@DrawableRes int laneStraightUsingStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneTurn(@DrawableRes int laneTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneTurnOrSharpTurn(@DrawableRes int laneTurnOrSharpTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneTurnOrSharpTurnUsingSharpTurn(@DrawableRes int laneTurnOrSharpTurnUsingSharpTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneTurnOrSharpTurnUsingTurn(@DrawableRes int laneTurnOrSharpTurnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneTurnOrUturn(@DrawableRes int laneTurnOrUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneTurnOrUturnUsingTurn(@DrawableRes int laneTurnOrUturnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneTurnOrUturnUsingUturn(@DrawableRes int laneTurnOrUturnUsingUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneTurnUsingTurn(@DrawableRes int laneTurnUsingTurn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneUturn(@DrawableRes int laneUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIconResources.Builder laneUturnUsingUturn(@DrawableRes int laneUturnUsingUturn);
  }

  public final class LaneIndicator {
    method public String? getActiveDirection();
    method public java.util.List<java.lang.String> getDirections();
    method public String getDrivingSide();
    method public boolean isActive();
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator.Builder toBuilder();
    property public final String? activeDirection;
    property public final java.util.List<java.lang.String> directions;
    property public final String drivingSide;
    property public final boolean isActive;
  }

  public static final class LaneIndicator.Builder {
    ctor public LaneIndicator.Builder();
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator.Builder activeDirection(String? activeDirection);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator build();
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator.Builder directions(java.util.List<java.lang.String> directions);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator.Builder drivingSide(String drivingSide);
    method public com.mapbox.navigation.tripdata.maneuver.model.LaneIndicator.Builder isActive(boolean isActive);
  }

  public final class Maneuver {
    method public com.mapbox.navigation.tripdata.maneuver.model.Lane? getLaneGuidance();
    method public com.mapbox.geojson.Point getManeuverPoint();
    method public com.mapbox.navigation.tripdata.maneuver.model.PrimaryManeuver getPrimary();
    method public com.mapbox.navigation.tripdata.maneuver.model.SecondaryManeuver? getSecondary();
    method public com.mapbox.navigation.tripdata.maneuver.model.StepDistance getStepDistance();
    method public com.mapbox.navigation.tripdata.maneuver.model.SubManeuver? getSub();
    property public final com.mapbox.navigation.tripdata.maneuver.model.Lane? laneGuidance;
    property public final com.mapbox.geojson.Point maneuverPoint;
    property public final com.mapbox.navigation.tripdata.maneuver.model.PrimaryManeuver primary;
    property public final com.mapbox.navigation.tripdata.maneuver.model.SecondaryManeuver? secondary;
    property public final com.mapbox.navigation.tripdata.maneuver.model.StepDistance stepDistance;
    property public final com.mapbox.navigation.tripdata.maneuver.model.SubManeuver? sub;
  }

  public final class ManeuverError {
    method public String? getErrorMessage();
    method public Throwable? getThrowable();
    property public final String? errorMessage;
    property public final Throwable? throwable;
  }

  @com.mapbox.navigation.base.ExperimentalMapboxNavigationAPI public final class ManeuverErrorFactory {
    method public static com.mapbox.navigation.tripdata.maneuver.model.ManeuverError buildManeuverError(String errorMessage, Throwable? throwable);
    field public static final com.mapbox.navigation.tripdata.maneuver.model.ManeuverErrorFactory INSTANCE;
  }

  @com.mapbox.navigation.base.ExperimentalMapboxNavigationAPI public final class ManeuverFactory {
    method public static com.mapbox.navigation.tripdata.maneuver.model.Maneuver buildManeuver(com.mapbox.navigation.tripdata.maneuver.model.PrimaryManeuver primary, com.mapbox.navigation.tripdata.maneuver.model.StepDistance stepDistance, com.mapbox.navigation.tripdata.maneuver.model.SecondaryManeuver? secondary, com.mapbox.navigation.tripdata.maneuver.model.SubManeuver? sub, com.mapbox.navigation.tripdata.maneuver.model.Lane? lane, com.mapbox.geojson.Point point);
    field public static final com.mapbox.navigation.tripdata.maneuver.model.ManeuverFactory INSTANCE;
  }

  public final class ManeuverOptions {
    method public boolean getFilterDuplicateManeuvers();
    method public com.mapbox.navigation.tripdata.maneuver.model.ManeuverOptions.Builder toBuilder();
    property public final boolean filterDuplicateManeuvers;
  }

  public static final class ManeuverOptions.Builder {
    ctor public ManeuverOptions.Builder();
    method public com.mapbox.navigation.tripdata.maneuver.model.ManeuverOptions build();
    method public com.mapbox.navigation.tripdata.maneuver.model.ManeuverOptions.Builder filterDuplicateManeuvers(boolean filterDuplicateManeuvers);
  }

  public final class PrimaryManeuver {
    method public java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Component> getComponentList();
    method public Double? getDegrees();
    method public String? getDrivingSide();
    method public String getId();
    method public String? getModifier();
    method public String getText();
    method public String? getType();
    property public final java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Component> componentList;
    property public final Double? degrees;
    property public final String? drivingSide;
    property public final String id;
    property public final String? modifier;
    property public final String text;
    property public final String? type;
  }

  @com.mapbox.navigation.base.ExperimentalMapboxNavigationAPI public final class PrimaryManeuverFactory {
    method public static com.mapbox.navigation.tripdata.maneuver.model.PrimaryManeuver buildPrimaryManeuver(String id, String text, String? type, Double? degrees, String? modifier, String? drivingSide, java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Component> componentList);
    field public static final com.mapbox.navigation.tripdata.maneuver.model.PrimaryManeuverFactory INSTANCE;
  }

  public final class RoadShieldComponentNode implements com.mapbox.navigation.tripdata.maneuver.model.ComponentNode {
    method public com.mapbox.api.directions.v5.models.MapboxShield? getMapboxShield();
    method public String? getShieldUrl();
    method public String getText();
    method public com.mapbox.navigation.tripdata.maneuver.model.RoadShieldComponentNode.Builder toBuilder();
    property public final com.mapbox.api.directions.v5.models.MapboxShield? mapboxShield;
    property public final String? shieldUrl;
    property public final String text;
  }

  public static final class RoadShieldComponentNode.Builder {
    ctor public RoadShieldComponentNode.Builder();
    method public com.mapbox.navigation.tripdata.maneuver.model.RoadShieldComponentNode build();
    method public com.mapbox.navigation.tripdata.maneuver.model.RoadShieldComponentNode.Builder mapboxShield(com.mapbox.api.directions.v5.models.MapboxShield? mapboxShield);
    method public com.mapbox.navigation.tripdata.maneuver.model.RoadShieldComponentNode.Builder shieldUrl(String? shieldUrl);
    method public com.mapbox.navigation.tripdata.maneuver.model.RoadShieldComponentNode.Builder text(String text);
  }

  public final class SecondaryManeuver {
    method public java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Component> getComponentList();
    method public Double? getDegrees();
    method public String? getDrivingSide();
    method public String getId();
    method public String? getModifier();
    method public String getText();
    method public String? getType();
    property public final java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Component> componentList;
    property public final Double? degrees;
    property public final String? drivingSide;
    property public final String id;
    property public final String? modifier;
    property public final String text;
    property public final String? type;
  }

  @com.mapbox.navigation.base.ExperimentalMapboxNavigationAPI public final class SecondaryManeuverFactory {
    method public static com.mapbox.navigation.tripdata.maneuver.model.SecondaryManeuver buildSecondaryManeuver(String id, String text, String? type, Double? degrees, String? modifier, String? drivingSide, java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Component> componentList);
    field public static final com.mapbox.navigation.tripdata.maneuver.model.SecondaryManeuverFactory INSTANCE;
  }

  public final class StepDistance {
    method public com.mapbox.navigation.base.formatter.DistanceFormatter getDistanceFormatter();
    method public Double? getDistanceRemaining();
    method public double getTotalDistance();
    method public void setDistanceRemaining(Double?);
    property public final com.mapbox.navigation.base.formatter.DistanceFormatter distanceFormatter;
    property public final Double? distanceRemaining;
    property public final double totalDistance;
  }

  @com.mapbox.navigation.base.ExperimentalMapboxNavigationAPI public final class StepDistanceFactory {
    method public static com.mapbox.navigation.tripdata.maneuver.model.StepDistance buildStepDistance(com.mapbox.navigation.base.formatter.DistanceFormatter distanceFormatter, double totalDistance, Double? distanceRemaining);
    field public static final com.mapbox.navigation.tripdata.maneuver.model.StepDistanceFactory INSTANCE;
  }

  public final class SubManeuver {
    method public java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Component> getComponentList();
    method public Double? getDegrees();
    method public String? getDrivingSide();
    method public String getId();
    method public String? getModifier();
    method public String getText();
    method public String? getType();
    property public final java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Component> componentList;
    property public final Double? degrees;
    property public final String? drivingSide;
    property public final String id;
    property public final String? modifier;
    property public final String text;
    property public final String? type;
  }

  @com.mapbox.navigation.base.ExperimentalMapboxNavigationAPI public final class SubManeuverFactory {
    method public static com.mapbox.navigation.tripdata.maneuver.model.SubManeuver buildSubManeuver(String id, String text, String? type, Double? degrees, String? modifier, String? drivingSide, java.util.List<com.mapbox.navigation.tripdata.maneuver.model.Component> componentList);
    field public static final com.mapbox.navigation.tripdata.maneuver.model.SubManeuverFactory INSTANCE;
  }

  public final class TextComponentNode implements com.mapbox.navigation.tripdata.maneuver.model.ComponentNode {
    method public String? getAbbr();
    method public Integer? getAbbrPriority();
    method public String getText();
    method public com.mapbox.navigation.tripdata.maneuver.model.TextComponentNode.Builder toBuilder();
    property public final String? abbr;
    property public final Integer? abbrPriority;
    property public final String text;
  }

  public static final class TextComponentNode.Builder {
    ctor public TextComponentNode.Builder();
    method public com.mapbox.navigation.tripdata.maneuver.model.TextComponentNode.Builder abbr(String? abbr);
    method public com.mapbox.navigation.tripdata.maneuver.model.TextComponentNode.Builder abbrPriority(Integer? abbrPriority);
    method public com.mapbox.navigation.tripdata.maneuver.model.TextComponentNode build();
    method public com.mapbox.navigation.tripdata.maneuver.model.TextComponentNode.Builder text(String text);
  }

  public final class TurnIconError {
    method public Float? getDegrees();
    method public String? getDrivingSide();
    method public String getErrorMessage();
    method public String? getModifier();
    method public String? getType();
    property public final Float? degrees;
    property public final String? drivingSide;
    property public final String errorMessage;
    property public final String? modifier;
    property public final String? type;
  }

  public final class TurnIconResources implements com.mapbox.navigation.base.maneuver.model.BaseTurnIconResources {
    method public static com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources defaultIconSet();
    method public int getTurnIconArrive();
    method public int getTurnIconArriveLeft();
    method public int getTurnIconArriveRight();
    method public int getTurnIconArriveStraight();
    method public int getTurnIconContinue();
    method public int getTurnIconContinueLeft();
    method public int getTurnIconContinueRight();
    method public int getTurnIconContinueSlightLeft();
    method public int getTurnIconContinueSlightRight();
    method public int getTurnIconContinueStraight();
    method public int getTurnIconContinueUturn();
    method public int getTurnIconDepart();
    method public int getTurnIconDepartLeft();
    method public int getTurnIconDepartRight();
    method public int getTurnIconDepartStraight();
    method public int getTurnIconEndRoadLeft();
    method public int getTurnIconEndRoadRight();
    method public int getTurnIconFork();
    method public int getTurnIconForkLeft();
    method public int getTurnIconForkRight();
    method public int getTurnIconForkSlightLeft();
    method public int getTurnIconForkSlightRight();
    method public int getTurnIconForkStraight();
    method public int getTurnIconInvalid();
    method public int getTurnIconInvalidLeft();
    method public int getTurnIconInvalidRight();
    method public int getTurnIconInvalidSlightLeft();
    method public int getTurnIconInvalidSlightRight();
    method public int getTurnIconInvalidStraight();
    method public int getTurnIconInvalidUturn();
    method public int getTurnIconMergeLeft();
    method public int getTurnIconMergeRight();
    method public int getTurnIconMergeSlightLeft();
    method public int getTurnIconMergeSlightRight();
    method public int getTurnIconMergeStraight();
    method public int getTurnIconNewNameLeft();
    method public int getTurnIconNewNameRight();
    method public int getTurnIconNewNameSharpLeft();
    method public int getTurnIconNewNameSharpRight();
    method public int getTurnIconNewNameSlightLeft();
    method public int getTurnIconNewNameSlightRight();
    method public int getTurnIconNewNameStraight();
    method public int getTurnIconNotificationLeft();
    method public int getTurnIconNotificationRight();
    method public int getTurnIconNotificationSharpLeft();
    method public int getTurnIconNotificationSharpRight();
    method public int getTurnIconNotificationSlightLeft();
    method public int getTurnIconNotificationSlightRight();
    method public int getTurnIconNotificationStraight();
    method public int getTurnIconOffRamp();
    method public int getTurnIconOffRampLeft();
    method public int getTurnIconOffRampRight();
    method public int getTurnIconOffRampSlightLeft();
    method public int getTurnIconOffRampSlightRight();
    method public int getTurnIconOnRamp();
    method public int getTurnIconOnRampLeft();
    method public int getTurnIconOnRampRight();
    method public int getTurnIconOnRampSharpLeft();
    method public int getTurnIconOnRampSharpRight();
    method public int getTurnIconOnRampSlightLeft();
    method public int getTurnIconOnRampSlightRight();
    method public int getTurnIconOnRampStraight();
    method public int getTurnIconRamp();
    method public int getTurnIconRotary();
    method public int getTurnIconRotaryLeft();
    method public int getTurnIconRotaryRight();
    method public int getTurnIconRotarySharpLeft();
    method public int getTurnIconRotarySharpRight();
    method public int getTurnIconRotarySlightLeft();
    method public int getTurnIconRotarySlightRight();
    method public int getTurnIconRotaryStraight();
    method public int getTurnIconRoundabout();
    method public int getTurnIconRoundaboutLeft();
    method public int getTurnIconRoundaboutRight();
    method public int getTurnIconRoundaboutSharpLeft();
    method public int getTurnIconRoundaboutSharpRight();
    method public int getTurnIconRoundaboutSlightLeft();
    method public int getTurnIconRoundaboutSlightRight();
    method public int getTurnIconRoundaboutStraight();
    method public int getTurnIconTurnLeft();
    method public int getTurnIconTurnRight();
    method public int getTurnIconTurnSharpLeft();
    method public int getTurnIconTurnSharpRight();
    method public int getTurnIconTurnSlightLeft();
    method public int getTurnIconTurnSlightRight();
    method public int getTurnIconTurnStraight();
    method public int getTurnIconUturn();
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder toBuilder();
    property public int turnIconArrive;
    property public int turnIconArriveLeft;
    property public int turnIconArriveRight;
    property public int turnIconArriveStraight;
    property public int turnIconContinue;
    property public int turnIconContinueLeft;
    property public int turnIconContinueRight;
    property public int turnIconContinueSlightLeft;
    property public int turnIconContinueSlightRight;
    property public int turnIconContinueStraight;
    property public int turnIconContinueUturn;
    property public int turnIconDepart;
    property public int turnIconDepartLeft;
    property public int turnIconDepartRight;
    property public int turnIconDepartStraight;
    property public int turnIconEndRoadLeft;
    property public int turnIconEndRoadRight;
    property public int turnIconFork;
    property public int turnIconForkLeft;
    property public int turnIconForkRight;
    property public int turnIconForkSlightLeft;
    property public int turnIconForkSlightRight;
    property public int turnIconForkStraight;
    property public int turnIconInvalid;
    property public int turnIconInvalidLeft;
    property public int turnIconInvalidRight;
    property public int turnIconInvalidSlightLeft;
    property public int turnIconInvalidSlightRight;
    property public int turnIconInvalidStraight;
    property public int turnIconInvalidUturn;
    property public int turnIconMergeLeft;
    property public int turnIconMergeRight;
    property public int turnIconMergeSlightLeft;
    property public int turnIconMergeSlightRight;
    property public int turnIconMergeStraight;
    property public int turnIconNewNameLeft;
    property public int turnIconNewNameRight;
    property public int turnIconNewNameSharpLeft;
    property public int turnIconNewNameSharpRight;
    property public int turnIconNewNameSlightLeft;
    property public int turnIconNewNameSlightRight;
    property public int turnIconNewNameStraight;
    property public int turnIconNotificationLeft;
    property public int turnIconNotificationRight;
    property public int turnIconNotificationSharpLeft;
    property public int turnIconNotificationSharpRight;
    property public int turnIconNotificationSlightLeft;
    property public int turnIconNotificationSlightRight;
    property public int turnIconNotificationStraight;
    property public int turnIconOffRamp;
    property public int turnIconOffRampLeft;
    property public int turnIconOffRampRight;
    property public int turnIconOffRampSlightLeft;
    property public int turnIconOffRampSlightRight;
    property public int turnIconOnRamp;
    property public int turnIconOnRampLeft;
    property public int turnIconOnRampRight;
    property public int turnIconOnRampSharpLeft;
    property public int turnIconOnRampSharpRight;
    property public int turnIconOnRampSlightLeft;
    property public int turnIconOnRampSlightRight;
    property public int turnIconOnRampStraight;
    property public int turnIconRamp;
    property public int turnIconRotary;
    property public int turnIconRotaryLeft;
    property public int turnIconRotaryRight;
    property public int turnIconRotarySharpLeft;
    property public int turnIconRotarySharpRight;
    property public int turnIconRotarySlightLeft;
    property public int turnIconRotarySlightRight;
    property public int turnIconRotaryStraight;
    property public int turnIconRoundabout;
    property public int turnIconRoundaboutLeft;
    property public int turnIconRoundaboutRight;
    property public int turnIconRoundaboutSharpLeft;
    property public int turnIconRoundaboutSharpRight;
    property public int turnIconRoundaboutSlightLeft;
    property public int turnIconRoundaboutSlightRight;
    property public int turnIconRoundaboutStraight;
    property public int turnIconTurnLeft;
    property public int turnIconTurnRight;
    property public int turnIconTurnSharpLeft;
    property public int turnIconTurnSharpRight;
    property public int turnIconTurnSlightLeft;
    property public int turnIconTurnSlightRight;
    property public int turnIconTurnStraight;
    property public int turnIconUturn;
    field public static final com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Companion Companion;
  }

  public static final class TurnIconResources.Builder {
    ctor public TurnIconResources.Builder();
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources build();
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconArrive(@DrawableRes int turnIconArrive);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconArriveLeft(@DrawableRes int turnIconArriveLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconArriveRight(@DrawableRes int turnIconArriveRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconArriveStraight(@DrawableRes int turnIconArriveStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconContinue(@DrawableRes int turnIconContinue);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconContinueLeft(@DrawableRes int turnIconContinueLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconContinueRight(@DrawableRes int turnIconContinueRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconContinueSlightLeft(@DrawableRes int turnIconContinueSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconContinueSlightRight(@DrawableRes int turnIconContinueSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconContinueStraight(@DrawableRes int turnIconContinueStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconContinueUturn(@DrawableRes int turnIconContinueUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconDepart(@DrawableRes int turnIconDepart);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconDepartLeft(@DrawableRes int turnIconDepartLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconDepartRight(@DrawableRes int turnIconDepartRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconDepartStraight(@DrawableRes int turnIconDepartStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconEndRoadLeft(@DrawableRes int turnIconEndRoadLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconEndRoadRight(@DrawableRes int turnIconEndRoadRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconFork(@DrawableRes int turnIconFork);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconForkLeft(@DrawableRes int turnIconForkLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconForkRight(@DrawableRes int turnIconForkRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconForkSlightLeft(@DrawableRes int turnIconForkSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconForkSlightRight(@DrawableRes int turnIconForkSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconForkStraight(@DrawableRes int turnIconForkStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconInvalid(@DrawableRes int turnIconInvalid);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconInvalidLeft(@DrawableRes int turnIconInvalidLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconInvalidRight(@DrawableRes int turnIconInvalidRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconInvalidSlightLeft(@DrawableRes int turnIconInvalidSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconInvalidSlightRight(@DrawableRes int turnIconInvalidSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconInvalidStraight(@DrawableRes int turnIconInvalidStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconInvalidUturn(@DrawableRes int turnIconInvalidUturn);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconMergeLeft(@DrawableRes int turnIconMergeLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconMergeRight(@DrawableRes int turnIconMergeRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconMergeSlightLeft(@DrawableRes int turnIconMergeSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconMergeSlightRight(@DrawableRes int turnIconMergeSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconMergeStraight(@DrawableRes int turnIconMergeStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNewNameLeft(@DrawableRes int turnIconNewNameLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNewNameRight(@DrawableRes int turnIconNewNameRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNewNameSharpLeft(@DrawableRes int turnIconNewNameSharpLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNewNameSharpRight(@DrawableRes int turnIconNewNameSharpRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNewNameSlightLeft(@DrawableRes int turnIconNewNameSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNewNameSlightRight(@DrawableRes int turnIconNewNameSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNewNameStraight(@DrawableRes int turnIconNewNameStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNotificationLeft(@DrawableRes int turnIconNotificationLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNotificationRight(@DrawableRes int turnIconNotificationRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNotificationSharpLeft(@DrawableRes int turnIconNotificationSharpLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNotificationSharpRight(@DrawableRes int turnIconNotificationSharpRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNotificationSlightLeft(@DrawableRes int turnIconNotificationSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNotificationSlightRight(@DrawableRes int turnIconNotificationSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconNotificationStraight(@DrawableRes int turnIconNotificationStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOffRamp(@DrawableRes int turnIconOffRamp);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOffRampLeft(@DrawableRes int turnIconOffRampLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOffRampRight(@DrawableRes int turnIconOffRampRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOffRampSlightLeft(@DrawableRes int turnIconOffRampSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOffRampSlightRight(@DrawableRes int turnIconOffRampSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOnRamp(@DrawableRes int turnIconOnRamp);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOnRampLeft(@DrawableRes int turnIconOnRampLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOnRampRight(@DrawableRes int turnIconOnRampRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOnRampSharpLeft(@DrawableRes int turnIconOnRampSharpLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOnRampSharpRight(@DrawableRes int turnIconOnRampSharpRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOnRampSlightLeft(@DrawableRes int turnIconOnRampSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOnRampSlightRight(@DrawableRes int turnIconOnRampSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconOnRampStraight(@DrawableRes int turnIconOnRampStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRamp(@DrawableRes int turnIconRamp);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRotary(@DrawableRes int turnIconRotary);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRotaryLeft(@DrawableRes int turnIconRotaryLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRotaryRight(@DrawableRes int turnIconRotaryRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRotarySharpLeft(@DrawableRes int turnIconRotarySharpLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRotarySharpRight(@DrawableRes int turnIconRotarySharpRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRotarySlightLeft(@DrawableRes int turnIconRotarySlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRotarySlightRight(@DrawableRes int turnIconRotarySlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRotaryStraight(@DrawableRes int turnIconRotaryStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRoundabout(@DrawableRes int turnIconRoundabout);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRoundaboutLeft(@DrawableRes int turnIconRoundaboutLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRoundaboutRight(@DrawableRes int turnIconRoundaboutRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRoundaboutSharpLeft(@DrawableRes int turnIconRoundaboutSharpLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRoundaboutSharpRight(@DrawableRes int turnIconRoundaboutSharpRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRoundaboutSlightLeft(@DrawableRes int turnIconRoundaboutSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRoundaboutSlightRight(@DrawableRes int turnIconRoundaboutSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconRoundaboutStraight(@DrawableRes int turnIconRoundaboutStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconTurnLeft(@DrawableRes int turnIconTurnLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconTurnRight(@DrawableRes int turnIconTurnRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconTurnSharpLeft(@DrawableRes int turnIconTurnSharpLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconTurnSharpRight(@DrawableRes int turnIconTurnSharpRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconTurnSlightLeft(@DrawableRes int turnIconTurnSlightLeft);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconTurnSlightRight(@DrawableRes int turnIconTurnSlightRight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconTurnStraight(@DrawableRes int turnIconTurnStraight);
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources.Builder turnIconUturn(@DrawableRes int turnIconUturn);
  }

  public static final class TurnIconResources.Companion {
    method public com.mapbox.navigation.tripdata.maneuver.model.TurnIconResources defaultIconSet();
  }

}

package com.mapbox.navigation.tripdata.progress.api {

  public final class MapboxTripProgressApi {
    ctor public MapboxTripProgressApi(com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter formatter);
    method @Deprecated public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter getFormatter();
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.tripdata.progress.model.TripOverviewError,com.mapbox.navigation.tripdata.progress.model.TripOverviewValue> getTripDetails(com.mapbox.navigation.base.route.NavigationRoute route);
    method public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateValue getTripProgress(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method @Deprecated public void setFormatter(com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter);
    property @Deprecated public final com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter formatter;
  }

}

package com.mapbox.navigation.tripdata.progress.model {

  public final class DistanceRemainingFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<java.lang.Double,android.text.SpannableString> {
    ctor public DistanceRemainingFormatter(com.mapbox.navigation.base.formatter.DistanceFormatterOptions distanceFormatterOptions);
    method public android.text.SpannableString format(double update);
  }

  public final class EstimatedTimeOfArrivalFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<java.util.Calendar,android.text.SpannableString> {
    ctor public EstimatedTimeOfArrivalFormatter(android.content.Context context, @com.mapbox.navigation.base.TimeFormat.Type int timeFormatType = -1);
    method public android.text.SpannableString format(java.util.Calendar update);
  }

  @Deprecated public final class EstimatedTimeToArrivalFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<java.lang.Long,android.text.SpannableString> {
    ctor @Deprecated public EstimatedTimeToArrivalFormatter(android.content.Context context, @com.mapbox.navigation.base.TimeFormat.Type int timeFormatType = -1);
    method @Deprecated public android.text.SpannableString format(long update);
  }

  public final class PercentDistanceTraveledFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<java.lang.Double,android.text.SpannableString> {
    ctor public PercentDistanceTraveledFormatter();
    method public android.text.SpannableString format(double update);
  }

  public final class RouteLegTripOverview {
    method public java.util.TimeZone? getArrivalTimeZone();
    method public long getEstimatedTimeToArrival();
    method public double getLegDistance();
    method public int getLegIndex();
    method public double getLegTime();
    property public final java.util.TimeZone? arrivalTimeZone;
    property public final long estimatedTimeToArrival;
    property public final double legDistance;
    property public final int legIndex;
    property public final double legTime;
  }

  public final class TimeRemainingFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<java.lang.Double,android.text.SpannableString> {
    ctor public TimeRemainingFormatter(android.content.Context context, java.util.Locale? locale = null);
    method public android.text.SpannableString format(double update);
    method public java.util.Locale? getLocale();
    method public void setLocale(java.util.Locale?);
    property public final java.util.Locale? locale;
  }

  public final class TripOverviewError {
    method public String? getErrorMessage();
    method public Throwable? getThrowable();
    property public final String? errorMessage;
    property public final Throwable? throwable;
  }

  public final class TripOverviewValue {
    method public java.util.TimeZone? getArrivalTimeZone();
    method public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter getFormatter();
    method public java.util.List<com.mapbox.navigation.tripdata.progress.model.RouteLegTripOverview> getRouteLegTripDetail();
    method public double getTotalDistance();
    method public long getTotalEstimatedTimeToArrival();
    method public double getTotalTime();
    property public final java.util.TimeZone? arrivalTimeZone;
    property public final com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter formatter;
    property public final java.util.List<com.mapbox.navigation.tripdata.progress.model.RouteLegTripOverview> routeLegTripDetail;
    property public final double totalDistance;
    property public final long totalEstimatedTimeToArrival;
    property public final double totalTime;
  }

  public final class TripProgressUpdateFormatter {
    method public android.text.SpannableString getDistanceRemaining(double value);
    method public android.text.SpannableString getEstimatedTimeToArrival(long value, java.util.TimeZone? timeZone = null);
    method public android.text.SpannableString getEstimatedTimeToArrival(long value);
    method public android.text.SpannableString getPercentRouteTraveled(double value);
    method public android.text.SpannableString getTimeRemaining(double value);
    method public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter.Builder toBuilder(android.content.Context context);
  }

  public static final class TripProgressUpdateFormatter.Builder {
    ctor public TripProgressUpdateFormatter.Builder(android.content.Context context);
    method public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter build();
    method public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter.Builder distanceRemainingFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super java.lang.Double,? extends android.text.SpannableString> formatter);
    method public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter.Builder estimatedTimeOfArrivalFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super java.util.Calendar,? extends android.text.SpannableString> formatter);
    method @Deprecated public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter.Builder estimatedTimeToArrivalFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super java.lang.Long,? extends android.text.SpannableString> formatter);
    method public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter.Builder percentRouteTraveledFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super java.lang.Double,? extends android.text.SpannableString> formatter);
    method public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter.Builder timeRemainingFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super java.lang.Double,? extends android.text.SpannableString> formatter);
  }

  public final class TripProgressUpdateValue {
    method public java.util.TimeZone? getArrivalTimeZone();
    method public double getCurrentLegTimeRemaining();
    method public double getDistanceRemaining();
    method public long getEstimatedTimeToArrival();
    method public com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter getFormatter();
    method public double getPercentRouteTraveled();
    method public double getTotalTimeRemaining();
    method public int getTrafficCongestionColor();
    property public final java.util.TimeZone? arrivalTimeZone;
    property public final double currentLegTimeRemaining;
    property public final double distanceRemaining;
    property public final long estimatedTimeToArrival;
    property public final com.mapbox.navigation.tripdata.progress.model.TripProgressUpdateFormatter formatter;
    property public final double percentRouteTraveled;
    property public final double totalTimeRemaining;
    property public final int trafficCongestionColor;
  }

}

package com.mapbox.navigation.tripdata.shield {

  public final class ShieldsCacheKt {
  }

}

package com.mapbox.navigation.tripdata.shield.api {

  public final class MapboxRouteShieldApi {
    ctor public MapboxRouteShieldApi();
    method public void cancel();
    method public void getRouteShields(java.util.List<? extends com.mapbox.api.directions.v5.models.BannerComponents>? bannerComponents, com.mapbox.navigation.tripdata.shield.model.RouteShieldCallback callback);
    method public void getRouteShields(java.util.List<? extends com.mapbox.api.directions.v5.models.BannerComponents>? bannerComponents, String? userId, String? styleId, com.mapbox.navigation.tripdata.shield.model.RouteShieldCallback callback);
    method public void getRouteShields(com.mapbox.navigation.base.road.model.Road road, com.mapbox.navigation.tripdata.shield.model.RouteShieldCallback callback);
    method public void getRouteShields(com.mapbox.navigation.base.road.model.Road road, String? userId, String? styleId, com.mapbox.navigation.tripdata.shield.model.RouteShieldCallback callback);
  }

}

package com.mapbox.navigation.tripdata.shield.model {

  public abstract sealed class RouteShield {
    method public final byte[] getByteArray();
    method public final String getUrl();
    method public abstract android.graphics.Bitmap? toBitmap(android.content.res.Resources resources, Integer? desiredHeight = null);
    property public final byte[] byteArray;
    property public final String url;
  }

  public static final class RouteShield.MapboxDesignedShield extends com.mapbox.navigation.tripdata.shield.model.RouteShield {
    method public boolean compareWith(com.mapbox.api.directions.v5.models.MapboxShield? other);
    method public com.mapbox.api.directions.v5.models.MapboxShield getMapboxShield();
    method public com.mapbox.api.directions.v5.models.ShieldSprite getShieldSprite();
    method public android.graphics.Bitmap? toBitmap(android.content.res.Resources resources, Integer? desiredHeight);
    property public final com.mapbox.api.directions.v5.models.MapboxShield mapboxShield;
    property public final com.mapbox.api.directions.v5.models.ShieldSprite shieldSprite;
  }

  public static final class RouteShield.MapboxLegacyShield extends com.mapbox.navigation.tripdata.shield.model.RouteShield {
    method public boolean compareWith(String? other);
    method public String getInitialUrl();
    method public android.graphics.Bitmap? toBitmap(android.content.res.Resources resources, Integer? desiredHeight);
    property public final String initialUrl;
  }

  public fun interface RouteShieldCallback {
    method @UiThread public void onRoadShields(java.util.List<? extends com.mapbox.bindgen.Expected<com.mapbox.navigation.tripdata.shield.model.RouteShieldError,com.mapbox.navigation.tripdata.shield.model.RouteShieldResult>> shields);
  }

  public final class RouteShieldError {
    method public String getErrorMessage();
    method public String? getUrl();
    property public final String errorMessage;
    property public final String? url;
  }

  @com.mapbox.navigation.base.ExperimentalMapboxNavigationAPI public final class RouteShieldFactory {
    method public static com.mapbox.navigation.tripdata.shield.model.RouteShield.MapboxLegacyShield buildRouteShield(String downloadUrl, byte[] byteArray, String initialUrl);
    method public static com.mapbox.navigation.tripdata.shield.model.RouteShield.MapboxDesignedShield buildRouteShield(String downloadUrl, byte[] byteArray, com.mapbox.api.directions.v5.models.MapboxShield mapboxShield, com.mapbox.api.directions.v5.models.ShieldSprite shieldSprite);
    field public static final com.mapbox.navigation.tripdata.shield.model.RouteShieldFactory INSTANCE;
  }

  public final class RouteShieldOrigin {
    method public String getOriginalErrorMessage();
    method public String? getOriginalUrl();
    method public boolean isFallback();
    property public final boolean isFallback;
    property public final String originalErrorMessage;
    property public final String? originalUrl;
  }

  public final class RouteShieldResult {
    method public com.mapbox.navigation.tripdata.shield.model.RouteShieldOrigin getOrigin();
    method public com.mapbox.navigation.tripdata.shield.model.RouteShield getShield();
    property public final com.mapbox.navigation.tripdata.shield.model.RouteShieldOrigin origin;
    property public final com.mapbox.navigation.tripdata.shield.model.RouteShield shield;
  }

}

package com.mapbox.navigation.tripdata.speedlimit.api {

  public final class MapboxSpeedInfoApi {
    ctor public MapboxSpeedInfoApi();
    method public com.mapbox.navigation.tripdata.speedlimit.model.SpeedInfoValue? updatePostedAndCurrentSpeed(com.mapbox.navigation.core.trip.session.LocationMatcherResult locationMatcherResult, com.mapbox.navigation.base.formatter.DistanceFormatterOptions distanceFormatterOptions, com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super com.mapbox.navigation.tripdata.speedlimit.model.SpeedData,java.lang.Integer> formatter = com.mapbox.navigation.tripdata.speedlimit.model.PostedAndCurrentSpeedFormatter());
  }

}

package com.mapbox.navigation.tripdata.speedlimit.model {

  public final class PostedAndCurrentSpeedFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<com.mapbox.navigation.tripdata.speedlimit.model.SpeedData,java.lang.Integer> {
    ctor public PostedAndCurrentSpeedFormatter();
    method public Integer format(com.mapbox.navigation.tripdata.speedlimit.model.SpeedData update);
  }

  public final class SpeedData {
    method public com.mapbox.navigation.base.speed.model.SpeedUnit getFromUnit();
    method public double getSpeed();
    method public com.mapbox.navigation.base.formatter.UnitType getToUnit();
    property public final com.mapbox.navigation.base.speed.model.SpeedUnit fromUnit;
    property public final double speed;
    property public final com.mapbox.navigation.base.formatter.UnitType toUnit;
  }

  public final class SpeedInfoValue {
    method public int getCurrentSpeed();
    method public Integer? getPostedSpeed();
    method public com.mapbox.navigation.base.speed.model.SpeedUnit getPostedSpeedUnit();
    method public com.mapbox.navigation.base.speed.model.SpeedLimitSign? getSpeedSignConvention();
    property public final int currentSpeed;
    property public final Integer? postedSpeed;
    property public final com.mapbox.navigation.base.speed.model.SpeedUnit postedSpeedUnit;
    property public final com.mapbox.navigation.base.speed.model.SpeedLimitSign? speedSignConvention;
  }

}

