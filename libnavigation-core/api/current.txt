// Signature format: 3.0
package com.mapbox.navigation.core {

  @UiThread public final class MapboxNavigation {
    ctor public MapboxNavigation(com.mapbox.navigation.base.options.NavigationOptions navigationOptions);
    method public void cancelRouteRequest(long requestId);
    method public com.mapbox.navigator.Experimental getExperimental();
    method public com.mapbox.navigation.core.trip.session.eh.GraphAccessor getGraphAccessor();
    method public com.mapbox.navigation.core.history.MapboxHistoryRecorder getHistoryRecorder();
    method public com.mapbox.navigation.base.options.NavigationOptions getNavigationOptions();
    method public com.mapbox.navigation.core.reroute.RerouteController? getRerouteController();
    method public com.mapbox.navigation.core.trip.session.eh.RoadObjectMatcher getRoadObjectMatcher();
    method public com.mapbox.navigation.core.trip.session.eh.RoadObjectsStore getRoadObjectsStore();
    method public java.util.List<com.mapbox.api.directions.v5.models.DirectionsRoute> getRoutes();
    method public com.mapbox.navigation.core.navigator.TilesetDescriptorFactory getTilesetDescriptorFactory();
    method public com.mapbox.navigation.core.trip.session.TripSessionState getTripSessionState();
    method public boolean navigateNextRouteLeg();
    method public void onDestroy();
    method public void postUserFeedback(@com.mapbox.navigation.core.telemetry.events.FeedbackEvent.Type String feedbackType, String description, @com.mapbox.navigation.core.telemetry.events.FeedbackEvent.Source String feedbackSource, String? screenshot, String![]? feedbackSubType = emptyArray(), com.mapbox.navigation.core.telemetry.events.AppMetadata? appMetadata = null);
    method public void postUserFeedback(@com.mapbox.navigation.core.telemetry.events.FeedbackEvent.Type String feedbackType, String description, @com.mapbox.navigation.core.telemetry.events.FeedbackEvent.Source String feedbackSource, String? screenshot, String![]? feedbackSubType = emptyArray());
    method public void postUserFeedback(@com.mapbox.navigation.core.telemetry.events.FeedbackEvent.Type String feedbackType, String description, @com.mapbox.navigation.core.telemetry.events.FeedbackEvent.Source String feedbackSource, String? screenshot);
    method public void registerArrivalObserver(com.mapbox.navigation.core.arrival.ArrivalObserver arrivalObserver);
    method public void registerBannerInstructionsObserver(com.mapbox.navigation.core.trip.session.BannerInstructionsObserver bannerInstructionsObserver);
    method public void registerEHorizonObserver(com.mapbox.navigation.core.trip.session.eh.EHorizonObserver eHorizonObserver);
    method public void registerLocationObserver(com.mapbox.navigation.core.trip.session.LocationObserver locationObserver);
    method public void registerMapMatcherResultObserver(com.mapbox.navigation.core.trip.session.MapMatcherResultObserver mapMatcherResultObserver);
    method public void registerNavigationVersionSwitchObserver(com.mapbox.navigation.core.NavigationVersionSwitchObserver observer);
    method public void registerOffRouteObserver(com.mapbox.navigation.core.trip.session.OffRouteObserver offRouteObserver);
    method public void registerRoadObjectsOnRouteObserver(com.mapbox.navigation.core.trip.session.RoadObjectsOnRouteObserver roadObjectsOnRouteObserver);
    method public void registerRouteAlternativesObserver(com.mapbox.navigation.core.routealternatives.RouteAlternativesObserver routeAlternativesObserver);
    method public void registerRouteProgressObserver(com.mapbox.navigation.core.trip.session.RouteProgressObserver routeProgressObserver);
    method public void registerRoutesObserver(com.mapbox.navigation.core.directions.session.RoutesObserver routesObserver);
    method public void registerTripSessionStateObserver(com.mapbox.navigation.core.trip.session.TripSessionStateObserver tripSessionStateObserver);
    method public void registerVoiceInstructionsObserver(com.mapbox.navigation.core.trip.session.VoiceInstructionsObserver voiceInstructionsObserver);
    method public long requestRoutes(com.mapbox.api.directions.v5.models.RouteOptions routeOptions, com.mapbox.navigation.base.route.RouterCallback routesRequestCallback);
    method public void resetTripSession();
    method public String? retrieveSsmlAnnouncementInstruction(int index);
    method public void setArrivalController(com.mapbox.navigation.core.arrival.ArrivalController? arrivalController = com.mapbox.navigation.core.arrival.AutoArrivalController());
    method public void setArrivalController();
    method public void setRerouteController(com.mapbox.navigation.core.reroute.RerouteController? rerouteController = com.mapbox.navigation.core.MapboxNavigation.defaultRerouteController);
    method public void setRerouteController();
    method public void setRoutes(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
    method @RequiresPermission(anyOf={android.Manifest.permission.ACCESS_COARSE_LOCATION, android.Manifest.permission.ACCESS_FINE_LOCATION}) public void startTripSession();
    method public void stopTripSession();
    method public void unregisterArrivalObserver(com.mapbox.navigation.core.arrival.ArrivalObserver arrivalObserver);
    method public void unregisterBannerInstructionsObserver(com.mapbox.navigation.core.trip.session.BannerInstructionsObserver bannerInstructionsObserver);
    method public void unregisterEHorizonObserver(com.mapbox.navigation.core.trip.session.eh.EHorizonObserver eHorizonObserver);
    method public void unregisterLocationObserver(com.mapbox.navigation.core.trip.session.LocationObserver locationObserver);
    method public void unregisterMapMatcherResultObserver(com.mapbox.navigation.core.trip.session.MapMatcherResultObserver mapMatcherResultObserver);
    method public void unregisterNavigationVersionSwitchObserver(com.mapbox.navigation.core.NavigationVersionSwitchObserver observer);
    method public void unregisterOffRouteObserver(com.mapbox.navigation.core.trip.session.OffRouteObserver offRouteObserver);
    method public void unregisterRoadObjectsOnRouteObserver(com.mapbox.navigation.core.trip.session.RoadObjectsOnRouteObserver roadObjectsOnRouteObserver);
    method public void unregisterRouteAlternativesObserver(com.mapbox.navigation.core.routealternatives.RouteAlternativesObserver routeAlternativesObserver);
    method public void unregisterRouteProgressObserver(com.mapbox.navigation.core.trip.session.RouteProgressObserver routeProgressObserver);
    method public void unregisterRoutesObserver(com.mapbox.navigation.core.directions.session.RoutesObserver routesObserver);
    method public void unregisterTripSessionStateObserver(com.mapbox.navigation.core.trip.session.TripSessionStateObserver tripSessionStateObserver);
    method public void unregisterVoiceInstructionsObserver(com.mapbox.navigation.core.trip.session.VoiceInstructionsObserver voiceInstructionsObserver);
    method public void updateSensorEvent(android.hardware.SensorEvent sensorEvent);
    property public final com.mapbox.navigator.Experimental experimental;
    property public final com.mapbox.navigation.core.trip.session.eh.GraphAccessor graphAccessor;
    property public final com.mapbox.navigation.core.history.MapboxHistoryRecorder historyRecorder;
    property public final com.mapbox.navigation.base.options.NavigationOptions navigationOptions;
    property public final com.mapbox.navigation.core.trip.session.eh.RoadObjectMatcher roadObjectMatcher;
    property public final com.mapbox.navigation.core.trip.session.eh.RoadObjectsStore roadObjectsStore;
    property public final com.mapbox.navigation.core.navigator.TilesetDescriptorFactory tilesetDescriptorFactory;
  }

  public final class MapboxNavigationKt {
  }

  @UiThread public final class MapboxNavigationProvider {
    method public static com.mapbox.navigation.core.MapboxNavigation create(com.mapbox.navigation.base.options.NavigationOptions navigationOptions);
    method public static void destroy();
    method public static boolean isCreated();
    method public static com.mapbox.navigation.core.MapboxNavigation retrieve();
    field public static final com.mapbox.navigation.core.MapboxNavigationProvider INSTANCE;
  }

  public interface NavigationVersionSwitchObserver {
    method public void onSwitchToFallbackVersion(String? tilesVersion);
    method public void onSwitchToTargetVersion(String? tilesVersion);
  }

}

package com.mapbox.navigation.core.arrival {

  public interface ArrivalController {
    method public boolean navigateNextRouteLeg(com.mapbox.navigation.base.trip.model.RouteLegProgress routeLegProgress);
  }

  public interface ArrivalObserver {
    method public void onFinalDestinationArrival(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public void onNextRouteLegStart(com.mapbox.navigation.base.trip.model.RouteLegProgress routeLegProgress);
    method public void onWaypointArrival(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
  }

  public class AutoArrivalController implements com.mapbox.navigation.core.arrival.ArrivalController {
    ctor public AutoArrivalController();
    method public boolean navigateNextRouteLeg(com.mapbox.navigation.base.trip.model.RouteLegProgress routeLegProgress);
  }

}

package com.mapbox.navigation.core.directions.session {

  public fun interface RoutesObserver {
    method public void onRoutesChanged(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
  }

}

package com.mapbox.navigation.core.formatter {

  public final class MapboxDistanceFormatter implements com.mapbox.navigation.base.formatter.DistanceFormatter {
    ctor public MapboxDistanceFormatter(com.mapbox.navigation.base.formatter.DistanceFormatterOptions options);
    method public android.text.SpannableString formatDistance(double distance);
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions getOptions();
    property public final com.mapbox.navigation.base.formatter.DistanceFormatterOptions options;
  }

}

package com.mapbox.navigation.core.history {

  public final class MapboxHistoryReader implements java.util.Iterator<com.mapbox.navigation.core.history.model.HistoryEvent> kotlin.jvm.internal.markers.KMappedMarker {
    ctor public MapboxHistoryReader(String filePath);
    method public String getFilePath();
    method public boolean hasNext();
    method public com.mapbox.navigation.core.history.model.HistoryEvent next();
    property public final String filePath;
  }

  public final class MapboxHistoryRecorder {
    method public String? fileDirectory();
    method public void pushHistory(String eventType, String eventJson);
    method public void startRecording();
    method public void stopRecording(com.mapbox.navigation.core.history.SaveHistoryCallback result);
  }

  public fun interface SaveHistoryCallback {
    method public void onSaved(String? filepath);
  }

}

package com.mapbox.navigation.core.history.model {

  public interface HistoryEvent {
    method public double getEventTimestamp();
    property public abstract double eventTimestamp;
  }

  public final class HistoryEventGetStatus implements com.mapbox.navigation.core.history.model.HistoryEvent {
    method public long getElapsedRealtimeNanos();
    method public double getEventTimestamp();
    property public final long elapsedRealtimeNanos;
    property public double eventTimestamp;
  }

  public final class HistoryEventPushHistoryRecord implements com.mapbox.navigation.core.history.model.HistoryEvent {
    method public double getEventTimestamp();
    method public String getProperties();
    method public String getType();
    property public double eventTimestamp;
    property public final String properties;
    property public final String type;
  }

  public final class HistoryEventSetRoute implements com.mapbox.navigation.core.history.model.HistoryEvent {
    method public com.mapbox.api.directions.v5.models.DirectionsRoute? getDirectionsRoute();
    method public double getEventTimestamp();
    method public String getGeometries();
    method public int getLegIndex();
    method public String getProfile();
    method public int getRouteIndex();
    method public java.util.List<com.mapbox.navigation.core.history.model.HistoryWaypoint> getWaypoints();
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute? directionsRoute;
    property public double eventTimestamp;
    property public final String geometries;
    property public final int legIndex;
    property public final String profile;
    property public final int routeIndex;
    property public final java.util.List<com.mapbox.navigation.core.history.model.HistoryWaypoint> waypoints;
  }

  public final class HistoryEventUpdateLocation implements com.mapbox.navigation.core.history.model.HistoryEvent {
    method public double getEventTimestamp();
    method public android.location.Location getLocation();
    property public double eventTimestamp;
    property public final android.location.Location location;
  }

  public final class HistoryWaypoint {
    method public com.mapbox.geojson.Point getPoint();
    method public boolean isSilent();
    property public final boolean isSilent;
    property public final com.mapbox.geojson.Point point;
  }

}

package com.mapbox.navigation.core.navigator {

  public final class LocationEx {
  }

  public final class NavigatorMapper {
  }

  public final class TilesetDescriptorFactory {
    method public com.mapbox.common.TilesetDescriptor build(String? tilesDataset = null, String? tilesProfile = null, String? tilesVersion = null);
    method public com.mapbox.common.TilesetDescriptor build(String? tilesDataset = null, String? tilesProfile = null);
    method public com.mapbox.common.TilesetDescriptor build(String? tilesDataset = null);
    method public com.mapbox.common.TilesetDescriptor build();
    method public com.mapbox.common.TilesetDescriptor getLatest();
    method public com.mapbox.common.TilesetDescriptor getSpecificVersion(String tilesVersion);
  }

  public final class TilesetDescriptorFactoryKt {
  }

}

package com.mapbox.navigation.core.replay {

  public final class MapboxReplayer {
    ctor public MapboxReplayer();
    method public void clearEvents();
    method public double durationSeconds();
    method public double eventSeconds(double eventTimestamp);
    method public void finish();
    method public void play();
    method public void playFirstLocation();
    method public void playbackSpeed(double scale);
    method public com.mapbox.navigation.core.replay.MapboxReplayer pushEvents(java.util.List<? extends com.mapbox.navigation.core.replay.history.ReplayEventBase> events);
    method public void pushRealLocation(android.content.Context context, double eventTimestamp);
    method public void registerObserver(com.mapbox.navigation.core.replay.history.ReplayEventsObserver observer);
    method public void seekTo(double replayTime);
    method public void seekTo(com.mapbox.navigation.core.replay.history.ReplayEventBase replayEvent);
    method public void stop();
    method public void unregisterObserver(com.mapbox.navigation.core.replay.history.ReplayEventsObserver observer);
    method public void unregisterObservers();
  }

  public final class ReplayLocationEngine implements com.mapbox.android.core.location.LocationEngine com.mapbox.navigation.core.replay.history.ReplayEventsObserver {
    ctor public ReplayLocationEngine(com.mapbox.navigation.core.replay.MapboxReplayer mapboxReplayer);
    method public void getLastLocation(com.mapbox.android.core.location.LocationEngineCallback<com.mapbox.android.core.location.LocationEngineResult> callback);
    method public void removeLocationUpdates(com.mapbox.android.core.location.LocationEngineCallback<com.mapbox.android.core.location.LocationEngineResult> callback);
    method public void removeLocationUpdates(android.app.PendingIntent? pendingIntent);
    method public void replayEvents(java.util.List<? extends com.mapbox.navigation.core.replay.history.ReplayEventBase> replayEvents);
    method public void requestLocationUpdates(com.mapbox.android.core.location.LocationEngineRequest request, com.mapbox.android.core.location.LocationEngineCallback<com.mapbox.android.core.location.LocationEngineResult> callback, android.os.Looper? looper);
    method public void requestLocationUpdates(com.mapbox.android.core.location.LocationEngineRequest request, android.app.PendingIntent? pendingIntent);
  }

  public final class ReplayLocationEngineKt {
  }

}

package com.mapbox.navigation.core.replay.history {

  public interface ReplayEventBase {
    method public double getEventTimestamp();
    property public abstract double eventTimestamp;
  }

  public final class ReplayEventGetStatus implements com.mapbox.navigation.core.replay.history.ReplayEventBase {
    ctor public ReplayEventGetStatus(@com.google.gson.annotations.SerializedName("event_timestamp") double eventTimestamp);
    method public double component1();
    method public com.mapbox.navigation.core.replay.history.ReplayEventGetStatus copy(double eventTimestamp);
    method public double getEventTimestamp();
    property public double eventTimestamp;
  }

  public final class ReplayEventLocation {
    ctor public ReplayEventLocation(@com.google.gson.annotations.SerializedName("lon") double lon, @com.google.gson.annotations.SerializedName("lat") double lat, @com.google.gson.annotations.SerializedName("provider") String? provider, @com.google.gson.annotations.SerializedName("time") Double? time, @com.google.gson.annotations.SerializedName("altitude") Double? altitude, @com.google.gson.annotations.SerializedName("accuracyHorizontal") Double? accuracyHorizontal, @com.google.gson.annotations.SerializedName("bearing") Double? bearing, @com.google.gson.annotations.SerializedName("speed") Double? speed);
    method public double component1();
    method public double component2();
    method public String? component3();
    method public Double? component4();
    method public Double? component5();
    method public Double? component6();
    method public Double? component7();
    method public Double? component8();
    method public com.mapbox.navigation.core.replay.history.ReplayEventLocation copy(double lon, double lat, String? provider, Double? time, Double? altitude, Double? accuracyHorizontal, Double? bearing, Double? speed);
    method public Double? getAccuracyHorizontal();
    method public Double? getAltitude();
    method public Double? getBearing();
    method public double getLat();
    method public double getLon();
    method public String? getProvider();
    method public Double? getSpeed();
    method public Double? getTime();
    property public final Double? accuracyHorizontal;
    property public final Double? altitude;
    property public final Double? bearing;
    property public final double lat;
    property public final double lon;
    property public final String? provider;
    property public final Double? speed;
    property public final Double? time;
  }

  public final class ReplayEventUpdateLocation implements com.mapbox.navigation.core.replay.history.ReplayEventBase {
    ctor public ReplayEventUpdateLocation(@com.google.gson.annotations.SerializedName("event_timestamp") double eventTimestamp, @com.google.gson.annotations.SerializedName("location") com.mapbox.navigation.core.replay.history.ReplayEventLocation location);
    method public double component1();
    method public com.mapbox.navigation.core.replay.history.ReplayEventLocation component2();
    method public com.mapbox.navigation.core.replay.history.ReplayEventUpdateLocation copy(double eventTimestamp, com.mapbox.navigation.core.replay.history.ReplayEventLocation location);
    method public double getEventTimestamp();
    method public com.mapbox.navigation.core.replay.history.ReplayEventLocation getLocation();
    property public double eventTimestamp;
    property public final com.mapbox.navigation.core.replay.history.ReplayEventLocation location;
  }

  public final class ReplayEvents {
    ctor public ReplayEvents(java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> events);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> component1();
    method public com.mapbox.navigation.core.replay.history.ReplayEvents copy(java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> events);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> getEvents();
    property public final java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> events;
  }

  public fun interface ReplayEventsObserver {
    method public void replayEvents(java.util.List<? extends com.mapbox.navigation.core.replay.history.ReplayEventBase> events);
  }

  public fun interface ReplayHistoryEventMapper<Event extends com.mapbox.navigation.core.history.model.HistoryEvent> {
    method public com.mapbox.navigation.core.replay.history.ReplayEventBase? map(Event event);
  }

  public final class ReplayHistoryMapper {
    method public com.mapbox.navigation.core.replay.history.ReplayEventBase? mapToReplayEvent(com.mapbox.navigation.core.history.model.HistoryEvent historyEvent);
    method public com.mapbox.navigation.core.replay.history.ReplayHistoryMapper.Builder toBuilder();
  }

  public static final class ReplayHistoryMapper.Builder {
    ctor public ReplayHistoryMapper.Builder();
    method public com.mapbox.navigation.core.replay.history.ReplayHistoryMapper build();
    method public com.mapbox.navigation.core.replay.history.ReplayHistoryMapper.Builder locationMapper(com.mapbox.navigation.core.replay.history.ReplayHistoryEventMapper<com.mapbox.navigation.core.history.model.HistoryEventUpdateLocation>? locationMapper);
    method public com.mapbox.navigation.core.replay.history.ReplayHistoryMapper.Builder pushEventMappers(java.util.List<? extends com.mapbox.navigation.core.replay.history.ReplayHistoryEventMapper<com.mapbox.navigation.core.history.model.HistoryEventPushHistoryRecord>> pushEventMappers);
    method public com.mapbox.navigation.core.replay.history.ReplayHistoryMapper.Builder setRouteMapper(com.mapbox.navigation.core.replay.history.ReplayHistoryEventMapper<com.mapbox.navigation.core.history.model.HistoryEventSetRoute>? setRouteMapper);
    method public com.mapbox.navigation.core.replay.history.ReplayHistoryMapper.Builder statusMapper(com.mapbox.navigation.core.replay.history.ReplayHistoryEventMapper<com.mapbox.navigation.core.history.model.HistoryEventGetStatus>? statusMapper);
  }

  public final class ReplaySetRoute implements com.mapbox.navigation.core.replay.history.ReplayEventBase {
    ctor public ReplaySetRoute(@com.google.gson.annotations.SerializedName("event_timestamp") double eventTimestamp, @com.google.gson.annotations.SerializedName("route") com.mapbox.api.directions.v5.models.DirectionsRoute? route);
    method public double component1();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute? component2();
    method public com.mapbox.navigation.core.replay.history.ReplaySetRoute copy(double eventTimestamp, com.mapbox.api.directions.v5.models.DirectionsRoute? route);
    method public double getEventTimestamp();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute? getRoute();
    property public double eventTimestamp;
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute? route;
  }

}

package com.mapbox.navigation.core.replay.route {

  public final class ReplayProgressObserver implements com.mapbox.navigation.core.trip.session.RouteProgressObserver {
    ctor public ReplayProgressObserver(com.mapbox.navigation.core.replay.MapboxReplayer mapboxReplayer);
    method public void onRouteProgressChanged(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public com.mapbox.navigation.core.replay.route.ReplayProgressObserver updateOptions(com.mapbox.navigation.core.replay.route.ReplayRouteOptions options);
  }

  public final class ReplayRouteMapper {
    ctor public ReplayRouteMapper(com.mapbox.navigation.core.replay.route.ReplayRouteOptions options = ReplayRouteOptions.<init>().build());
    ctor public ReplayRouteMapper(com.mapbox.navigation.core.replay.route.ReplayRouteOptions options = ReplayRouteOptions.<init>().build(), com.mapbox.base.common.logger.Logger logger);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions getOptions();
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapDirectionsRouteGeometry(com.mapbox.api.directions.v5.models.DirectionsRoute directionsRoute);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapDirectionsRouteLegAnnotation(com.mapbox.api.directions.v5.models.DirectionsRoute directionsRoute);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapGeometry(String geometry);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapRouteLegAnnotation(com.mapbox.api.directions.v5.models.RouteLeg routeLeg);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapRouteLegGeometry(com.mapbox.api.directions.v5.models.RouteLeg routeLeg);
    method public static com.mapbox.navigation.core.replay.history.ReplayEventUpdateLocation mapToUpdateLocation(double eventTimestamp, com.mapbox.geojson.Point point);
    method public static com.mapbox.navigation.core.replay.history.ReplayEventBase mapToUpdateLocation(double eventTimestamp, android.location.Location location);
    method public void setOptions(com.mapbox.navigation.core.replay.route.ReplayRouteOptions p);
    property public final com.mapbox.navigation.core.replay.route.ReplayRouteOptions options;
    field public static final com.mapbox.navigation.core.replay.route.ReplayRouteMapper.Companion Companion;
  }

  public static final class ReplayRouteMapper.Companion {
    method public com.mapbox.navigation.core.replay.history.ReplayEventUpdateLocation mapToUpdateLocation(double eventTimestamp, com.mapbox.geojson.Point point);
    method public com.mapbox.navigation.core.replay.history.ReplayEventBase mapToUpdateLocation(double eventTimestamp, android.location.Location location);
  }

  public final class ReplayRouteOptions {
    method public double getMaxAcceleration();
    method public double getMaxSpeedMps();
    method public double getMinAcceleration();
    method public double getTurnSpeedMps();
    method public double getUTurnSpeedMps();
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder toBuilder();
    property public final double maxAcceleration;
    property public final double maxSpeedMps;
    property public final double minAcceleration;
    property public final double turnSpeedMps;
    property public final double uTurnSpeedMps;
  }

  public static final class ReplayRouteOptions.Builder {
    ctor public ReplayRouteOptions.Builder();
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions build();
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder maxAcceleration(double maxAcceleration);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder maxSpeedMps(double maxSpeedMps);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder minAcceleration(double minAcceleration);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder turnSpeedMps(double minSpeedMps);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder uTurnSpeedMps(double uTurnSpeedMps);
  }

}

package com.mapbox.navigation.core.reroute {

  public interface RerouteController {
    method public com.mapbox.navigation.core.reroute.RerouteState getState();
    method public void interrupt();
    method public boolean registerRerouteStateObserver(com.mapbox.navigation.core.reroute.RerouteController.RerouteStateObserver rerouteStateObserver);
    method public void reroute(com.mapbox.navigation.core.reroute.RerouteController.RoutesCallback routesCallback);
    method public boolean unregisterRerouteStateObserver(com.mapbox.navigation.core.reroute.RerouteController.RerouteStateObserver rerouteStateObserver);
    property public abstract com.mapbox.navigation.core.reroute.RerouteState state;
  }

  public static fun interface RerouteController.RerouteStateObserver {
    method public void onRerouteStateChanged(com.mapbox.navigation.core.reroute.RerouteState rerouteState);
  }

  public static fun interface RerouteController.RoutesCallback {
    method public void onNewRoutes(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
  }

  public abstract sealed class RerouteState {
  }

  public static final class RerouteState.Failed extends com.mapbox.navigation.core.reroute.RerouteState {
    ctor public RerouteState.Failed(String message, Throwable? throwable = null, java.util.List<com.mapbox.navigation.base.route.RouterFailure>? reasons = null);
    ctor public RerouteState.Failed(String message, Throwable? throwable = null);
    ctor public RerouteState.Failed(String message);
    method public String component1();
    method public Throwable? component2();
    method public java.util.List<com.mapbox.navigation.base.route.RouterFailure>? component3();
    method public com.mapbox.navigation.core.reroute.RerouteState.Failed copy(String message, Throwable? throwable, java.util.List<com.mapbox.navigation.base.route.RouterFailure>? reasons);
    method public String getMessage();
    method public java.util.List<com.mapbox.navigation.base.route.RouterFailure>? getReasons();
    method public Throwable? getThrowable();
    property public final String message;
    property public final java.util.List<com.mapbox.navigation.base.route.RouterFailure>? reasons;
    property public final Throwable? throwable;
  }

  public static final class RerouteState.FetchingRoute extends com.mapbox.navigation.core.reroute.RerouteState {
    field public static final com.mapbox.navigation.core.reroute.RerouteState.FetchingRoute INSTANCE;
  }

  public static final class RerouteState.Idle extends com.mapbox.navigation.core.reroute.RerouteState {
    field public static final com.mapbox.navigation.core.reroute.RerouteState.Idle INSTANCE;
  }

  public static final class RerouteState.Interrupted extends com.mapbox.navigation.core.reroute.RerouteState {
    field public static final com.mapbox.navigation.core.reroute.RerouteState.Interrupted INSTANCE;
  }

  public static final class RerouteState.RouteFetched extends com.mapbox.navigation.core.reroute.RerouteState {
    ctor public RerouteState.RouteFetched(com.mapbox.navigation.base.route.RouterOrigin routerOrigin);
    method public com.mapbox.navigation.base.route.RouterOrigin component1();
    method public com.mapbox.navigation.core.reroute.RerouteState.RouteFetched copy(com.mapbox.navigation.base.route.RouterOrigin routerOrigin);
    method public com.mapbox.navigation.base.route.RouterOrigin getRouterOrigin();
    property public final com.mapbox.navigation.base.route.RouterOrigin routerOrigin;
  }

}

package com.mapbox.navigation.core.routealternatives {

  public interface RouteAlternativesObserver {
    method public void onRouteAlternatives(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress, java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> alternatives, com.mapbox.navigation.base.route.RouterOrigin routerOrigin);
  }

}

package com.mapbox.navigation.core.routeoptions {

  public final class MapboxRouteOptionsUpdater implements com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater {
    ctor public MapboxRouteOptionsUpdater();
    method public com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult update(com.mapbox.api.directions.v5.models.RouteOptions? routeOptions, com.mapbox.navigation.base.trip.model.RouteProgress? routeProgress, android.location.Location? location);
  }

  public final class MapboxRouteOptionsUpdaterKt {
  }

  public fun interface RouteOptionsUpdater {
    method public com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult update(com.mapbox.api.directions.v5.models.RouteOptions? routeOptions, com.mapbox.navigation.base.trip.model.RouteProgress? routeProgress, android.location.Location? location);
  }

  public abstract static sealed class RouteOptionsUpdater.RouteOptionsResult {
  }

  public static final class RouteOptionsUpdater.RouteOptionsResult.Error extends com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult {
    ctor public RouteOptionsUpdater.RouteOptionsResult.Error(Throwable error);
    method public Throwable component1();
    method public com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult.Error copy(Throwable error);
    method public Throwable getError();
    property public final Throwable error;
  }

  public static final class RouteOptionsUpdater.RouteOptionsResult.Success extends com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult {
    ctor public RouteOptionsUpdater.RouteOptionsResult.Success(com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
    method public com.mapbox.api.directions.v5.models.RouteOptions component1();
    method public com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult.Success copy(com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
    method public com.mapbox.api.directions.v5.models.RouteOptions getRouteOptions();
    property public final com.mapbox.api.directions.v5.models.RouteOptions routeOptions;
  }

}

package com.mapbox.navigation.core.sensors {

  public final class SensorEventEmitter implements android.hardware.SensorEventListener {
    ctor public SensorEventEmitter(android.hardware.SensorManager sensorManager);
    method public void onAccuracyChanged(android.hardware.Sensor? sensor, int accuracy);
    method public void onSensorChanged(android.hardware.SensorEvent event);
    method public void start(com.mapbox.navigation.core.sensors.SensorOptions sensorOptions, kotlin.jvm.functions.Function1<? super android.hardware.SensorEvent,kotlin.Unit> eventEmitter);
    method public void stop();
  }

  public final class SensorOptions {
    method public java.util.Set<java.lang.Integer> getEnableSensorTypes();
    method public int getSignalsPerSecond();
    method public com.mapbox.navigation.core.sensors.SensorOptions.Builder toBuilder();
    property public final java.util.Set<java.lang.Integer> enableSensorTypes;
    property public final int signalsPerSecond;
  }

  public static final class SensorOptions.Builder {
    ctor public SensorOptions.Builder();
    method public com.mapbox.navigation.core.sensors.SensorOptions build();
    method public com.mapbox.navigation.core.sensors.SensorOptions.Builder enableSensorTypes(java.util.Set<java.lang.Integer> sensorTypes);
    method public com.mapbox.navigation.core.sensors.SensorOptions.Builder signalsPerSecond(int signalsPerSecond);
  }

}

package com.mapbox.navigation.core.telemetry {

  public final class TelemetryUtilsKt {
  }

}

package com.mapbox.navigation.core.telemetry.events {

  public final class AppMetadata {
    method public String getName();
    method public String? getSessionId();
    method public String? getUserId();
    method public String getVersion();
    method public com.mapbox.navigation.core.telemetry.events.AppMetadata.Builder toBuilder();
    property public final String name;
    property public final String? sessionId;
    property public final String? userId;
    property public final String version;
  }

  public static final class AppMetadata.Builder {
    ctor public AppMetadata.Builder(String name, String version);
    method public com.mapbox.navigation.core.telemetry.events.AppMetadata build();
    method public com.mapbox.navigation.core.telemetry.events.AppMetadata.Builder sessionId(String? sessionId);
    method public com.mapbox.navigation.core.telemetry.events.AppMetadata.Builder userId(String? userId);
  }

  public final class FeedbackEvent {
    field public static final String ACCIDENT = "accident";
    field public static final String ALTERNATIVE_ROUTE_NOT_EXPECTED = "alternative_route_not_expected";
    field public static final String ARRIVAL_FEEDBACK_CONFUSING_INSTRUCTIONS = "arrival_feedback_confusing_instructions";
    field public static final String ARRIVAL_FEEDBACK_GOOD = "arrival_feedback_good";
    field public static final String ARRIVAL_FEEDBACK_NOT_GOOD = "arrival_feedback_not_good";
    field public static final String ARRIVAL_FEEDBACK_THIS_PLACE_IS_CLOSED = "arrival_feedback_this_place_is_closed";
    field public static final String ARRIVAL_FEEDBACK_WRONG_ENTRANCE = "arrival_feedback_wrong_entrance";
    field public static final String ARRIVAL_FEEDBACK_WRONG_LOCATION = "arrival_feedback_wrong_location";
    field public static final String CARS_NOT_ALLOWED_ON_STREET = "cars_not_allowed_on_street";
    field public static final String CONFUSING_INSTRUCTION = "confusing_instruction";
    field public static final String EXIT_INFO_INCORRECT = "exit_info_incorrect";
    field public static final String GENERAL_ISSUE = "general";
    field public static final String GUIDANCE_TOO_EARLY = "guidance_too_early";
    field public static final String GUIDANCE_TOO_LATE = "guidance_too_late";
    field public static final String HAZARD = "hazard";
    field public static final String INACCURATE_GPS = "inaccurate_gps";
    field public static final String INCORRECT_AUDIO_GUIDANCE = "incorrect_audio_guidance";
    field public static final String INCORRECT_SPEED_LIMIT = "incorrect_speed_limit";
    field public static final String INCORRECT_VISUAL_GUIDANCE = "incorrect_visual_guidance";
    field public static final com.mapbox.navigation.core.telemetry.events.FeedbackEvent INSTANCE;
    field public static final String INSTRUCTION_MISSING = "instruction_missing";
    field public static final String INSTRUCTION_UNNECESSARY = "instruction_unnecessary";
    field public static final String LANE_GUIDANCE_INCORRECT = "lane_guidance_incorrect";
    field public static final String MANEUVER_INCORRECT = "maneuver_incorrect";
    field public static final String MISSING_EXIT = "missing_exit";
    field public static final String MISSING_ROAD = "missing_road";
    field public static final String NOT_ALLOWED = "not_allowed";
    field public static final String POSITIONING_ISSUE = "positioning_issue";
    field public static final String PRONUNCIATION_INCORRECT = "pronunciation_incorrect";
    field public static final String REROUTE = "reroute";
    field public static final String ROAD_CLOSED = "road_closed";
    field public static final String ROAD_IS_MISSING_FROM_MAP = "road_is_missing_from_map";
    field public static final String ROAD_KNOW_BY_DIFFERENT_NAME = "road_know_by_different_name";
    field public static final String ROAD_NAME_REPEATED = "road_name_repeated";
    field public static final String ROUTED_DOWN_A_ONE_WAY = "routed_down_a_one_way";
    field public static final String ROUTE_HAD_ROADS_TOO_NARROW_TO_PASS = "route_had_roads_too_narrow_to_pass";
    field public static final String ROUTE_INCLUDED_MISSING_ROADS = "route_included_missing_roads";
    field public static final String ROUTE_NOT_DRIVE_ABLE = "route_not_drive_able";
    field public static final String ROUTE_NOT_PREFERRED = "route_not_preferred";
    field public static final String ROUTING_ERROR = "routing_error";
    field public static final String STREET_NAME_INCORRECT = "street_name_incorrect";
    field public static final String STREET_PERMANENTLY_BLOCKED_OFF = "street_permanently_blocked_off";
    field public static final String TURN_AT_INTERSECTION_WAS_UNPROTECTED = "turn_at_intersection_was_unprotected";
    field public static final String TURN_ICON_INCORRECT = "turn_icon_incorrect";
    field public static final String TURN_WAS_NOT_ALLOWED = "turn_was_not_allowed";
    field public static final String UI = "user";
  }

  @StringDef({com.mapbox.navigation.core.telemetry.events.FeedbackEvent.TURN_ICON_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.STREET_NAME_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INSTRUCTION_UNNECESSARY, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INSTRUCTION_MISSING, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.MANEUVER_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.EXIT_INFO_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.LANE_GUIDANCE_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROAD_KNOW_BY_DIFFERENT_NAME, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INCORRECT_SPEED_LIMIT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.GUIDANCE_TOO_EARLY, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.GUIDANCE_TOO_LATE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.PRONUNCIATION_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROAD_NAME_REPEATED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTE_NOT_DRIVE_ABLE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTE_NOT_PREFERRED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ALTERNATIVE_ROUTE_NOT_EXPECTED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTE_INCLUDED_MISSING_ROADS, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTE_HAD_ROADS_TOO_NARROW_TO_PASS, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTED_DOWN_A_ONE_WAY, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.TURN_WAS_NOT_ALLOWED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.CARS_NOT_ALLOWED_ON_STREET, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.TURN_AT_INTERSECTION_WAS_UNPROTECTED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.STREET_PERMANENTLY_BLOCKED_OFF, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROAD_IS_MISSING_FROM_MAP, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_WRONG_LOCATION, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_WRONG_ENTRANCE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_CONFUSING_INSTRUCTIONS, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_THIS_PLACE_IS_CLOSED}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface FeedbackEvent.Description {
  }

  @StringDef({com.mapbox.navigation.core.telemetry.events.FeedbackEvent.REROUTE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.UI}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface FeedbackEvent.Source {
  }

  @StringDef({com.mapbox.navigation.core.telemetry.events.FeedbackEvent.GENERAL_ISSUE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ACCIDENT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.HAZARD, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROAD_CLOSED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.NOT_ALLOWED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTING_ERROR, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.MISSING_ROAD, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.MISSING_EXIT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.CONFUSING_INSTRUCTION, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INACCURATE_GPS, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INCORRECT_VISUAL_GUIDANCE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INCORRECT_AUDIO_GUIDANCE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.POSITIONING_ISSUE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_GOOD, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_NOT_GOOD}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface FeedbackEvent.Type {
  }

}

package com.mapbox.navigation.core.trip.session {

  public fun interface BannerInstructionsObserver {
    method public void onNewBannerInstructions(com.mapbox.api.directions.v5.models.BannerInstructions bannerInstructions);
  }

  public interface LocationObserver {
    method public void onEnhancedLocationChanged(android.location.Location enhancedLocation, java.util.List<? extends android.location.Location> keyPoints);
    method public void onRawLocationChanged(android.location.Location rawLocation);
  }

  public final class MapMatcherResult {
    method public android.location.Location getEnhancedLocation();
    method public java.util.List<android.location.Location> getKeyPoints();
    method public float getOffRoadProbability();
    method public float getRoadEdgeMatchProbability();
    method public com.mapbox.navigation.base.speed.model.SpeedLimit? getSpeedLimit();
    method public boolean isOffRoad();
    method public boolean isTeleport();
    property public final android.location.Location enhancedLocation;
    property public final boolean isOffRoad;
    property public final boolean isTeleport;
    property public final java.util.List<android.location.Location> keyPoints;
    property public final float offRoadProbability;
    property public final float roadEdgeMatchProbability;
    property public final com.mapbox.navigation.base.speed.model.SpeedLimit? speedLimit;
  }

  public fun interface MapMatcherResultObserver {
    method public void onNewMapMatcherResult(com.mapbox.navigation.core.trip.session.MapMatcherResult mapMatcherResult);
  }

  public fun interface OffRouteObserver {
    method public void onOffRouteStateChanged(boolean offRoute);
  }

  public fun interface RoadObjectsOnRouteObserver {
    method public void onNewRoadObjectsOnTheRoute(java.util.List<com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject> roadObjects);
  }

  public fun interface RouteProgressObserver {
    method public void onRouteProgressChanged(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
  }

  public enum TripSessionState {
    enum_constant public static final com.mapbox.navigation.core.trip.session.TripSessionState STARTED;
    enum_constant public static final com.mapbox.navigation.core.trip.session.TripSessionState STOPPED;
  }

  public fun interface TripSessionStateObserver {
    method public void onSessionStateChanged(com.mapbox.navigation.core.trip.session.TripSessionState tripSessionState);
  }

  public fun interface VoiceInstructionsObserver {
    method public void onNewVoiceInstructions(com.mapbox.api.directions.v5.models.VoiceInstructions voiceInstructions);
  }

}

package com.mapbox.navigation.core.trip.session.eh {

  public interface EHorizonObserver {
    method public void onPositionUpdated(com.mapbox.navigation.base.trip.model.eh.EHorizonPosition position, java.util.List<? extends com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfo> distances);
    method public void onRoadObjectAdded(String roadObjectId);
    method public void onRoadObjectEnter(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectEnterExitInfo objectEnterExitInfo);
    method public void onRoadObjectExit(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectEnterExitInfo objectEnterExitInfo);
    method public void onRoadObjectPassed(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectPassInfo objectPassInfo);
    method public void onRoadObjectRemoved(String roadObjectId);
    method public void onRoadObjectUpdated(String roadObjectId);
  }

  public final class GraphAccessor {
    method public com.mapbox.navigation.base.trip.model.eh.EHorizonEdgeMetadata? getEdgeMetadata(long edgeId);
    method public java.util.List<com.mapbox.geojson.Point>? getEdgeShape(long edgeId);
    method public com.mapbox.geojson.Point? getGraphPositionCoordinate(com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPosition graphPosition);
    method public java.util.List<com.mapbox.geojson.Point>? getPathShape(com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPath graphPath);
  }

  public final class RoadObjectMatcher {
    method public void cancel(java.util.List<java.lang.String> roadObjectIds);
    method public void cancelAll();
    method public void matchGantryObject(String roadObjectId, java.util.List<com.mapbox.geojson.Point> gantry);
    method public void matchOpenLRObject(String roadObjectId, String openLRLocation, @com.mapbox.navigation.base.trip.model.eh.OpenLRStandard.Type String openLRStandard);
    method public void matchPointObject(String roadObjectId, com.mapbox.geojson.Point point);
    method public void matchPolygonObject(String roadObjectId, java.util.List<com.mapbox.geojson.Point> polygon);
    method public void matchPolylineObject(String roadObjectId, java.util.List<com.mapbox.geojson.Point> polyline);
    method public void registerRoadObjectMatcherObserver(com.mapbox.navigation.core.trip.session.eh.RoadObjectMatcherObserver roadObjectMatcherObserver);
  }

  public final class RoadObjectMatcherKt {
  }

  public fun interface RoadObjectMatcherObserver {
    method public void onRoadObjectMatched(com.mapbox.bindgen.Expected<com.mapbox.navigation.base.trip.model.roadobject.RoadObjectMatcherError,com.mapbox.navigation.base.trip.model.roadobject.RoadObject> result);
  }

  public final class RoadObjectsStore {
    method public void addCustomRoadObject(com.mapbox.navigation.base.trip.model.roadobject.RoadObject roadObject);
    method public com.mapbox.navigation.base.trip.model.roadobject.RoadObject? getRoadObject(String roadObjectId);
    method public java.util.List<java.lang.String> getRoadObjectIdsByEdgeIds(java.util.List<java.lang.Long> edgeIds);
    method public java.util.Map<java.lang.String,com.mapbox.navigation.base.trip.model.roadobject.RoadObjectEdgeLocation> getRoadObjectsOnTheEdge(long edgeId);
    method public java.util.List<com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject> getUpcomingRoadObjects(java.util.List<? extends com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfo> distances);
    method public void removeAllCustomRoadObjects();
    method public void removeCustomRoadObject(String roadObjectId);
  }

}

