// Signature format: 3.0
package com.mapbox.navigation.core {

  @UiThread public final class MapboxNavigation {
    ctor public MapboxNavigation(com.mapbox.navigation.base.options.NavigationOptions navigationOptions);
    method public void addHistoryEvent(String eventType, String eventJsonProperties);
    method public void attachFasterRouteObserver(com.mapbox.navigation.core.fasterroute.FasterRouteObserver fasterRouteObserver);
    method public void detachFasterRouteObserver();
    method public com.mapbox.navigation.core.trip.session.GraphAccessor getGraphAccessor();
    method public com.mapbox.navigation.base.options.NavigationOptions getNavigationOptions();
    method public com.mapbox.navigation.core.reroute.RerouteController? getRerouteController();
    method public com.mapbox.navigation.core.trip.session.RoadObjectsStore getRoadObjectsStore();
    method public java.util.List<com.mapbox.api.directions.v5.models.DirectionsRoute> getRoutes();
    method public com.mapbox.navigation.core.trip.session.TripSessionState getTripSessionState();
    method public boolean navigateNextRouteLeg();
    method public void onDestroy();
    method public void postUserFeedback(@com.mapbox.navigation.core.telemetry.events.FeedbackEvent.Type String feedbackType, String description, @com.mapbox.navigation.core.telemetry.events.FeedbackEvent.Source String feedbackSource, String? screenshot, String![]? feedbackSubType = emptyArray(), com.mapbox.navigation.core.telemetry.events.AppMetadata? appMetadata = null);
    method public void registerArrivalObserver(com.mapbox.navigation.core.arrival.ArrivalObserver arrivalObserver);
    method public void registerBannerInstructionsObserver(com.mapbox.navigation.core.trip.session.BannerInstructionsObserver bannerInstructionsObserver);
    method public void registerEHorizonObserver(com.mapbox.navigation.core.trip.session.EHorizonObserver eHorizonObserver);
    method public void registerLocationObserver(com.mapbox.navigation.core.trip.session.LocationObserver locationObserver);
    method public void registerMapMatcherResultObserver(com.mapbox.navigation.core.trip.session.MapMatcherResultObserver mapMatcherResultObserver);
    method public void registerOffRouteObserver(com.mapbox.navigation.core.trip.session.OffRouteObserver offRouteObserver);
    method public void registerRoadObjectsObserver(com.mapbox.navigation.core.trip.session.RoadObjectsObserver roadObjectsObserver);
    method public void registerRouteProgressObserver(com.mapbox.navigation.core.trip.session.RouteProgressObserver routeProgressObserver);
    method public void registerRoutesObserver(com.mapbox.navigation.core.directions.session.RoutesObserver routesObserver);
    method public void registerTripSessionStateObserver(com.mapbox.navigation.core.trip.session.TripSessionStateObserver tripSessionStateObserver);
    method public void registerVoiceInstructionsObserver(com.mapbox.navigation.core.trip.session.VoiceInstructionsObserver voiceInstructionsObserver);
    method public void requestRoutes(com.mapbox.api.directions.v5.models.RouteOptions routeOptions, com.mapbox.navigation.core.directions.session.RoutesRequestCallback? routesRequestCallback = null);
    method public void requestRoutes(com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
    method public void resetTripSession();
    method public String retrieveHistory();
    method public String? retrieveSsmlAnnouncementInstruction(int index);
    method public void setArrivalController(com.mapbox.navigation.core.arrival.ArrivalController? arrivalController = com.mapbox.navigation.core.arrival.AutoArrivalController());
    method public void setArrivalController();
    method public void setRerouteController(com.mapbox.navigation.core.reroute.RerouteController? rerouteController = com.mapbox.navigation.core.MapboxNavigation.defaultRerouteController);
    method public void setRerouteController();
    method public void setRoutes(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
    method @RequiresPermission(anyOf={android.Manifest.permission.ACCESS_COARSE_LOCATION, android.Manifest.permission.ACCESS_FINE_LOCATION}) public void startTripSession();
    method public void stopTripSession();
    method public void toggleHistory(boolean isEnabled);
    method public void unregisterArrivalObserver(com.mapbox.navigation.core.arrival.ArrivalObserver arrivalObserver);
    method public void unregisterBannerInstructionsObserver(com.mapbox.navigation.core.trip.session.BannerInstructionsObserver bannerInstructionsObserver);
    method public void unregisterEHorizonObserver(com.mapbox.navigation.core.trip.session.EHorizonObserver eHorizonObserver);
    method public void unregisterLocationObserver(com.mapbox.navigation.core.trip.session.LocationObserver locationObserver);
    method public void unregisterMapMatcherResultObserver(com.mapbox.navigation.core.trip.session.MapMatcherResultObserver mapMatcherResultObserver);
    method public void unregisterOffRouteObserver(com.mapbox.navigation.core.trip.session.OffRouteObserver offRouteObserver);
    method public void unregisterRoadObjectsObserver(com.mapbox.navigation.core.trip.session.RoadObjectsObserver roadObjectsObserver);
    method public void unregisterRouteProgressObserver(com.mapbox.navigation.core.trip.session.RouteProgressObserver routeProgressObserver);
    method public void unregisterRoutesObserver(com.mapbox.navigation.core.directions.session.RoutesObserver routesObserver);
    method public void unregisterTripSessionStateObserver(com.mapbox.navigation.core.trip.session.TripSessionStateObserver tripSessionStateObserver);
    method public void unregisterVoiceInstructionsObserver(com.mapbox.navigation.core.trip.session.VoiceInstructionsObserver voiceInstructionsObserver);
    method public void updateSensorEvent(android.hardware.SensorEvent sensorEvent);
    property public final com.mapbox.navigation.core.trip.session.GraphAccessor graphAccessor;
    property public final com.mapbox.navigation.base.options.NavigationOptions navigationOptions;
    property public final com.mapbox.navigation.core.trip.session.RoadObjectsStore roadObjectsStore;
    field public static final com.mapbox.navigation.core.MapboxNavigation.Companion Companion;
  }

  public static final class MapboxNavigation.Companion {
  }

  public final class MapboxNavigationKt {
  }

  @UiThread public final class MapboxNavigationProvider {
    method public static com.mapbox.navigation.core.MapboxNavigation create(com.mapbox.navigation.base.options.NavigationOptions navigationOptions);
    method public static void destroy();
    method public static boolean isCreated();
    method public static com.mapbox.navigation.core.MapboxNavigation retrieve();
    field public static final com.mapbox.navigation.core.MapboxNavigationProvider INSTANCE;
  }

}

package com.mapbox.navigation.core.arrival {

  public interface ArrivalController {
    method public com.mapbox.navigation.core.arrival.ArrivalOptions arrivalOptions();
    method public boolean navigateNextRouteLeg(com.mapbox.navigation.base.trip.model.RouteLegProgress routeLegProgress);
  }

  public interface ArrivalObserver {
    method public void onFinalDestinationArrival(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public void onNextRouteLegStart(com.mapbox.navigation.base.trip.model.RouteLegProgress routeLegProgress);
  }

  public final class ArrivalOptions {
    method public Double? getArrivalInMeters();
    method public Double? getArrivalInSeconds();
    method public com.mapbox.navigation.core.arrival.ArrivalOptions.Builder toBuilder();
    property public final Double? arrivalInMeters;
    property public final Double? arrivalInSeconds;
  }

  public static final class ArrivalOptions.Builder {
    ctor public ArrivalOptions.Builder();
    method public com.mapbox.navigation.core.arrival.ArrivalOptions.Builder arrivalInMeters(Double? arriveInMeters);
    method public com.mapbox.navigation.core.arrival.ArrivalOptions.Builder arrivalInSeconds(Double? arriveInSeconds);
    method public com.mapbox.navigation.core.arrival.ArrivalOptions build();
  }

  public final class AutoArrivalController implements com.mapbox.navigation.core.arrival.ArrivalController {
    ctor public AutoArrivalController();
    method public com.mapbox.navigation.core.arrival.ArrivalOptions arrivalOptions();
    method public boolean navigateNextRouteLeg(com.mapbox.navigation.base.trip.model.RouteLegProgress routeLegProgress);
  }

}

package com.mapbox.navigation.core.directions.session {

  public interface RoutesObserver {
    method public void onRoutesChanged(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
  }

  public interface RoutesRequestCallback {
    method public void onRoutesReady(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
    method public void onRoutesRequestCanceled(com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
    method public void onRoutesRequestFailure(Throwable throwable, com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
  }

}

package com.mapbox.navigation.core.fasterroute {

  public interface FasterRouteObserver {
    method public void onFasterRoute(com.mapbox.api.directions.v5.models.DirectionsRoute currentRoute, java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> alternatives, boolean isAlternativeFaster);
    method public default long restartAfterMillis();
    field public static final com.mapbox.navigation.core.fasterroute.FasterRouteObserver.Companion Companion;
  }

  public static final class FasterRouteObserver.Companion {
    method public long getDEFAULT_INTERVAL_MILLIS();
    property public final long DEFAULT_INTERVAL_MILLIS;
  }

}

package com.mapbox.navigation.core.navigator {

  public final class LocationEx {
  }

  public final class NavigatorMapper {
  }

}

package com.mapbox.navigation.core.replay {

  public final class MapboxReplayer {
    ctor public MapboxReplayer();
    method public void clearEvents();
    method public double durationSeconds();
    method public double eventSeconds(double eventTimestamp);
    method public void finish();
    method public void play();
    method public void playFirstLocation();
    method public void playbackSpeed(double scale);
    method public com.mapbox.navigation.core.replay.MapboxReplayer pushEvents(java.util.List<? extends com.mapbox.navigation.core.replay.history.ReplayEventBase> events);
    method public void pushRealLocation(android.content.Context context, double eventTimestamp);
    method public void registerObserver(com.mapbox.navigation.core.replay.history.ReplayEventsObserver observer);
    method public void seekTo(double replayTime);
    method public void seekTo(com.mapbox.navigation.core.replay.history.ReplayEventBase replayEvent);
    method public void stop();
    method public void unregisterObserver(com.mapbox.navigation.core.replay.history.ReplayEventsObserver observer);
    method public void unregisterObservers();
  }

  public final class ReplayLocationEngine implements com.mapbox.android.core.location.LocationEngine com.mapbox.navigation.core.replay.history.ReplayEventsObserver {
    ctor public ReplayLocationEngine(com.mapbox.navigation.core.replay.MapboxReplayer mapboxReplayer);
    method public void getLastLocation(com.mapbox.android.core.location.LocationEngineCallback<com.mapbox.android.core.location.LocationEngineResult> callback);
    method public void removeLocationUpdates(com.mapbox.android.core.location.LocationEngineCallback<com.mapbox.android.core.location.LocationEngineResult> callback);
    method public void removeLocationUpdates(android.app.PendingIntent? pendingIntent);
    method public void replayEvents(java.util.List<? extends com.mapbox.navigation.core.replay.history.ReplayEventBase> replayEvents);
    method public void requestLocationUpdates(com.mapbox.android.core.location.LocationEngineRequest request, com.mapbox.android.core.location.LocationEngineCallback<com.mapbox.android.core.location.LocationEngineResult> callback, android.os.Looper? looper);
    method public void requestLocationUpdates(com.mapbox.android.core.location.LocationEngineRequest request, android.app.PendingIntent? pendingIntent);
  }

  public final class ReplayLocationEngineKt {
  }

}

package com.mapbox.navigation.core.replay.history {

  public interface CustomEventMapper {
    method public com.mapbox.navigation.core.replay.history.ReplayEventBase? map(String eventType, java.util.Map<?,?> properties);
  }

  public interface ReplayEventBase {
    method public double getEventTimestamp();
    property public abstract double eventTimestamp;
  }

  public final class ReplayEventGetStatus implements com.mapbox.navigation.core.replay.history.ReplayEventBase {
    ctor public ReplayEventGetStatus(@com.google.gson.annotations.SerializedName("event_timestamp") double eventTimestamp);
    method public double component1();
    method public com.mapbox.navigation.core.replay.history.ReplayEventGetStatus copy(double eventTimestamp);
    method public double getEventTimestamp();
    property public double eventTimestamp;
  }

  public final class ReplayEventLocation {
    ctor public ReplayEventLocation(@com.google.gson.annotations.SerializedName("lon") double lon, @com.google.gson.annotations.SerializedName("lat") double lat, @com.google.gson.annotations.SerializedName("provider") String? provider, @com.google.gson.annotations.SerializedName("time") Double? time, @com.google.gson.annotations.SerializedName("altitude") Double? altitude, @com.google.gson.annotations.SerializedName("accuracyHorizontal") Double? accuracyHorizontal, @com.google.gson.annotations.SerializedName("bearing") Double? bearing, @com.google.gson.annotations.SerializedName("speed") Double? speed);
    method public double component1();
    method public double component2();
    method public String? component3();
    method public Double? component4();
    method public Double? component5();
    method public Double? component6();
    method public Double? component7();
    method public Double? component8();
    method public com.mapbox.navigation.core.replay.history.ReplayEventLocation copy(double lon, double lat, String? provider, Double? time, Double? altitude, Double? accuracyHorizontal, Double? bearing, Double? speed);
    method public Double? getAccuracyHorizontal();
    method public Double? getAltitude();
    method public Double? getBearing();
    method public double getLat();
    method public double getLon();
    method public String? getProvider();
    method public Double? getSpeed();
    method public Double? getTime();
    property public final Double? accuracyHorizontal;
    property public final Double? altitude;
    property public final Double? bearing;
    property public final double lat;
    property public final double lon;
    property public final String? provider;
    property public final Double? speed;
    property public final Double? time;
  }

  public final class ReplayEventUpdateLocation implements com.mapbox.navigation.core.replay.history.ReplayEventBase {
    ctor public ReplayEventUpdateLocation(@com.google.gson.annotations.SerializedName("event_timestamp") double eventTimestamp, @com.google.gson.annotations.SerializedName("location") com.mapbox.navigation.core.replay.history.ReplayEventLocation location);
    method public double component1();
    method public com.mapbox.navigation.core.replay.history.ReplayEventLocation component2();
    method public com.mapbox.navigation.core.replay.history.ReplayEventUpdateLocation copy(double eventTimestamp, com.mapbox.navigation.core.replay.history.ReplayEventLocation location);
    method public double getEventTimestamp();
    method public com.mapbox.navigation.core.replay.history.ReplayEventLocation getLocation();
    property public double eventTimestamp;
    property public final com.mapbox.navigation.core.replay.history.ReplayEventLocation location;
  }

  public final class ReplayEvents {
    ctor public ReplayEvents(java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> events);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> component1();
    method public com.mapbox.navigation.core.replay.history.ReplayEvents copy(java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> events);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> getEvents();
    property public final java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> events;
  }

  public interface ReplayEventsObserver {
    method public void replayEvents(java.util.List<? extends com.mapbox.navigation.core.replay.history.ReplayEventBase> events);
  }

  public final class ReplayHistoryDTO {
    ctor public ReplayHistoryDTO(@com.google.gson.annotations.SerializedName("history_version") String historyVersion, @com.google.gson.annotations.SerializedName("version") String version, @com.google.gson.annotations.SerializedName("events") java.util.List<?> events);
    method public String component1();
    method public String component2();
    method public java.util.List<java.lang.Object> component3();
    method public com.mapbox.navigation.core.replay.history.ReplayHistoryDTO copy(String historyVersion, String version, java.util.List<?> events);
    method public java.util.List<java.lang.Object> getEvents();
    method public String getHistoryVersion();
    method public String getVersion();
    property public final java.util.List<java.lang.Object> events;
    property public final String historyVersion;
    property public final String version;
  }

  public final class ReplayHistoryMapper {
    ctor public ReplayHistoryMapper(com.mapbox.navigation.core.replay.history.CustomEventMapper? customEventMapper = null, com.mapbox.base.common.logger.Logger? logger = null);
    ctor public ReplayHistoryMapper(com.mapbox.navigation.core.replay.history.CustomEventMapper? customEventMapper = null);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapToReplayEvents(String historyData);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapToReplayEvents(com.mapbox.navigation.core.replay.history.ReplayHistoryDTO historyDTO);
  }

  public final class ReplaySetRoute implements com.mapbox.navigation.core.replay.history.ReplayEventBase {
    ctor public ReplaySetRoute(@com.google.gson.annotations.SerializedName("event_timestamp") double eventTimestamp, @com.google.gson.annotations.SerializedName("route") com.mapbox.api.directions.v5.models.DirectionsRoute? route);
    method public double component1();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute? component2();
    method public com.mapbox.navigation.core.replay.history.ReplaySetRoute copy(double eventTimestamp, com.mapbox.api.directions.v5.models.DirectionsRoute? route);
    method public double getEventTimestamp();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute? getRoute();
    property public double eventTimestamp;
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute? route;
  }

}

package com.mapbox.navigation.core.replay.route {

  public final class ReplayProgressObserver implements com.mapbox.navigation.core.trip.session.RouteProgressObserver {
    ctor public ReplayProgressObserver(com.mapbox.navigation.core.replay.MapboxReplayer mapboxReplayer);
    method public void onRouteProgressChanged(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public com.mapbox.navigation.core.replay.route.ReplayProgressObserver updateOptions(com.mapbox.navigation.core.replay.route.ReplayRouteOptions options);
  }

  public final class ReplayRouteMapper {
    ctor public ReplayRouteMapper(com.mapbox.navigation.core.replay.route.ReplayRouteOptions options = ReplayRouteOptions.<init>().build());
    ctor public ReplayRouteMapper(com.mapbox.navigation.core.replay.route.ReplayRouteOptions options = ReplayRouteOptions.<init>().build(), com.mapbox.base.common.logger.Logger logger);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions getOptions();
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapDirectionsRouteGeometry(com.mapbox.api.directions.v5.models.DirectionsRoute directionsRoute);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapDirectionsRouteLegAnnotation(com.mapbox.api.directions.v5.models.DirectionsRoute directionsRoute);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapGeometry(String geometry);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapRouteLegAnnotation(com.mapbox.api.directions.v5.models.RouteLeg routeLeg);
    method public java.util.List<com.mapbox.navigation.core.replay.history.ReplayEventBase> mapRouteLegGeometry(com.mapbox.api.directions.v5.models.RouteLeg routeLeg);
    method public static com.mapbox.navigation.core.replay.history.ReplayEventUpdateLocation mapToUpdateLocation(double eventTimestamp, com.mapbox.geojson.Point point);
    method public static com.mapbox.navigation.core.replay.history.ReplayEventBase mapToUpdateLocation(double eventTimestamp, android.location.Location location);
    method public void setOptions(com.mapbox.navigation.core.replay.route.ReplayRouteOptions p);
    property public final com.mapbox.navigation.core.replay.route.ReplayRouteOptions options;
    field public static final com.mapbox.navigation.core.replay.route.ReplayRouteMapper.Companion Companion;
  }

  public static final class ReplayRouteMapper.Companion {
    method public com.mapbox.navigation.core.replay.history.ReplayEventUpdateLocation mapToUpdateLocation(double eventTimestamp, com.mapbox.geojson.Point point);
    method public com.mapbox.navigation.core.replay.history.ReplayEventBase mapToUpdateLocation(double eventTimestamp, android.location.Location location);
  }

  public final class ReplayRouteOptions {
    method public double getMaxAcceleration();
    method public double getMaxSpeedMps();
    method public double getMinAcceleration();
    method public double getTurnSpeedMps();
    method public double getUTurnSpeedMps();
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder toBuilder();
    property public final double maxAcceleration;
    property public final double maxSpeedMps;
    property public final double minAcceleration;
    property public final double turnSpeedMps;
    property public final double uTurnSpeedMps;
  }

  public static final class ReplayRouteOptions.Builder {
    ctor public ReplayRouteOptions.Builder();
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions build();
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder maxAcceleration(double maxAcceleration);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder maxSpeedMps(double maxSpeedMps);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder minAcceleration(double minAcceleration);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder turnSpeedMps(double minSpeedMps);
    method public com.mapbox.navigation.core.replay.route.ReplayRouteOptions.Builder uTurnSpeedMps(double uTurnSpeedMps);
  }

}

package com.mapbox.navigation.core.reroute {

  public interface RerouteController {
    method public com.mapbox.navigation.core.reroute.RerouteState getState();
    method public void interrupt();
    method public boolean registerRerouteStateObserver(com.mapbox.navigation.core.reroute.RerouteController.RerouteStateObserver rerouteStateObserver);
    method public void reroute(com.mapbox.navigation.core.reroute.RerouteController.RoutesCallback routesCallback);
    method public boolean unregisterRerouteStateObserver(com.mapbox.navigation.core.reroute.RerouteController.RerouteStateObserver rerouteStateObserver);
    property public abstract com.mapbox.navigation.core.reroute.RerouteState state;
  }

  public static interface RerouteController.RerouteStateObserver {
    method public void onRerouteStateChanged(com.mapbox.navigation.core.reroute.RerouteState rerouteState);
  }

  public static interface RerouteController.RoutesCallback {
    method public void onNewRoutes(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
  }

  public abstract sealed class RerouteState {
  }

  public static final class RerouteState.Failed extends com.mapbox.navigation.core.reroute.RerouteState {
    ctor public RerouteState.Failed(String message, Throwable? throwable = null);
    method public String component1();
    method public Throwable? component2();
    method public com.mapbox.navigation.core.reroute.RerouteState.Failed copy(String message, Throwable? throwable);
    method public String getMessage();
    method public Throwable? getThrowable();
    property public final String message;
    property public final Throwable? throwable;
  }

  public static final class RerouteState.FetchingRoute extends com.mapbox.navigation.core.reroute.RerouteState {
    field public static final com.mapbox.navigation.core.reroute.RerouteState.FetchingRoute INSTANCE;
  }

  public static final class RerouteState.Idle extends com.mapbox.navigation.core.reroute.RerouteState {
    field public static final com.mapbox.navigation.core.reroute.RerouteState.Idle INSTANCE;
  }

  public static final class RerouteState.Interrupted extends com.mapbox.navigation.core.reroute.RerouteState {
    field public static final com.mapbox.navigation.core.reroute.RerouteState.Interrupted INSTANCE;
  }

  public static final class RerouteState.RouteFetched extends com.mapbox.navigation.core.reroute.RerouteState {
    field public static final com.mapbox.navigation.core.reroute.RerouteState.RouteFetched INSTANCE;
  }

}

package com.mapbox.navigation.core.routeoptions {

  public final class MapboxRouteOptionsUpdater implements com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater {
    ctor public MapboxRouteOptionsUpdater(com.mapbox.base.common.logger.Logger? logger = null);
    method public com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult update(com.mapbox.api.directions.v5.models.RouteOptions? routeOptions, com.mapbox.navigation.base.trip.model.RouteProgress? routeProgress, android.location.Location? location);
  }

  public final class MapboxRouteOptionsUpdaterKt {
  }

  public interface RouteOptionsUpdater {
    method public com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult update(com.mapbox.api.directions.v5.models.RouteOptions? routeOptions, com.mapbox.navigation.base.trip.model.RouteProgress? routeProgress, android.location.Location? location);
  }

  public abstract static sealed class RouteOptionsUpdater.RouteOptionsResult {
  }

  public static final class RouteOptionsUpdater.RouteOptionsResult.Error extends com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult {
    ctor public RouteOptionsUpdater.RouteOptionsResult.Error(Throwable error);
    method public Throwable component1();
    method public com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult.Error copy(Throwable error);
    method public Throwable getError();
    property public final Throwable error;
  }

  public static final class RouteOptionsUpdater.RouteOptionsResult.Success extends com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult {
    ctor public RouteOptionsUpdater.RouteOptionsResult.Success(com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
    method public com.mapbox.api.directions.v5.models.RouteOptions component1();
    method public com.mapbox.navigation.core.routeoptions.RouteOptionsUpdater.RouteOptionsResult.Success copy(com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
    method public com.mapbox.api.directions.v5.models.RouteOptions getRouteOptions();
    property public final com.mapbox.api.directions.v5.models.RouteOptions routeOptions;
  }

}

package com.mapbox.navigation.core.sensors {

  public final class SensorEventEmitter implements android.hardware.SensorEventListener {
    ctor public SensorEventEmitter(android.hardware.SensorManager sensorManager);
    method public void onAccuracyChanged(android.hardware.Sensor? sensor, int accuracy);
    method public void onSensorChanged(android.hardware.SensorEvent event);
    method public void start(com.mapbox.navigation.core.sensors.SensorOptions sensorOptions, kotlin.jvm.functions.Function1<? super android.hardware.SensorEvent,kotlin.Unit> eventEmitter);
    method public void stop();
  }

  public final class SensorOptions {
    method public java.util.Set<java.lang.Integer> getEnableSensorTypes();
    method public int getSignalsPerSecond();
    method public com.mapbox.navigation.core.sensors.SensorOptions.Builder toBuilder();
    property public final java.util.Set<java.lang.Integer> enableSensorTypes;
    property public final int signalsPerSecond;
  }

  public static final class SensorOptions.Builder {
    ctor public SensorOptions.Builder();
    method public com.mapbox.navigation.core.sensors.SensorOptions build();
    method public com.mapbox.navigation.core.sensors.SensorOptions.Builder enableSensorTypes(java.util.Set<java.lang.Integer> sensorTypes);
    method public com.mapbox.navigation.core.sensors.SensorOptions.Builder signalsPerSecond(int signalsPerSecond);
  }

}

package com.mapbox.navigation.core.telemetry {

  public final class TelemetryUtilsKt {
  }

}

package com.mapbox.navigation.core.telemetry.events {

  public final class AppMetadata {
    method public String getName();
    method public String? getSessionId();
    method public String? getUserId();
    method public String getVersion();
    method public com.mapbox.navigation.core.telemetry.events.AppMetadata.Builder toBuilder();
    property public final String name;
    property public final String? sessionId;
    property public final String? userId;
    property public final String version;
  }

  public static final class AppMetadata.Builder {
    ctor public AppMetadata.Builder(String name, String version);
    method public com.mapbox.navigation.core.telemetry.events.AppMetadata build();
    method public com.mapbox.navigation.core.telemetry.events.AppMetadata.Builder sessionId(String? sessionId);
    method public com.mapbox.navigation.core.telemetry.events.AppMetadata.Builder userId(String? userId);
  }

  public final class FeedbackEvent {
    field public static final String ACCIDENT = "accident";
    field public static final String ALTERNATIVE_ROUTE_NOT_EXPECTED = "alternative_route_not_expected";
    field public static final String ARRIVAL_FEEDBACK_CONFUSING_INSTRUCTIONS = "arrival_feedback_confusing_instructions";
    field public static final String ARRIVAL_FEEDBACK_GOOD = "arrival_feedback_good";
    field public static final String ARRIVAL_FEEDBACK_NOT_GOOD = "arrival_feedback_not_good";
    field public static final String ARRIVAL_FEEDBACK_THIS_PLACE_IS_CLOSED = "arrival_feedback_this_place_is_closed";
    field public static final String ARRIVAL_FEEDBACK_WRONG_ENTRANCE = "arrival_feedback_wrong_entrance";
    field public static final String ARRIVAL_FEEDBACK_WRONG_LOCATION = "arrival_feedback_wrong_location";
    field public static final String CARS_NOT_ALLOWED_ON_STREET = "cars_not_allowed_on_street";
    field public static final String CONFUSING_INSTRUCTION = "confusing_instruction";
    field public static final String EXIT_INFO_INCORRECT = "exit_info_incorrect";
    field public static final String GENERAL_ISSUE = "general";
    field public static final String GUIDANCE_TOO_EARLY = "guidance_too_early";
    field public static final String GUIDANCE_TOO_LATE = "guidance_too_late";
    field public static final String HAZARD = "hazard";
    field public static final String INACCURATE_GPS = "inaccurate_gps";
    field public static final String INCORRECT_AUDIO_GUIDANCE = "incorrect_audio_guidance";
    field public static final String INCORRECT_VISUAL_GUIDANCE = "incorrect_visual_guidance";
    field public static final com.mapbox.navigation.core.telemetry.events.FeedbackEvent INSTANCE;
    field public static final String INSTRUCTION_MISSING = "instruction_missing";
    field public static final String INSTRUCTION_UNNECESSARY = "instruction_unnecessary";
    field public static final String LANE_GUIDANCE_INCORRECT = "lane_guidance_incorrect";
    field public static final String MANEUVER_INCORRECT = "maneuver_incorrect";
    field public static final String MISSING_EXIT = "missing_exit";
    field public static final String MISSING_ROAD = "missing_road";
    field public static final String NOT_ALLOWED = "not_allowed";
    field public static final String POSITIONING_ISSUE = "positioning_issue";
    field public static final String PRONUNCIATION_INCORRECT = "pronunciation_incorrect";
    field public static final String REROUTE = "reroute";
    field public static final String ROAD_CLOSED = "road_closed";
    field public static final String ROAD_IS_MISSING_FROM_MAP = "road_is_missing_from_map";
    field public static final String ROAD_KNOW_BY_DIFFERENT_NAME = "road_know_by_different_name";
    field public static final String ROAD_NAME_REPEATED = "road_name_repeated";
    field public static final String ROUTED_DOWN_A_ONE_WAY = "routed_down_a_one_way";
    field public static final String ROUTE_HAD_ROADS_TOO_NARROW_TO_PASS = "route_had_roads_too_narrow_to_pass";
    field public static final String ROUTE_INCLUDED_MISSING_ROADS = "route_included_missing_roads";
    field public static final String ROUTE_NOT_DRIVE_ABLE = "route_not_drive_able";
    field public static final String ROUTE_NOT_PREFERRED = "route_not_preferred";
    field public static final String ROUTING_ERROR = "routing_error";
    field public static final String STREET_NAME_INCORRECT = "street_name_incorrect";
    field public static final String STREET_PERMANENTLY_BLOCKED_OFF = "street_permanently_blocked_off";
    field public static final String TURN_AT_INTERSECTION_WAS_UNPROTECTED = "turn_at_intersection_was_unprotected";
    field public static final String TURN_ICON_INCORRECT = "turn_icon_incorrect";
    field public static final String TURN_WAS_NOT_ALLOWED = "turn_was_not_allowed";
    field public static final String UI = "user";
  }

  @StringDef({com.mapbox.navigation.core.telemetry.events.FeedbackEvent.TURN_ICON_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.STREET_NAME_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INSTRUCTION_UNNECESSARY, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INSTRUCTION_MISSING, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.MANEUVER_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.EXIT_INFO_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.LANE_GUIDANCE_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROAD_KNOW_BY_DIFFERENT_NAME, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.GUIDANCE_TOO_EARLY, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.GUIDANCE_TOO_LATE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.PRONUNCIATION_INCORRECT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROAD_NAME_REPEATED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTE_NOT_DRIVE_ABLE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTE_NOT_PREFERRED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ALTERNATIVE_ROUTE_NOT_EXPECTED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTE_INCLUDED_MISSING_ROADS, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTE_HAD_ROADS_TOO_NARROW_TO_PASS, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTED_DOWN_A_ONE_WAY, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.TURN_WAS_NOT_ALLOWED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.CARS_NOT_ALLOWED_ON_STREET, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.TURN_AT_INTERSECTION_WAS_UNPROTECTED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.STREET_PERMANENTLY_BLOCKED_OFF, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROAD_IS_MISSING_FROM_MAP, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_WRONG_LOCATION, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_WRONG_ENTRANCE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_CONFUSING_INSTRUCTIONS, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_THIS_PLACE_IS_CLOSED}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface FeedbackEvent.Description {
  }

  @StringDef({com.mapbox.navigation.core.telemetry.events.FeedbackEvent.REROUTE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.UI}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface FeedbackEvent.Source {
  }

  @StringDef({com.mapbox.navigation.core.telemetry.events.FeedbackEvent.GENERAL_ISSUE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ACCIDENT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.HAZARD, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROAD_CLOSED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.NOT_ALLOWED, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ROUTING_ERROR, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.MISSING_ROAD, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.MISSING_EXIT, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.CONFUSING_INSTRUCTION, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INACCURATE_GPS, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INCORRECT_VISUAL_GUIDANCE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.INCORRECT_AUDIO_GUIDANCE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.POSITIONING_ISSUE, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_GOOD, com.mapbox.navigation.core.telemetry.events.FeedbackEvent.ARRIVAL_FEEDBACK_NOT_GOOD}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface FeedbackEvent.Type {
  }

}

package com.mapbox.navigation.core.trip.model.eh {

  public final class EHorizon {
    method public com.mapbox.navigation.core.trip.model.eh.EHorizonEdge current(com.mapbox.navigation.core.trip.model.eh.EHorizonPosition position);
    method public com.mapbox.navigation.core.trip.model.eh.EHorizonEdge getStart();
    method public java.util.List<java.util.List<com.mapbox.navigation.core.trip.model.eh.EHorizonEdge>> mpp();
    method public java.util.List<java.util.List<com.mapbox.navigation.core.trip.model.eh.EHorizonEdge>> mpp(com.mapbox.navigation.core.trip.model.eh.EHorizonPosition position);
    property public final com.mapbox.navigation.core.trip.model.eh.EHorizonEdge start;
  }

  public final class EHorizonEdge {
    method public long getId();
    method public byte getLevel();
    method public java.util.List<com.mapbox.navigation.core.trip.model.eh.EHorizonEdge> getOut();
    method public double getProbability();
    method public boolean isMpp();
    property public final long id;
    property public final byte level;
    property public final java.util.List<com.mapbox.navigation.core.trip.model.eh.EHorizonEdge> out;
    property public final double probability;
  }

  public final class EHorizonEdgeMetadata {
    method public boolean getBridge();
    method public String? getCountryCodeIso2();
    method public String? getCountryCodeIso3();
    method public byte getCurvature();
    method public String getFunctionRoadClass();
    method public double getHeading();
    method public Byte? getLaneCount();
    method public double getLength();
    method public Double? getMeanElevation();
    method public boolean getMotorway();
    method public java.util.List<com.mapbox.navigation.core.trip.model.eh.RoadName> getNames();
    method public boolean getRamp();
    method public double getSpeed();
    method public Double? getSpeedLimit();
    method public String? getStateCode();
    method public boolean getToll();
    method public boolean getTunnel();
    method public boolean isRightHandTraffic();
    property public final boolean bridge;
    property public final String? countryCodeIso2;
    property public final String? countryCodeIso3;
    property public final byte curvature;
    property public final String functionRoadClass;
    property public final double heading;
    property public final boolean isRightHandTraffic;
    property public final Byte? laneCount;
    property public final double length;
    property public final Double? meanElevation;
    property public final boolean motorway;
    property public final java.util.List<com.mapbox.navigation.core.trip.model.eh.RoadName> names;
    property public final boolean ramp;
    property public final double speed;
    property public final Double? speedLimit;
    property public final String? stateCode;
    property public final boolean toll;
    property public final boolean tunnel;
  }

  public final class EHorizonGraphPath {
    method public java.util.List<java.lang.Long> getEdges();
    method public double getLength();
    method public double getPercentAlongBegin();
    method public double getPercentAlongEnd();
    property public final java.util.List<java.lang.Long> edges;
    property public final double length;
    property public final double percentAlongBegin;
    property public final double percentAlongEnd;
  }

  public final class EHorizonGraphPosition {
    method public long getEdgeId();
    method public double getPercentAlong();
    property public final long edgeId;
    property public final double percentAlong;
  }

  public final class EHorizonMapper {
  }

  public final class EHorizonObjectDistanceInfo {
    method public double getDistanceToEnd();
    method public double getDistanceToEntry();
    method public boolean getEntryFromStart();
    method public Double? getLength();
    method public int getType();
    property public final double distanceToEnd;
    property public final double distanceToEntry;
    property public final boolean entryFromStart;
    property public final Double? length;
    property public final int type;
  }

  public final class EHorizonObjectEdgeLocation {
    method public double getPercentAlongBegin();
    method public double getPercentAlongEnd();
    property public final double percentAlongBegin;
    property public final double percentAlongEnd;
  }

  public final class EHorizonObjectEnterExitInfo {
    method public boolean getEnterFromStartOrExitFromEnd();
    method public String getRoadObjectId();
    method public int getType();
    property public final boolean enterFromStartOrExitFromEnd;
    property public final String roadObjectId;
    property public final int type;
  }

  public final class EHorizonObjectLocation {
    method public com.mapbox.navigation.core.trip.model.eh.EHorizonGraphPath? getPath();
    method public com.mapbox.navigation.core.trip.model.eh.EHorizonGraphPosition? getPosition();
    property public final com.mapbox.navigation.core.trip.model.eh.EHorizonGraphPath? path;
    property public final com.mapbox.navigation.core.trip.model.eh.EHorizonGraphPosition? position;
  }

  public final class EHorizonObjectMetadata {
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingInfo? getBorderCrossingInfo();
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo? getIncidentInfo();
    method public String getObjectProvider();
    method public Integer? getRestStopType();
    method public Integer? getTollCollectionType();
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? getTunnelInfo();
    method public int getType();
    property public final com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingInfo? borderCrossingInfo;
    property public final com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo? incidentInfo;
    property public final String objectProvider;
    property public final Integer? restStopType;
    property public final Integer? tollCollectionType;
    property public final com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? tunnelInfo;
    property public final int type;
  }

  public final class EHorizonObjectProvider {
    field public static final String CUSTOM = "CUSTOM";
    field public static final com.mapbox.navigation.core.trip.model.eh.EHorizonObjectProvider INSTANCE;
    field public static final String MAPBOX = "MAPBOX";
  }

  @StringDef({com.mapbox.navigation.core.trip.model.eh.EHorizonObjectProvider.MAPBOX, com.mapbox.navigation.core.trip.model.eh.EHorizonObjectProvider.CUSTOM}) @kotlin.annotation.Retention public static @interface EHorizonObjectProvider.Type {
  }

  public final class EHorizonPosition {
    method public com.mapbox.navigation.core.trip.model.eh.EHorizon getEHorizon();
    method public com.mapbox.navigation.core.trip.model.eh.EHorizonGraphPosition getEHorizonGraphPosition();
    method public String getEHorizonResultType();
    property public final com.mapbox.navigation.core.trip.model.eh.EHorizon eHorizon;
    property public final com.mapbox.navigation.core.trip.model.eh.EHorizonGraphPosition eHorizonGraphPosition;
    property public final String eHorizonResultType;
  }

  public final class EHorizonResultType {
    field public static final String INITIAL = "INITIAL";
    field public static final com.mapbox.navigation.core.trip.model.eh.EHorizonResultType INSTANCE;
    field public static final String UPDATE = "UPDATE";
  }

  @StringDef({com.mapbox.navigation.core.trip.model.eh.EHorizonResultType.INITIAL, com.mapbox.navigation.core.trip.model.eh.EHorizonResultType.UPDATE}) @kotlin.annotation.Retention public static @interface EHorizonResultType.Type {
  }

  public final class OpenLRStandard {
    field public static final com.mapbox.navigation.core.trip.model.eh.OpenLRStandard INSTANCE;
    field public static final String TOM_TOM = "TOM_TOM";
  }

  @StringDef(com.mapbox.navigation.core.trip.model.eh.OpenLRStandard.TOM_TOM) @kotlin.annotation.Retention public static @interface OpenLRStandard.Type {
  }

  public final class RoadClass {
    field public static final com.mapbox.navigation.core.trip.model.eh.RoadClass INSTANCE;
    field public static final String MOTORWAY = "MOTORWAY";
    field public static final String PRIMARY = "PRIMARY";
    field public static final String RESIDENTIAL = "RESIDENTIAL";
    field public static final String SECONDARY = "SECONDARY";
    field public static final String SERVICE_OTHER = "SERVICE_OTHER";
    field public static final String TERTIARY = "TERTIARY";
    field public static final String TRUNK = "TRUNK";
    field public static final String UNCLASSIFIED = "UNCLASSIFIED";
  }

  @StringDef({com.mapbox.navigation.core.trip.model.eh.RoadClass.MOTORWAY, com.mapbox.navigation.core.trip.model.eh.RoadClass.TRUNK, com.mapbox.navigation.core.trip.model.eh.RoadClass.PRIMARY, com.mapbox.navigation.core.trip.model.eh.RoadClass.SECONDARY, com.mapbox.navigation.core.trip.model.eh.RoadClass.TERTIARY, com.mapbox.navigation.core.trip.model.eh.RoadClass.UNCLASSIFIED, com.mapbox.navigation.core.trip.model.eh.RoadClass.RESIDENTIAL, com.mapbox.navigation.core.trip.model.eh.RoadClass.SERVICE_OTHER}) @kotlin.annotation.Retention public static @interface RoadClass.Type {
  }

  public final class RoadName {
    method public String getName();
    method public boolean getShielded();
    property public final String name;
    property public final boolean shielded;
  }

}

package com.mapbox.navigation.core.trip.model.roadobject {

  public final class RoadObjectType {
    field public static final int BRIDGE = 11; // 0xb
    field public static final int BRIDGE_ENTRANCE = 9; // 0x9
    field public static final int BRIDGE_EXIT = 10; // 0xa
    field public static final int COUNTRY_BORDER_CROSSING = 3; // 0x3
    field public static final int CUSTOM = 13; // 0xd
    field public static final int INCIDENT = 12; // 0xc
    field public static final com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType INSTANCE;
    field public static final int RESTRICTED_AREA = 8; // 0x8
    field public static final int RESTRICTED_AREA_ENTRANCE = 6; // 0x6
    field public static final int RESTRICTED_AREA_EXIT = 7; // 0x7
    field public static final int REST_STOP = 5; // 0x5
    field public static final int TOLL_COLLECTION = 4; // 0x4
    field public static final int TUNNEL = 2; // 0x2
    field public static final int TUNNEL_ENTRANCE = 0; // 0x0
    field public static final int TUNNEL_EXIT = 1; // 0x1
  }

  @IntDef({com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.TUNNEL_ENTRANCE, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.TUNNEL_EXIT, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.TUNNEL, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.COUNTRY_BORDER_CROSSING, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.TOLL_COLLECTION, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.REST_STOP, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.RESTRICTED_AREA_ENTRANCE, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.RESTRICTED_AREA_EXIT, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.RESTRICTED_AREA, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.BRIDGE_ENTRANCE, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.BRIDGE_EXIT, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.BRIDGE, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.INCIDENT, com.mapbox.navigation.core.trip.model.roadobject.RoadObjectType.CUSTOM}) @kotlin.annotation.Retention public static @interface RoadObjectType.Type {
  }

  public final class RoadObjectUtils {
    method public static com.mapbox.geojson.LineString? toLineString(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry, com.mapbox.api.directions.v5.models.DirectionsRoute directionsRoute, @IntRange(from=com.mapbox.navigation.core.trip.model.roadobject.RoadObjectUtils.PRECISION_RANGE_START, to=com.mapbox.navigation.core.trip.model.roadobject.RoadObjectUtils.PRECISION_RANGE_END) int precision);
    method public static com.mapbox.geojson.LineString? toLineString(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry, com.mapbox.geojson.LineString routeLineString);
  }

}

package com.mapbox.navigation.core.trip.model.roadobject.border {

  public final class CountryBorderCrossing extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingInfo? getCountryBorderCrossingInfo();
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossing.Builder toBuilder();
    property public final com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingInfo? countryBorderCrossingInfo;
  }

  public static final class CountryBorderCrossing.Builder {
    ctor public CountryBorderCrossing.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossing build();
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossing.Builder countryBorderCrossingInfo(com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingInfo? borderCrossingInfo);
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossing.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
  }

  public final class CountryBorderCrossingAdminInfo {
    method public String getCode();
    method public String getCodeAlpha3();
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingAdminInfo.Builder toBuilder();
    property public final String code;
    property public final String codeAlpha3;
  }

  public static final class CountryBorderCrossingAdminInfo.Builder {
    ctor public CountryBorderCrossingAdminInfo.Builder(String code, String codeAlpha3);
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingAdminInfo build();
  }

  public final class CountryBorderCrossingInfo {
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingAdminInfo? getFrom();
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingAdminInfo? getTo();
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingInfo.Builder toBuilder();
    property public final com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingAdminInfo? from;
    property public final com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingAdminInfo? to;
  }

  public static final class CountryBorderCrossingInfo.Builder {
    ctor public CountryBorderCrossingInfo.Builder(com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingAdminInfo? from, com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingAdminInfo? to);
    method public com.mapbox.navigation.core.trip.model.roadobject.border.CountryBorderCrossingInfo build();
  }

}

package com.mapbox.navigation.core.trip.model.roadobject.bridge {

  public final class Bridge extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.bridge.Bridge.Builder toBuilder();
  }

  public static final class Bridge.Builder {
    ctor public Bridge.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.bridge.Bridge build();
    method public com.mapbox.navigation.core.trip.model.roadobject.bridge.Bridge.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
  }

  public final class BridgeEntrance extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.bridge.BridgeEntrance.Builder toBuilder();
  }

  public static final class BridgeEntrance.Builder {
    ctor public BridgeEntrance.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.bridge.BridgeEntrance build();
    method public com.mapbox.navigation.core.trip.model.roadobject.bridge.BridgeEntrance.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
  }

  public final class BridgeExit extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.bridge.BridgeExit.Builder toBuilder();
  }

  public static final class BridgeExit.Builder {
    ctor public BridgeExit.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.bridge.BridgeExit build();
    method public com.mapbox.navigation.core.trip.model.roadobject.bridge.BridgeExit.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
  }

}

package com.mapbox.navigation.core.trip.model.roadobject.custom {

  public final class Custom extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.custom.Custom.Builder toBuilder();
  }

  public static final class Custom.Builder {
    ctor public Custom.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.custom.Custom build();
    method public com.mapbox.navigation.core.trip.model.roadobject.custom.Custom.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
  }

}

package com.mapbox.navigation.core.trip.model.roadobject.incident {

  public final class Incident extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo? getInfo();
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.Incident.Builder toBuilder();
    property public final com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo? info;
  }

  public static final class Incident.Builder {
    ctor public Incident.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.Incident build();
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.Incident.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.Incident.Builder info(com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo? incidentInfo);
  }

  public final class IncidentCongestion {
    method public Integer? getValue();
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentCongestion.Builder toBuilder();
    property public final Integer? value;
  }

  public static final class IncidentCongestion.Builder {
    ctor public IncidentCongestion.Builder();
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentCongestion build();
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentCongestion.Builder value(Integer? value);
  }

  public final class IncidentImpact {
    field public static final String CRITICAL = "critical";
    field public static final com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentImpact INSTANCE;
    field public static final String LOW = "low";
    field public static final String MAJOR = "major";
    field public static final String MINOR = "minor";
    field public static final String UNKNOWN = "unknown";
  }

  @StringDef({com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentImpact.UNKNOWN, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentImpact.CRITICAL, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentImpact.MAJOR, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentImpact.MINOR, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentImpact.LOW}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface IncidentImpact.Impact {
  }

  public final class IncidentInfo {
    method public java.util.List<java.lang.Integer>? getAlertcCodes();
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentCongestion? getCongestion();
    method public java.util.Date? getCreationTime();
    method public String? getDescription();
    method public java.util.Date? getEndTime();
    method public String getId();
    method public String getImpact();
    method public java.util.Date? getStartTime();
    method public String? getSubType();
    method public String? getSubTypeDescription();
    method public int getType();
    method public boolean isClosed();
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder toBuilder();
    property public final java.util.List<java.lang.Integer>? alertcCodes;
    property public final com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentCongestion? congestion;
    property public final java.util.Date? creationTime;
    property public final String? description;
    property public final java.util.Date? endTime;
    property public final String id;
    property public final String impact;
    property public final boolean isClosed;
    property public final java.util.Date? startTime;
    property public final String? subType;
    property public final String? subTypeDescription;
    property public final int type;
  }

  public static final class IncidentInfo.Builder {
    ctor public IncidentInfo.Builder(String id);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder alertcCodes(java.util.List<java.lang.Integer>? alertcCodes);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo build();
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder congestion(com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentCongestion? congestion);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder creationTime(java.util.Date? creationTime);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder description(String? description);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder endTime(java.util.Date? endTime);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder impact(@com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentImpact.Impact String impact);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder isClosed(boolean isClosed);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder startTime(java.util.Date? startTime);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder subType(String? subType);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder subTypeDescription(String? subTypeDescription);
    method public com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentInfo.Builder type(@com.mapbox.api.directions.v5.models.Incident.IncidentType int incidentType);
  }

  public final class IncidentType {
    field public static final int ACCIDENT = 41; // 0x29
    field public static final int CONGESTION = 42; // 0x2a
    field public static final int CONSTRUCTION = 43; // 0x2b
    field public static final int DISABLED_VEHICLE = 44; // 0x2c
    field public static final com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType INSTANCE;
    field public static final int LANE_RESTRICTION = 45; // 0x2d
    field public static final int MASS_TRANSIT = 46; // 0x2e
    field public static final int MISCELLANEOUS = 47; // 0x2f
    field public static final int OTHER_NEWS = 48; // 0x30
    field public static final int PLANNED_EVENT = 49; // 0x31
    field public static final int ROAD_CLOSURE = 50; // 0x32
    field public static final int ROAD_HAZARD = 51; // 0x33
    field public static final int UNKNOWN = 40; // 0x28
    field public static final int WEATHER = 52; // 0x34
  }

  @IntDef({com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.UNKNOWN, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.ACCIDENT, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.CONGESTION, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.CONSTRUCTION, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.DISABLED_VEHICLE, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.LANE_RESTRICTION, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.MASS_TRANSIT, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.MISCELLANEOUS, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.OTHER_NEWS, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.PLANNED_EVENT, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.ROAD_CLOSURE, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.ROAD_HAZARD, com.mapbox.navigation.core.trip.model.roadobject.incident.IncidentType.WEATHER}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface IncidentType.Type {
  }

}

package com.mapbox.navigation.core.trip.model.roadobject.restrictedarea {

  public final class RestrictedArea extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.restrictedarea.RestrictedArea.Builder toBuilder();
  }

  public static final class RestrictedArea.Builder {
    ctor public RestrictedArea.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.restrictedarea.RestrictedArea build();
    method public com.mapbox.navigation.core.trip.model.roadobject.restrictedarea.RestrictedArea.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
  }

  public final class RestrictedAreaEntrance extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.restrictedarea.RestrictedAreaEntrance.Builder toBuilder();
  }

  public static final class RestrictedAreaEntrance.Builder {
    ctor public RestrictedAreaEntrance.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.restrictedarea.RestrictedAreaEntrance build();
    method public com.mapbox.navigation.core.trip.model.roadobject.restrictedarea.RestrictedAreaEntrance.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
  }

  public final class RestrictedAreaExit extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.restrictedarea.RestrictedAreaExit.Builder toBuilder();
  }

  public static final class RestrictedAreaExit.Builder {
    ctor public RestrictedAreaExit.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.restrictedarea.RestrictedAreaExit build();
    method public com.mapbox.navigation.core.trip.model.roadobject.restrictedarea.RestrictedAreaExit.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
  }

}

package com.mapbox.navigation.core.trip.model.roadobject.reststop {

  public final class RestStop extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public int getRestStopType();
    method public com.mapbox.navigation.core.trip.model.roadobject.reststop.RestStop.Builder toBuilder();
    property public final int restStopType;
  }

  public static final class RestStop.Builder {
    ctor public RestStop.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.reststop.RestStop build();
    method public com.mapbox.navigation.core.trip.model.roadobject.reststop.RestStop.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
    method public com.mapbox.navigation.core.trip.model.roadobject.reststop.RestStop.Builder restStopType(@com.mapbox.navigation.core.trip.model.roadobject.reststop.RestStopType.Type int restStopType);
  }

  public final class RestStopType {
    field public static final com.mapbox.navigation.core.trip.model.roadobject.reststop.RestStopType INSTANCE;
    field public static final int REST_AREA = 1; // 0x1
    field public static final int SERVICE_AREA = 2; // 0x2
    field public static final int UNKNOWN = -1; // 0xffffffff
  }

  @IntDef({com.mapbox.navigation.core.trip.model.roadobject.reststop.RestStopType.UNKNOWN, com.mapbox.navigation.core.trip.model.roadobject.reststop.RestStopType.REST_AREA, com.mapbox.navigation.core.trip.model.roadobject.reststop.RestStopType.SERVICE_AREA}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface RestStopType.Type {
  }

}

package com.mapbox.navigation.core.trip.model.roadobject.tollcollection {

  public final class TollCollection extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public int getTollCollectionType();
    method public com.mapbox.navigation.core.trip.model.roadobject.tollcollection.TollCollection.Builder toBuilder();
    property public final int tollCollectionType;
  }

  public static final class TollCollection.Builder {
    ctor public TollCollection.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.tollcollection.TollCollection build();
    method public com.mapbox.navigation.core.trip.model.roadobject.tollcollection.TollCollection.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
    method public com.mapbox.navigation.core.trip.model.roadobject.tollcollection.TollCollection.Builder tollCollectionType(@com.mapbox.navigation.core.trip.model.roadobject.tollcollection.TollCollectionType.Type int tollCollectionType);
  }

  public final class TollCollectionType {
    field public static final com.mapbox.navigation.core.trip.model.roadobject.tollcollection.TollCollectionType INSTANCE;
    field public static final int TOLL_BOOTH = 1; // 0x1
    field public static final int TOLL_GANTRY = 2; // 0x2
    field public static final int UNKNOWN = -1; // 0xffffffff
  }

  @IntDef({com.mapbox.navigation.core.trip.model.roadobject.tollcollection.TollCollectionType.UNKNOWN, com.mapbox.navigation.core.trip.model.roadobject.tollcollection.TollCollectionType.TOLL_BOOTH, com.mapbox.navigation.core.trip.model.roadobject.tollcollection.TollCollectionType.TOLL_GANTRY}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface TollCollectionType.Type {
  }

}

package com.mapbox.navigation.core.trip.model.roadobject.tunnel {

  public final class Tunnel extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? getInfo();
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.Tunnel.Builder toBuilder();
    property public final com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? info;
  }

  public static final class Tunnel.Builder {
    ctor public Tunnel.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.Tunnel build();
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.Tunnel.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.Tunnel.Builder info(com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? info);
  }

  public final class TunnelEntrance extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? getInfo();
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelEntrance.Builder toBuilder();
    property public final com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? info;
  }

  public static final class TunnelEntrance.Builder {
    ctor public TunnelEntrance.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelEntrance build();
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelEntrance.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelEntrance.Builder info(com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? info);
  }

  public final class TunnelExit extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? getInfo();
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelExit.Builder toBuilder();
    property public final com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? info;
  }

  public static final class TunnelExit.Builder {
    ctor public TunnelExit.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelExit build();
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelExit.Builder distanceFromStartOfRoute(Double? distanceFromStartOfRoute);
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelExit.Builder info(com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo? info);
  }

  public final class TunnelInfo {
    method public String getName();
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo.Builder toBuilder();
    property public final String name;
  }

  public static final class TunnelInfo.Builder {
    ctor public TunnelInfo.Builder(String name);
    method public com.mapbox.navigation.core.trip.model.roadobject.tunnel.TunnelInfo build();
  }

}

package com.mapbox.navigation.core.trip.session {

  public interface BannerInstructionsObserver {
    method public void onNewBannerInstructions(com.mapbox.api.directions.v5.models.BannerInstructions bannerInstructions);
  }

  public interface EHorizonObserver {
    method public void onPositionUpdated(com.mapbox.navigation.core.trip.model.eh.EHorizonPosition position, java.util.Map<java.lang.String,com.mapbox.navigation.core.trip.model.eh.EHorizonObjectDistanceInfo> distances);
    method public void onRoadObjectAdded(String roadObjectId);
    method public void onRoadObjectEnter(com.mapbox.navigation.core.trip.model.eh.EHorizonObjectEnterExitInfo objectEnterExitInfo);
    method public void onRoadObjectExit(com.mapbox.navigation.core.trip.model.eh.EHorizonObjectEnterExitInfo objectEnterExitInfo);
    method public void onRoadObjectRemoved(String roadObjectId);
    method public void onRoadObjectUpdated(String roadObjectId);
  }

  public final class GraphAccessor {
    method public com.mapbox.navigation.core.trip.model.eh.EHorizonEdgeMetadata? getEdgeMetadata(long edgeId);
    method public java.util.List<com.mapbox.geojson.Point>? getEdgeShape(long edgeId);
    method public com.mapbox.geojson.Point? getGraphPositionCoordinate(com.mapbox.navigation.core.trip.model.eh.EHorizonGraphPosition graphPosition);
    method public java.util.List<com.mapbox.geojson.Point>? getPathShape(com.mapbox.navigation.core.trip.model.eh.EHorizonGraphPath graphPath);
  }

  public interface LocationObserver {
    method public void onEnhancedLocationChanged(android.location.Location enhancedLocation, java.util.List<? extends android.location.Location> keyPoints);
    method public void onRawLocationChanged(android.location.Location rawLocation);
  }

  public final class MapMatcherResult {
    method public android.location.Location getEnhancedLocation();
    method public java.util.List<android.location.Location> getKeyPoints();
    method public float getOffRoadProbability();
    method public float getRoadEdgeMatchProbability();
    method public com.mapbox.navigation.base.speed.model.SpeedLimit? getSpeedLimit();
    method public boolean isOffRoad();
    method public boolean isTeleport();
    property public final android.location.Location enhancedLocation;
    property public final boolean isOffRoad;
    property public final boolean isTeleport;
    property public final java.util.List<android.location.Location> keyPoints;
    property public final float offRoadProbability;
    property public final float roadEdgeMatchProbability;
    property public final com.mapbox.navigation.base.speed.model.SpeedLimit? speedLimit;
  }

  public interface MapMatcherResultObserver {
    method public void onNewMapMatcherResult(com.mapbox.navigation.core.trip.session.MapMatcherResult mapMatcherResult);
  }

  public interface OffRouteObserver {
    method public void onOffRouteStateChanged(boolean offRoute);
  }

  public interface RoadObjectsObserver {
    method public void onNewRoadObjects(java.util.List<? extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject> roadObjects);
  }

  public final class RoadObjectsStore {
    method public void addCustomRoadObject(String roadObjectId, String openLRLocation, @com.mapbox.navigation.core.trip.model.eh.OpenLRStandard.Type String openLRStandard);
    method public java.util.List<java.lang.String> getRoadObjectIdsByEdgeIds(java.util.List<java.lang.Long> edgeIds);
    method public com.mapbox.navigation.core.trip.model.eh.EHorizonObjectLocation? getRoadObjectLocation(String roadObjectId);
    method public com.mapbox.navigation.core.trip.model.eh.EHorizonObjectMetadata? getRoadObjectMetadata(String roadObjectId);
    method public java.util.Map<java.lang.String,com.mapbox.navigation.core.trip.model.eh.EHorizonObjectEdgeLocation> getRoadObjectsOnTheEdge(long edgeId);
    method public java.util.List<com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject> getUpcomingRoadObjects(java.util.Map<java.lang.String,com.mapbox.navigation.core.trip.model.eh.EHorizonObjectDistanceInfo> distances);
    method public void removeCustomRoadObject(String roadObjectId);
  }

  public interface RouteProgressObserver {
    method public void onRouteProgressChanged(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
  }

  public enum TripSessionState {
    enum_constant public static final com.mapbox.navigation.core.trip.session.TripSessionState STARTED;
    enum_constant public static final com.mapbox.navigation.core.trip.session.TripSessionState STOPPED;
  }

  public interface TripSessionStateObserver {
    method public void onSessionStateChanged(com.mapbox.navigation.core.trip.session.TripSessionState tripSessionState);
  }

  public interface VoiceInstructionsObserver {
    method public void onNewVoiceInstructions(com.mapbox.api.directions.v5.models.VoiceInstructions voiceInstructions);
  }

}

