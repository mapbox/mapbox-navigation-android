package com.mapbox.services.android.navigation.ui.v5.instruction.turnlane;

import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PointF;
import android.graphics.RectF;

import java.util.Stack;


/**
 * Created on Nov 6, 2017.
 * Copyright Â© 2017 Mapbox. All rights reserved.
 * <p>
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 */
public class LanesStyleKit {

  // Resizing Behavior
  public enum ResizingBehavior {
    AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
    AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
    Stretch, //!< The content is stretched to match the entire target rectangle.
    Center, //!< The content is centered in the target rectangle, but it is NOT resized.
  }

  // Canvas Drawings
  // Tab

  private static class CacheForLaneStraightRight {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF group = new RectF();
    private static RectF rectangleRect = new RectF();
    private static Path rectanglePath = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
    private static RectF bezier3Rect = new RectF();
    private static Path bezier3Path = new Path();
  }

  public static void drawLaneStraightRight(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneStraightRight(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneStraightRight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneStraightRight.paint;

    // Local Variables
    float expression = Math.min(size.x / 30f, size.y / 30f);

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneStraightRight.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneStraightRight.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneStraightRight.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      RectF group = CacheForLaneStraightRight.group;
      group.set(0f, 0f, 21.97f, 25f);
      canvas.save();
      canvas.translate(5f, 2f);
      currentTransformation.peek().postTranslate(5f, 2f);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Rectangle
      RectF rectangleRect = CacheForLaneStraightRight.rectangleRect;
      rectangleRect.set(4f, 9.5f, 8f, 25f);
      Path rectanglePath = CacheForLaneStraightRight.rectanglePath;
      rectanglePath.reset();
      rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
      rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
      rectanglePath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(rectanglePath, paint);

      // Bezier
      RectF bezierRect = CacheForLaneStraightRight.bezierRect;
      bezierRect.set(0f, 0f, 12.02f, 9.99f);
      Path bezierPath = CacheForLaneStraightRight.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(group.left + group.width() * 0.27386f, group.top + group.height() * 0.00011f);
      bezierPath.cubicTo(group.left + group.width() * 0.2756f, group.top + group.height() * 0.00224f, group.left + group.width() * 0.53413f, group.top + group.height() * 0.31865f, group.left + group.width() * 0.53965f, group.top + group.height() * 0.3254f);
      bezierPath.cubicTo(group.left + group.width() * 0.54425f, group.top + group.height() * 0.32928f, group.left + group.width() * 0.54702f, group.top + group.height() * 0.33472f, group.left + group.width() * 0.54702f, group.top + group.height() * 0.34063f);
      bezierPath.cubicTo(group.left + group.width() * 0.54702f, group.top + group.height() * 0.35203f, group.left + group.width() * 0.53651f, group.top + group.height() * 0.36123f, group.left + group.width() * 0.52354f, group.top + group.height() * 0.36123f);
      bezierPath.cubicTo(group.left + group.width() * 0.52046f, group.top + group.height() * 0.36123f, group.left + group.width() * 0.51752f, group.top + group.height() * 0.36073f, group.left + group.width() * 0.51483f, group.top + group.height() * 0.35977f);
      bezierPath.cubicTo(group.left + group.width() * 0.50959f, group.top + group.height() * 0.35807f, group.left + group.width() * 0.39573f, group.top + group.height() * 0.32173f, group.left + group.width() * 0.3908f, group.top + group.height() * 0.32016f);
      bezierPath.cubicTo(group.left + group.width() * 0.37325f, group.top + group.height() * 0.31999f, group.left + group.width() * 0.36451f, group.top + group.height() * 0.32935f, group.left + group.width() * 0.36451f, group.top + group.height() * 0.34099f);
      bezierPath.cubicTo(group.left + group.width() * 0.36451f, group.top + group.height() * 0.34361f, group.left + group.width() * 0.36434f, group.top + group.height() * 0.34642f, group.left + group.width() * 0.36433f, group.top + group.height() * 0.34883f);
      bezierPath.cubicTo(group.left + group.width() * 0.36425f, group.top + group.height() * 0.3521f, group.left + group.width() * 0.36447f, group.top + group.height() * 0.39943f, group.left + group.width() * 0.36447f, group.top + group.height() * 0.39943f);
      bezierPath.lineTo(group.left + group.width() * 0.18255f, group.top + group.height() * 0.39695f);
      bezierPath.cubicTo(group.left + group.width() * 0.18255f, group.top + group.height() * 0.39695f, group.left + group.width() * 0.18276f, group.top + group.height() * 0.34996f, group.left + group.width() * 0.18278f, group.top + group.height() * 0.34651f);
      bezierPath.cubicTo(group.left + group.width() * 0.18268f, group.top + group.height() * 0.34391f, group.left + group.width() * 0.18251f, group.top + group.height() * 0.34112f, group.left + group.width() * 0.18251f, group.top + group.height() * 0.33851f);
      bezierPath.cubicTo(group.left + group.width() * 0.18251f, group.top + group.height() * 0.32687f, group.left + group.width() * 0.17377f, group.top + group.height() * 0.31751f, group.left + group.width() * 0.16052f, group.top + group.height() * 0.31751f);
      bezierPath.cubicTo(group.left + group.width() * 0.15129f, group.top + group.height() * 0.31925f, group.left + group.width() * 0.03743f, group.top + group.height() * 0.35559f, group.left + group.width() * 0.03235f, group.top + group.height() * 0.35721f);
      bezierPath.cubicTo(group.left + group.width() * 0.0295f, group.top + group.height() * 0.35821f, group.left + group.width() * 0.02656f, group.top + group.height() * 0.35875f, group.left + group.width() * 0.02348f, group.top + group.height() * 0.35875f);
      bezierPath.cubicTo(group.left + group.width() * 0.0106f, group.top + group.height() * 0.35875f, group.left + group.width() * 0.00014f, group.top + group.height() * 0.34964f, group.left, group.top + group.height() * 0.33835f);
      bezierPath.cubicTo(group.left + group.width() * 0.00007f, group.top + group.height() * 0.33206f, group.left + group.width() * 0.00283f, group.top + group.height() * 0.32675f, group.left + group.width() * 0.0073f, group.top + group.height() * 0.32305f);
      bezierPath.cubicTo(group.left + group.width() * 0.01291f, group.top + group.height() * 0.3162f, group.left + group.width() * 0.27191f, group.top + group.height() * 0.00224f, group.left + group.width() * 0.27375f, group.top);
      bezierPath.lineTo(group.left + group.width() * 0.27386f, group.top + group.height() * 0.00011f);
      bezierPath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);

      // Bezier 2
      RectF bezier2Rect = CacheForLaneStraightRight.bezier2Rect;
      bezier2Rect.set(12.99f, 8.58f, 21.97f, 20.6f);
      Path bezier2Path = CacheForLaneStraightRight.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(group.left + group.width() * 0.59384f, group.top + group.height() * 0.50353f);
      bezier2Path.lineTo(group.left + group.width() * 0.65146f, group.top + group.height() * 0.50373f);
      bezier2Path.lineTo(group.left + group.width() * 0.65123f, group.top + group.height() * 0.50365f);
      bezier2Path.cubicTo(group.left + group.width() * 0.65401f, group.top + group.height() * 0.50365f, group.left + group.width() * 0.65729f, group.top + group.height() * 0.50349f, group.left + group.width() * 0.66034f, group.top + group.height() * 0.50349f);
      bezier2Path.cubicTo(group.left + group.width() * 0.67358f, group.top + group.height() * 0.50349f, group.left + group.width() * 0.68423f, group.top + group.height() * 0.49581f, group.left + group.width() * 0.68423f, group.top + group.height() * 0.48417f);
      bezier2Path.cubicTo(group.left + group.width() * 0.68423f, group.top + group.height() * 0.48297f, group.left + group.width() * 0.68418f, group.top + group.height() * 0.48153f, group.left + group.width() * 0.68396f, group.top + group.height() * 0.48041f);
      bezier2Path.lineTo(group.left + group.width() * 0.68409f, group.top + group.height() * 0.48053f);
      bezier2Path.lineTo(group.left + group.width() * 0.63899f, group.top + group.height() * 0.37137f);
      bezier2Path.lineTo(group.left + group.width() * 0.63904f, group.top + group.height() * 0.37153f);
      bezier2Path.cubicTo(group.left + group.width() * 0.63794f, group.top + group.height() * 0.36913f, group.left + group.width() * 0.63731f, group.top + group.height() * 0.36649f, group.left + group.width() * 0.63731f, group.top + group.height() * 0.36373f);
      bezier2Path.cubicTo(group.left + group.width() * 0.63731f, group.top + group.height() * 0.35233f, group.left + group.width() * 0.64782f, group.top + group.height() * 0.34309f, group.left + group.width() * 0.66079f, group.top + group.height() * 0.34309f);
      bezier2Path.cubicTo(group.left + group.width() * 0.66757f, group.top + group.height() * 0.34309f, group.left + group.width() * 0.67376f, group.top + group.height() * 0.34557f, group.left + group.width() * 0.67804f, group.top + group.height() * 0.34961f);
      bezier2Path.lineTo(group.left + group.width() * 0.67795f, group.top + group.height() * 0.34949f);
      bezier2Path.lineTo(group.left + group.width() * 1f, group.top + group.height() * 0.58369f);
      bezier2Path.lineTo(group.left + group.width() * 0.67513f, group.top + group.height() * 0.81745f);
      bezier2Path.lineTo(group.left + group.width() * 0.67522f, group.top + group.height() * 0.81733f);
      bezier2Path.cubicTo(group.left + group.width() * 0.67094f, group.top + group.height() * 0.82137f, group.left + group.width() * 0.6647f, group.top + group.height() * 0.82385f, group.left + group.width() * 0.65792f, group.top + group.height() * 0.82385f);
      bezier2Path.cubicTo(group.left + group.width() * 0.64495f, group.top + group.height() * 0.82385f, group.left + group.width() * 0.63448f, group.top + group.height() * 0.81461f, group.left + group.width() * 0.63448f, group.top + group.height() * 0.80321f);
      bezier2Path.cubicTo(group.left + group.width() * 0.63448f, group.top + group.height() * 0.80045f, group.left + group.width() * 0.63508f, group.top + group.height() * 0.79781f, group.left + group.width() * 0.63621f, group.top + group.height() * 0.79541f);
      bezier2Path.lineTo(group.left + group.width() * 0.63617f, group.top + group.height() * 0.79557f);
      bezier2Path.lineTo(group.left + group.width() * 0.68127f, group.top + group.height() * 0.68641f);
      bezier2Path.lineTo(group.left + group.width() * 0.68113f, group.top + group.height() * 0.68653f);
      bezier2Path.cubicTo(group.left + group.width() * 0.68132f, group.top + group.height() * 0.68541f, group.left + group.width() * 0.68141f, group.top + group.height() * 0.68397f, group.left + group.width() * 0.68141f, group.top + group.height() * 0.68277f);
      bezier2Path.cubicTo(group.left + group.width() * 0.68141f, group.top + group.height() * 0.67113f, group.left + group.width() * 0.67076f, group.top + group.height() * 0.66345f, group.left + group.width() * 0.65751f, group.top + group.height() * 0.66345f);
      bezier2Path.cubicTo(group.left + group.width() * 0.65446f, group.top + group.height() * 0.66345f, group.left + group.width() * 0.65119f, group.top + group.height() * 0.66329f, group.left + group.width() * 0.64841f, group.top + group.height() * 0.66329f);
      bezier2Path.lineTo(group.left + group.width() * 0.64859f, group.top + group.height() * 0.66321f);
      bezier2Path.lineTo(group.left + group.width() * 0.59102f, group.top + group.height() * 0.66341f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezier2Path.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier2Path, paint);

      // Bezier 3
      RectF bezier3Rect = CacheForLaneStraightRight.bezier3Rect;
      bezier3Rect.set(6.03f, 14.61f, 15.03f, 25f);
      Path bezier3Path = CacheForLaneStraightRight.bezier3Path;
      bezier3Path.reset();
      bezier3Path.moveTo(group.left + group.width() * 0.27429f, group.top + group.height());
      bezier3Path.lineTo(group.left + group.width() * 0.27429f, group.top + group.height() * 0.83475f);
      bezier3Path.cubicTo(group.left + group.width() * 0.27429f, group.top + group.height() * 0.76907f, group.left + group.width() * 0.30633f, group.top + group.height() * 0.70583f, group.left + group.width() * 0.36427f, group.top + group.height() * 0.66431f);
      bezier3Path.cubicTo(group.left + group.width() * 0.42007f, group.top + group.height() * 0.62431f, group.left + group.width() * 0.49758f, group.top + group.height() * 0.58431f, group.left + group.width() * 0.58433f, group.top + group.height() * 0.58431f);
      bezier3Path.lineTo(group.left + group.width() * 0.68391f, group.top + group.height() * 0.58431f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier3Path, paint);
      canvas.restore();

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneStraightOnly {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF group = new RectF();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
    private static RectF bezier3Rect = new RectF();
    private static Path bezier3Path = new Path();
    private static RectF rectangleRect = new RectF();
    private static Path rectanglePath = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
  }

  public static void drawLaneStraightOnly(Canvas canvas, int primaryColor, int secondaryColor, PointF size) {
    LanesStyleKit.drawLaneStraightOnly(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, size);
  }

  public static void drawLaneStraightOnly(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneStraightOnly.paint;

    // Local Variables
    float expression = Math.min(size.x / 30f, size.y / 30f);

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneStraightOnly.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneStraightOnly.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneStraightOnly.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      RectF group = CacheForLaneStraightOnly.group;
      group.set(0f, 0f, 21.97f, 25f);
      canvas.save();
      canvas.translate(5f, 2f);
      currentTransformation.peek().postTranslate(5f, 2f);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Bezier 2
      RectF bezier2Rect = CacheForLaneStraightOnly.bezier2Rect;
      bezier2Rect.set(12.99f, 8.58f, 21.97f, 20.6f);
      Path bezier2Path = CacheForLaneStraightOnly.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(group.left + group.width() * 0.59384f, group.top + group.height() * 0.50353f);
      bezier2Path.lineTo(group.left + group.width() * 0.65146f, group.top + group.height() * 0.50373f);
      bezier2Path.lineTo(group.left + group.width() * 0.65123f, group.top + group.height() * 0.50365f);
      bezier2Path.cubicTo(group.left + group.width() * 0.65401f, group.top + group.height() * 0.50365f, group.left + group.width() * 0.65729f, group.top + group.height() * 0.50349f, group.left + group.width() * 0.66034f, group.top + group.height() * 0.50349f);
      bezier2Path.cubicTo(group.left + group.width() * 0.67358f, group.top + group.height() * 0.50349f, group.left + group.width() * 0.68423f, group.top + group.height() * 0.49581f, group.left + group.width() * 0.68423f, group.top + group.height() * 0.48417f);
      bezier2Path.cubicTo(group.left + group.width() * 0.68423f, group.top + group.height() * 0.48297f, group.left + group.width() * 0.68418f, group.top + group.height() * 0.48153f, group.left + group.width() * 0.68396f, group.top + group.height() * 0.48041f);
      bezier2Path.lineTo(group.left + group.width() * 0.68409f, group.top + group.height() * 0.48053f);
      bezier2Path.lineTo(group.left + group.width() * 0.63899f, group.top + group.height() * 0.37137f);
      bezier2Path.lineTo(group.left + group.width() * 0.63904f, group.top + group.height() * 0.37153f);
      bezier2Path.cubicTo(group.left + group.width() * 0.63794f, group.top + group.height() * 0.36913f, group.left + group.width() * 0.63731f, group.top + group.height() * 0.36649f, group.left + group.width() * 0.63731f, group.top + group.height() * 0.36373f);
      bezier2Path.cubicTo(group.left + group.width() * 0.63731f, group.top + group.height() * 0.35233f, group.left + group.width() * 0.64782f, group.top + group.height() * 0.34309f, group.left + group.width() * 0.66079f, group.top + group.height() * 0.34309f);
      bezier2Path.cubicTo(group.left + group.width() * 0.66757f, group.top + group.height() * 0.34309f, group.left + group.width() * 0.67376f, group.top + group.height() * 0.34557f, group.left + group.width() * 0.67804f, group.top + group.height() * 0.34961f);
      bezier2Path.lineTo(group.left + group.width() * 0.67795f, group.top + group.height() * 0.34949f);
      bezier2Path.lineTo(group.left + group.width() * 1f, group.top + group.height() * 0.58369f);
      bezier2Path.lineTo(group.left + group.width() * 0.67513f, group.top + group.height() * 0.81745f);
      bezier2Path.lineTo(group.left + group.width() * 0.67522f, group.top + group.height() * 0.81733f);
      bezier2Path.cubicTo(group.left + group.width() * 0.67094f, group.top + group.height() * 0.82137f, group.left + group.width() * 0.6647f, group.top + group.height() * 0.82385f, group.left + group.width() * 0.65792f, group.top + group.height() * 0.82385f);
      bezier2Path.cubicTo(group.left + group.width() * 0.64495f, group.top + group.height() * 0.82385f, group.left + group.width() * 0.63448f, group.top + group.height() * 0.81461f, group.left + group.width() * 0.63448f, group.top + group.height() * 0.80321f);
      bezier2Path.cubicTo(group.left + group.width() * 0.63448f, group.top + group.height() * 0.80045f, group.left + group.width() * 0.63508f, group.top + group.height() * 0.79781f, group.left + group.width() * 0.63621f, group.top + group.height() * 0.79541f);
      bezier2Path.lineTo(group.left + group.width() * 0.63617f, group.top + group.height() * 0.79557f);
      bezier2Path.lineTo(group.left + group.width() * 0.68127f, group.top + group.height() * 0.68641f);
      bezier2Path.lineTo(group.left + group.width() * 0.68113f, group.top + group.height() * 0.68653f);
      bezier2Path.cubicTo(group.left + group.width() * 0.68132f, group.top + group.height() * 0.68541f, group.left + group.width() * 0.68141f, group.top + group.height() * 0.68397f, group.left + group.width() * 0.68141f, group.top + group.height() * 0.68277f);
      bezier2Path.cubicTo(group.left + group.width() * 0.68141f, group.top + group.height() * 0.67113f, group.left + group.width() * 0.67076f, group.top + group.height() * 0.66345f, group.left + group.width() * 0.65751f, group.top + group.height() * 0.66345f);
      bezier2Path.cubicTo(group.left + group.width() * 0.65446f, group.top + group.height() * 0.66345f, group.left + group.width() * 0.65119f, group.top + group.height() * 0.66329f, group.left + group.width() * 0.64841f, group.top + group.height() * 0.66329f);
      bezier2Path.lineTo(group.left + group.width() * 0.64859f, group.top + group.height() * 0.66321f);
      bezier2Path.lineTo(group.left + group.width() * 0.59102f, group.top + group.height() * 0.66341f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezier2Path.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(secondaryColor);
      canvas.drawPath(bezier2Path, paint);

      // Bezier 3
      RectF bezier3Rect = CacheForLaneStraightOnly.bezier3Rect;
      bezier3Rect.set(6.03f, 14.61f, 15.03f, 25f);
      Path bezier3Path = CacheForLaneStraightOnly.bezier3Path;
      bezier3Path.reset();
      bezier3Path.moveTo(group.left + group.width() * 0.27429f, group.top + group.height());
      bezier3Path.lineTo(group.left + group.width() * 0.27429f, group.top + group.height() * 0.83475f);
      bezier3Path.cubicTo(group.left + group.width() * 0.27429f, group.top + group.height() * 0.76907f, group.left + group.width() * 0.30633f, group.top + group.height() * 0.70583f, group.left + group.width() * 0.36427f, group.top + group.height() * 0.66431f);
      bezier3Path.cubicTo(group.left + group.width() * 0.42007f, group.top + group.height() * 0.62431f, group.left + group.width() * 0.49758f, group.top + group.height() * 0.58431f, group.left + group.width() * 0.58433f, group.top + group.height() * 0.58431f);
      bezier3Path.lineTo(group.left + group.width() * 0.68391f, group.top + group.height() * 0.58431f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(secondaryColor);
      canvas.drawPath(bezier3Path, paint);
      canvas.restore();

      // Rectangle
      RectF rectangleRect = CacheForLaneStraightOnly.rectangleRect;
      rectangleRect.set(4f, 9f, 8f, 25f);
      Path rectanglePath = CacheForLaneStraightOnly.rectanglePath;
      rectanglePath.reset();
      rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
      rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
      rectanglePath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(rectanglePath, paint);

      // Bezier
      RectF bezierRect = CacheForLaneStraightOnly.bezierRect;
      bezierRect.set(0f, 0f, 12.02f, 9.99f);
      Path bezierPath = CacheForLaneStraightOnly.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(group.left + group.width() * 0.27386f, group.top + group.height() * 0.00011f);
      bezierPath.cubicTo(group.left + group.width() * 0.2756f, group.top + group.height() * 0.00224f, group.left + group.width() * 0.53413f, group.top + group.height() * 0.31865f, group.left + group.width() * 0.53965f, group.top + group.height() * 0.3254f);
      bezierPath.cubicTo(group.left + group.width() * 0.54425f, group.top + group.height() * 0.32928f, group.left + group.width() * 0.54702f, group.top + group.height() * 0.33472f, group.left + group.width() * 0.54702f, group.top + group.height() * 0.34063f);
      bezierPath.cubicTo(group.left + group.width() * 0.54702f, group.top + group.height() * 0.35203f, group.left + group.width() * 0.53651f, group.top + group.height() * 0.36123f, group.left + group.width() * 0.52354f, group.top + group.height() * 0.36123f);
      bezierPath.cubicTo(group.left + group.width() * 0.52046f, group.top + group.height() * 0.36123f, group.left + group.width() * 0.51752f, group.top + group.height() * 0.36073f, group.left + group.width() * 0.51483f, group.top + group.height() * 0.35977f);
      bezierPath.cubicTo(group.left + group.width() * 0.50959f, group.top + group.height() * 0.35807f, group.left + group.width() * 0.39573f, group.top + group.height() * 0.32173f, group.left + group.width() * 0.3908f, group.top + group.height() * 0.32016f);
      bezierPath.cubicTo(group.left + group.width() * 0.37325f, group.top + group.height() * 0.31999f, group.left + group.width() * 0.36451f, group.top + group.height() * 0.32935f, group.left + group.width() * 0.36451f, group.top + group.height() * 0.34099f);
      bezierPath.cubicTo(group.left + group.width() * 0.36451f, group.top + group.height() * 0.34361f, group.left + group.width() * 0.36434f, group.top + group.height() * 0.34642f, group.left + group.width() * 0.36433f, group.top + group.height() * 0.34883f);
      bezierPath.cubicTo(group.left + group.width() * 0.36425f, group.top + group.height() * 0.3521f, group.left + group.width() * 0.36447f, group.top + group.height() * 0.39943f, group.left + group.width() * 0.36447f, group.top + group.height() * 0.39943f);
      bezierPath.lineTo(group.left + group.width() * 0.18255f, group.top + group.height() * 0.39695f);
      bezierPath.cubicTo(group.left + group.width() * 0.18255f, group.top + group.height() * 0.39695f, group.left + group.width() * 0.18276f, group.top + group.height() * 0.34996f, group.left + group.width() * 0.18278f, group.top + group.height() * 0.34651f);
      bezierPath.cubicTo(group.left + group.width() * 0.18268f, group.top + group.height() * 0.34391f, group.left + group.width() * 0.18251f, group.top + group.height() * 0.34112f, group.left + group.width() * 0.18251f, group.top + group.height() * 0.33851f);
      bezierPath.cubicTo(group.left + group.width() * 0.18251f, group.top + group.height() * 0.32687f, group.left + group.width() * 0.17377f, group.top + group.height() * 0.31751f, group.left + group.width() * 0.16052f, group.top + group.height() * 0.31751f);
      bezierPath.cubicTo(group.left + group.width() * 0.15129f, group.top + group.height() * 0.31925f, group.left + group.width() * 0.03743f, group.top + group.height() * 0.35559f, group.left + group.width() * 0.03235f, group.top + group.height() * 0.35721f);
      bezierPath.cubicTo(group.left + group.width() * 0.0295f, group.top + group.height() * 0.35821f, group.left + group.width() * 0.02656f, group.top + group.height() * 0.35875f, group.left + group.width() * 0.02348f, group.top + group.height() * 0.35875f);
      bezierPath.cubicTo(group.left + group.width() * 0.0106f, group.top + group.height() * 0.35875f, group.left + group.width() * 0.00014f, group.top + group.height() * 0.34964f, group.left, group.top + group.height() * 0.33835f);
      bezierPath.cubicTo(group.left + group.width() * 0.00007f, group.top + group.height() * 0.33206f, group.left + group.width() * 0.00283f, group.top + group.height() * 0.32675f, group.left + group.width() * 0.0073f, group.top + group.height() * 0.32305f);
      bezierPath.cubicTo(group.left + group.width() * 0.01291f, group.top + group.height() * 0.3162f, group.left + group.width() * 0.27191f, group.top + group.height() * 0.00224f, group.left + group.width() * 0.27375f, group.top);
      bezierPath.lineTo(group.left + group.width() * 0.27386f, group.top + group.height() * 0.00011f);
      bezierPath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneRight {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF group = new RectF();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
  }

  public static void drawLaneRight(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneRight(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneRight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneRight.paint;

    // Local Variables
    float expression = Math.min(size.x / 30f, size.y / 30f);

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneRight.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneRight.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneRight.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      RectF group = CacheForLaneRight.group;
      group.set(0f, 0f, 14.85f, 23f);
      canvas.save();
      canvas.translate(9f, 4f);
      currentTransformation.peek().postTranslate(9f, 4f);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Bezier
      RectF bezierRect = CacheForLaneRight.bezierRect;
      bezierRect.set(5.87f, 0f, 14.85f, 12.02f);
      Path bezierPath = CacheForLaneRight.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(group.left + group.width() * 0.50217f, group.top + group.height() * 0.00014f);
      bezierPath.cubicTo(group.left + group.width() * 0.50834f, group.top + group.height() * 0.00007f, group.left + group.width() * 0.51727f, group.top + group.height() * 0.0027f, group.left + group.width() * 0.52351f, group.top + group.height() * 0.00697f);
      bezierPath.cubicTo(group.left + group.width() * 0.53419f, group.top + group.height() * 0.01264f, group.left + group.width(), group.top + group.height() * 0.26153f, group.left + group.width(), group.top + group.height() * 0.26153f);
      bezierPath.cubicTo(group.left + group.width(), group.top + group.height() * 0.26153f, group.left + group.width() * 0.53007f, group.top + group.height() * 0.50996f, group.left + group.width() * 0.51955f, group.top + group.height() * 0.51553f);
      bezierPath.cubicTo(group.left + group.width() * 0.51301f, group.top + group.height() * 0.51993f, group.left + group.width() * 0.50386f, group.top + group.height() * 0.52258f, group.left + group.width() * 0.49391f, group.top + group.height() * 0.52258f);
      bezierPath.cubicTo(group.left + group.width() * 0.47472f, group.top + group.height() * 0.52258f, group.left + group.width() * 0.45924f, group.top + group.height() * 0.51254f, group.left + group.width() * 0.45924f, group.top + group.height() * 0.50014f);
      bezierPath.cubicTo(group.left + group.width() * 0.45924f, group.top + group.height() * 0.49721f, group.left + group.width() * 0.46007f, group.top + group.height() * 0.4944f, group.left + group.width() * 0.46169f, group.top + group.height() * 0.49183f);
      bezierPath.cubicTo(group.left + group.width() * 0.46455f, group.top + group.height() * 0.48682f, group.left + group.width() * 0.52572f, group.top + group.height() * 0.37804f, group.left + group.width() * 0.52837f, group.top + group.height() * 0.37334f);
      bezierPath.cubicTo(group.left + group.width() * 0.52866f, group.top + group.height() * 0.35658f, group.left + group.width() * 0.5129f, group.top + group.height() * 0.34823f, group.left + group.width() * 0.49331f, group.top + group.height() * 0.34823f);
      bezierPath.cubicTo(group.left + group.width() * 0.48889f, group.top + group.height() * 0.34823f, group.left + group.width() * 0.48416f, group.top + group.height() * 0.34806f, group.left + group.width() * 0.48011f, group.top + group.height() * 0.34805f);
      bezierPath.cubicTo(group.left + group.width() * 0.4746f, group.top + group.height() * 0.34798f, group.left + group.width() * 0.39493f, group.top + group.height() * 0.34818f, group.left + group.width() * 0.39493f, group.top + group.height() * 0.34818f);
      bezierPath.lineTo(group.left + group.width() * 0.39911f, group.top + group.height() * 0.1744f);
      bezierPath.cubicTo(group.left + group.width() * 0.39911f, group.top + group.height() * 0.1744f, group.left + group.width() * 0.4782f, group.top + group.height() * 0.1746f, group.left + group.width() * 0.48401f, group.top + group.height() * 0.17461f);
      bezierPath.cubicTo(group.left + group.width() * 0.48839f, group.top + group.height() * 0.17452f, group.left + group.width() * 0.49309f, group.top + group.height() * 0.17435f, group.left + group.width() * 0.49748f, group.top + group.height() * 0.17435f);
      bezierPath.cubicTo(group.left + group.width() * 0.51708f, group.top + group.height() * 0.17435f, group.left + group.width() * 0.53283f, group.top + group.height() * 0.166f, group.left + group.width() * 0.53283f, group.top + group.height() * 0.15335f);
      bezierPath.cubicTo(group.left + group.width() * 0.5299f, group.top + group.height() * 0.14453f, group.left + group.width() * 0.46873f, group.top + group.height() * 0.03576f, group.left + group.width() * 0.466f, group.top + group.height() * 0.03091f);
      bezierPath.cubicTo(group.left + group.width() * 0.46431f, group.top + group.height() * 0.02818f, group.left + group.width() * 0.46341f, group.top + group.height() * 0.02537f, group.left + group.width() * 0.46341f, group.top + group.height() * 0.02243f);
      bezierPath.cubicTo(group.left + group.width() * 0.46341f, group.top + group.height() * 0.01013f, group.left + group.width() * 0.47875f, group.top + group.height() * 0.00014f, group.left + group.width() * 0.49775f, group.top);
      bezierPath.lineTo(group.left + group.width() * 0.50217f, group.top + group.height() * 0.00014f);
      bezierPath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);

      // Bezier 2
      RectF bezier2Rect = CacheForLaneRight.bezier2Rect;
      bezier2Rect.set(0f, 6.03f, 11.03f, 23f);
      Path bezier2Path = CacheForLaneRight.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(group.left, group.top + group.height() * 1f);
      bezier2Path.lineTo(group.left + group.width() * 0.00417f, group.top + group.height() * 0.41572f);
      bezier2Path.cubicTo(group.left + group.width() * 0.00417f, group.top + group.height() * 0.41572f, group.left + group.width() * 0.02316f, group.top + group.height() * 0.26219f, group.left + group.width() * 0.26516f, group.top + group.height() * 0.26219f);
      bezier2Path.lineTo(group.left + group.width() * 0.74277f, group.top + group.height() * 0.26219f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier2Path, paint);
      canvas.restore();

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneRightOnly {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF group = new RectF();
    private static RectF rectangleRect = new RectF();
    private static Path rectanglePath = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
    private static RectF bezier3Rect = new RectF();
    private static Path bezier3Path = new Path();
  }

  public static void drawLaneRightOnly(Canvas canvas, int primaryColor, int secondaryColor, PointF size) {
    LanesStyleKit.drawLaneRightOnly(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, size);
  }

  public static void drawLaneRightOnly(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneRightOnly.paint;

    // Local Variables
    float expression = Math.min(size.x / 30f, size.y / 30f);

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneRightOnly.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneRightOnly.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneRightOnly.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      RectF group = CacheForLaneRightOnly.group;
      group.set(0f, 0f, 21.97f, 25f);
      canvas.save();
      canvas.translate(5f, 2f);
      currentTransformation.peek().postTranslate(5f, 2f);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Rectangle
      RectF rectangleRect = CacheForLaneRightOnly.rectangleRect;
      rectangleRect.set(4f, 9f, 8f, 25f);
      Path rectanglePath = CacheForLaneRightOnly.rectanglePath;
      rectanglePath.reset();
      rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
      rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
      rectanglePath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(secondaryColor);
      canvas.drawPath(rectanglePath, paint);

      // Bezier
      RectF bezierRect = CacheForLaneRightOnly.bezierRect;
      bezierRect.set(0f, 0f, 12.02f, 9.99f);
      Path bezierPath = CacheForLaneRightOnly.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(group.left + group.width() * 0.27386f, group.top + group.height() * 0.00011f);
      bezierPath.cubicTo(group.left + group.width() * 0.2756f, group.top + group.height() * 0.00224f, group.left + group.width() * 0.53413f, group.top + group.height() * 0.31865f, group.left + group.width() * 0.53965f, group.top + group.height() * 0.3254f);
      bezierPath.cubicTo(group.left + group.width() * 0.54425f, group.top + group.height() * 0.32928f, group.left + group.width() * 0.54702f, group.top + group.height() * 0.33472f, group.left + group.width() * 0.54702f, group.top + group.height() * 0.34063f);
      bezierPath.cubicTo(group.left + group.width() * 0.54702f, group.top + group.height() * 0.35203f, group.left + group.width() * 0.53651f, group.top + group.height() * 0.36123f, group.left + group.width() * 0.52354f, group.top + group.height() * 0.36123f);
      bezierPath.cubicTo(group.left + group.width() * 0.52046f, group.top + group.height() * 0.36123f, group.left + group.width() * 0.51752f, group.top + group.height() * 0.36073f, group.left + group.width() * 0.51483f, group.top + group.height() * 0.35977f);
      bezierPath.cubicTo(group.left + group.width() * 0.50959f, group.top + group.height() * 0.35807f, group.left + group.width() * 0.39573f, group.top + group.height() * 0.32173f, group.left + group.width() * 0.3908f, group.top + group.height() * 0.32016f);
      bezierPath.cubicTo(group.left + group.width() * 0.37325f, group.top + group.height() * 0.31999f, group.left + group.width() * 0.36451f, group.top + group.height() * 0.32935f, group.left + group.width() * 0.36451f, group.top + group.height() * 0.34099f);
      bezierPath.cubicTo(group.left + group.width() * 0.36451f, group.top + group.height() * 0.34361f, group.left + group.width() * 0.36434f, group.top + group.height() * 0.34642f, group.left + group.width() * 0.36433f, group.top + group.height() * 0.34883f);
      bezierPath.cubicTo(group.left + group.width() * 0.36425f, group.top + group.height() * 0.3521f, group.left + group.width() * 0.36447f, group.top + group.height() * 0.39943f, group.left + group.width() * 0.36447f, group.top + group.height() * 0.39943f);
      bezierPath.lineTo(group.left + group.width() * 0.18255f, group.top + group.height() * 0.39695f);
      bezierPath.cubicTo(group.left + group.width() * 0.18255f, group.top + group.height() * 0.39695f, group.left + group.width() * 0.18276f, group.top + group.height() * 0.34996f, group.left + group.width() * 0.18278f, group.top + group.height() * 0.34651f);
      bezierPath.cubicTo(group.left + group.width() * 0.18268f, group.top + group.height() * 0.34391f, group.left + group.width() * 0.18251f, group.top + group.height() * 0.34112f, group.left + group.width() * 0.18251f, group.top + group.height() * 0.33851f);
      bezierPath.cubicTo(group.left + group.width() * 0.18251f, group.top + group.height() * 0.32687f, group.left + group.width() * 0.17377f, group.top + group.height() * 0.31751f, group.left + group.width() * 0.16052f, group.top + group.height() * 0.31751f);
      bezierPath.cubicTo(group.left + group.width() * 0.15129f, group.top + group.height() * 0.31925f, group.left + group.width() * 0.03743f, group.top + group.height() * 0.35559f, group.left + group.width() * 0.03235f, group.top + group.height() * 0.35721f);
      bezierPath.cubicTo(group.left + group.width() * 0.0295f, group.top + group.height() * 0.35821f, group.left + group.width() * 0.02656f, group.top + group.height() * 0.35875f, group.left + group.width() * 0.02348f, group.top + group.height() * 0.35875f);
      bezierPath.cubicTo(group.left + group.width() * 0.0106f, group.top + group.height() * 0.35875f, group.left + group.width() * 0.00014f, group.top + group.height() * 0.34964f, group.left, group.top + group.height() * 0.33835f);
      bezierPath.cubicTo(group.left + group.width() * 0.00007f, group.top + group.height() * 0.33206f, group.left + group.width() * 0.00283f, group.top + group.height() * 0.32675f, group.left + group.width() * 0.0073f, group.top + group.height() * 0.32305f);
      bezierPath.cubicTo(group.left + group.width() * 0.01291f, group.top + group.height() * 0.3162f, group.left + group.width() * 0.27191f, group.top + group.height() * 0.00224f, group.left + group.width() * 0.27375f, group.top);
      bezierPath.lineTo(group.left + group.width() * 0.27386f, group.top + group.height() * 0.00011f);
      bezierPath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(secondaryColor);
      canvas.drawPath(bezierPath, paint);

      // Bezier 2
      RectF bezier2Rect = CacheForLaneRightOnly.bezier2Rect;
      bezier2Rect.set(12.99f, 8.58f, 21.97f, 20.6f);
      Path bezier2Path = CacheForLaneRightOnly.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(group.left + group.width() * 0.59384f, group.top + group.height() * 0.50353f);
      bezier2Path.lineTo(group.left + group.width() * 0.65146f, group.top + group.height() * 0.50373f);
      bezier2Path.lineTo(group.left + group.width() * 0.65123f, group.top + group.height() * 0.50365f);
      bezier2Path.cubicTo(group.left + group.width() * 0.65401f, group.top + group.height() * 0.50365f, group.left + group.width() * 0.65729f, group.top + group.height() * 0.50349f, group.left + group.width() * 0.66034f, group.top + group.height() * 0.50349f);
      bezier2Path.cubicTo(group.left + group.width() * 0.67358f, group.top + group.height() * 0.50349f, group.left + group.width() * 0.68423f, group.top + group.height() * 0.49581f, group.left + group.width() * 0.68423f, group.top + group.height() * 0.48417f);
      bezier2Path.cubicTo(group.left + group.width() * 0.68423f, group.top + group.height() * 0.48297f, group.left + group.width() * 0.68418f, group.top + group.height() * 0.48153f, group.left + group.width() * 0.68396f, group.top + group.height() * 0.48041f);
      bezier2Path.lineTo(group.left + group.width() * 0.68409f, group.top + group.height() * 0.48053f);
      bezier2Path.lineTo(group.left + group.width() * 0.63899f, group.top + group.height() * 0.37137f);
      bezier2Path.lineTo(group.left + group.width() * 0.63904f, group.top + group.height() * 0.37153f);
      bezier2Path.cubicTo(group.left + group.width() * 0.63794f, group.top + group.height() * 0.36913f, group.left + group.width() * 0.63731f, group.top + group.height() * 0.36649f, group.left + group.width() * 0.63731f, group.top + group.height() * 0.36373f);
      bezier2Path.cubicTo(group.left + group.width() * 0.63731f, group.top + group.height() * 0.35233f, group.left + group.width() * 0.64782f, group.top + group.height() * 0.34309f, group.left + group.width() * 0.66079f, group.top + group.height() * 0.34309f);
      bezier2Path.cubicTo(group.left + group.width() * 0.66757f, group.top + group.height() * 0.34309f, group.left + group.width() * 0.67376f, group.top + group.height() * 0.34557f, group.left + group.width() * 0.67804f, group.top + group.height() * 0.34961f);
      bezier2Path.lineTo(group.left + group.width() * 0.67795f, group.top + group.height() * 0.34949f);
      bezier2Path.lineTo(group.left + group.width() * 1f, group.top + group.height() * 0.58369f);
      bezier2Path.lineTo(group.left + group.width() * 0.67513f, group.top + group.height() * 0.81745f);
      bezier2Path.lineTo(group.left + group.width() * 0.67522f, group.top + group.height() * 0.81733f);
      bezier2Path.cubicTo(group.left + group.width() * 0.67094f, group.top + group.height() * 0.82137f, group.left + group.width() * 0.6647f, group.top + group.height() * 0.82385f, group.left + group.width() * 0.65792f, group.top + group.height() * 0.82385f);
      bezier2Path.cubicTo(group.left + group.width() * 0.64495f, group.top + group.height() * 0.82385f, group.left + group.width() * 0.63448f, group.top + group.height() * 0.81461f, group.left + group.width() * 0.63448f, group.top + group.height() * 0.80321f);
      bezier2Path.cubicTo(group.left + group.width() * 0.63448f, group.top + group.height() * 0.80045f, group.left + group.width() * 0.63508f, group.top + group.height() * 0.79781f, group.left + group.width() * 0.63621f, group.top + group.height() * 0.79541f);
      bezier2Path.lineTo(group.left + group.width() * 0.63617f, group.top + group.height() * 0.79557f);
      bezier2Path.lineTo(group.left + group.width() * 0.68127f, group.top + group.height() * 0.68641f);
      bezier2Path.lineTo(group.left + group.width() * 0.68113f, group.top + group.height() * 0.68653f);
      bezier2Path.cubicTo(group.left + group.width() * 0.68132f, group.top + group.height() * 0.68541f, group.left + group.width() * 0.68141f, group.top + group.height() * 0.68397f, group.left + group.width() * 0.68141f, group.top + group.height() * 0.68277f);
      bezier2Path.cubicTo(group.left + group.width() * 0.68141f, group.top + group.height() * 0.67113f, group.left + group.width() * 0.67076f, group.top + group.height() * 0.66345f, group.left + group.width() * 0.65751f, group.top + group.height() * 0.66345f);
      bezier2Path.cubicTo(group.left + group.width() * 0.65446f, group.top + group.height() * 0.66345f, group.left + group.width() * 0.65119f, group.top + group.height() * 0.66329f, group.left + group.width() * 0.64841f, group.top + group.height() * 0.66329f);
      bezier2Path.lineTo(group.left + group.width() * 0.64859f, group.top + group.height() * 0.66321f);
      bezier2Path.lineTo(group.left + group.width() * 0.59102f, group.top + group.height() * 0.66341f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezier2Path.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier2Path, paint);

      // Bezier 3
      RectF bezier3Rect = CacheForLaneRightOnly.bezier3Rect;
      bezier3Rect.set(6.03f, 14.61f, 15.03f, 25f);
      Path bezier3Path = CacheForLaneRightOnly.bezier3Path;
      bezier3Path.reset();
      bezier3Path.moveTo(group.left + group.width() * 0.27429f, group.top + group.height());
      bezier3Path.lineTo(group.left + group.width() * 0.27429f, group.top + group.height() * 0.83475f);
      bezier3Path.cubicTo(group.left + group.width() * 0.27429f, group.top + group.height() * 0.76907f, group.left + group.width() * 0.30633f, group.top + group.height() * 0.70583f, group.left + group.width() * 0.36427f, group.top + group.height() * 0.66431f);
      bezier3Path.cubicTo(group.left + group.width() * 0.42007f, group.top + group.height() * 0.62431f, group.left + group.width() * 0.49758f, group.top + group.height() * 0.58431f, group.left + group.width() * 0.58433f, group.top + group.height() * 0.58431f);
      bezier3Path.lineTo(group.left + group.width() * 0.68391f, group.top + group.height() * 0.58431f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier3Path, paint);
      canvas.restore();

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneStraight {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF group = new RectF();
    private static RectF rectangleRect = new RectF();
    private static Path rectanglePath = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
  }

  public static void drawLaneStraight(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneStraight(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneStraight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneStraight.paint;

    // Local Variables
    float expression = Math.min(size.x / 30f, size.y / 30f);

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneStraight.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneStraight.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneStraight.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      RectF group = CacheForLaneStraight.group;
      group.set(0f, 0f, 12.02f, 24f);
      canvas.save();
      canvas.translate(9f, 3f);
      currentTransformation.peek().postTranslate(9f, 3f);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Rectangle
      RectF rectangleRect = CacheForLaneStraight.rectangleRect;
      rectangleRect.set(4f, 8f, 8f, 24f);
      Path rectanglePath = CacheForLaneStraight.rectanglePath;
      rectanglePath.reset();
      rectanglePath.addRect(rectangleRect, Path.Direction.CW);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(rectanglePath, paint);

      // Bezier
      RectF bezierRect = CacheForLaneStraight.bezierRect;
      bezierRect.set(0f, 0f, 12.02f, 9.99f);
      Path bezierPath = CacheForLaneStraight.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(group.left + group.width() * 0.33372f, group.top + group.height() * 0.4135f);
      bezierPath.lineTo(group.left + group.width() * 0.33414f, group.top + group.height() * 0.36075f);
      bezierPath.lineTo(group.left + group.width() * 0.33397f, group.top + group.height() * 0.36096f);
      bezierPath.cubicTo(group.left + group.width() * 0.33397f, group.top + group.height() * 0.35842f, group.left + group.width() * 0.33364f, group.top + group.height() * 0.35542f, group.left + group.width() * 0.33364f, group.top + group.height() * 0.35262f);
      bezierPath.cubicTo(group.left + group.width() * 0.33364f, group.top + group.height() * 0.3405f, group.left + group.width() * 0.31766f, group.top + group.height() * 0.33075f, group.left + group.width() * 0.29345f, group.top + group.height() * 0.33075f);
      bezierPath.cubicTo(group.left + group.width() * 0.29096f, group.top + group.height() * 0.33075f, group.left + group.width() * 0.28796f, group.top + group.height() * 0.33079f, group.left + group.width() * 0.28563f, group.top + group.height() * 0.331f);
      bezierPath.lineTo(group.left + group.width() * 0.28588f, group.top + group.height() * 0.33087f);
      bezierPath.lineTo(group.left + group.width() * 0.05882f, group.top + group.height() * 0.37217f);
      bezierPath.lineTo(group.left + group.width() * 0.05916f, group.top + group.height() * 0.37212f);
      bezierPath.cubicTo(group.left + group.width() * 0.05416f, group.top + group.height() * 0.37312f, group.left + group.width() * 0.04867f, group.top + group.height() * 0.37371f, group.left + group.width() * 0.04293f, group.top + group.height() * 0.37371f);
      bezierPath.cubicTo(group.left + group.width() * 0.01922f, group.top + group.height() * 0.37371f, group.left, group.top + group.height() * 0.36408f, group.left, group.top + group.height() * 0.35221f);
      bezierPath.cubicTo(group.left, group.top + group.height() * 0.346f, group.left + group.width() * 0.00516f, group.top + group.height() * 0.34033f, group.left + group.width() * 0.01356f, group.top + group.height() * 0.33642f);
      bezierPath.lineTo(group.left + group.width() * 0.01331f, group.top + group.height() * 0.3365f);
      bezierPath.lineTo(group.left + group.width() * 0.50046f, group.top);
      bezierPath.lineTo(group.left + group.width() * 0.98669f, group.top + group.height() * 0.33908f);
      bezierPath.lineTo(group.left + group.width() * 0.98644f, group.top + group.height() * 0.339f);
      bezierPath.cubicTo(group.left + group.width() * 0.99484f, group.top + group.height() * 0.34292f, group.left + group.width(), group.top + group.height() * 0.34862f, group.left + group.width(), group.top + group.height() * 0.35483f);
      bezierPath.cubicTo(group.left + group.width(), group.top + group.height() * 0.36671f, group.left + group.width() * 0.98078f, group.top + group.height() * 0.37629f, group.left + group.width() * 0.95707f, group.top + group.height() * 0.37629f);
      bezierPath.cubicTo(group.left + group.width() * 0.95133f, group.top + group.height() * 0.37629f, group.left + group.width() * 0.94584f, group.top + group.height() * 0.37575f, group.left + group.width() * 0.94084f, group.top + group.height() * 0.37471f);
      bezierPath.lineTo(group.left + group.width() * 0.94118f, group.top + group.height() * 0.37475f);
      bezierPath.lineTo(group.left + group.width() * 0.71412f, group.top + group.height() * 0.33346f);
      bezierPath.lineTo(group.left + group.width() * 0.71437f, group.top + group.height() * 0.33358f);
      bezierPath.cubicTo(group.left + group.width() * 0.71204f, group.top + group.height() * 0.33342f, group.left + group.width() * 0.70904f, group.top + group.height() * 0.33333f, group.left + group.width() * 0.70655f, group.top + group.height() * 0.33333f);
      bezierPath.cubicTo(group.left + group.width() * 0.68234f, group.top + group.height() * 0.33333f, group.left + group.width() * 0.66636f, group.top + group.height() * 0.34308f, group.left + group.width() * 0.66636f, group.top + group.height() * 0.35521f);
      bezierPath.cubicTo(group.left + group.width() * 0.66636f, group.top + group.height() * 0.358f, group.left + group.width() * 0.66603f, group.top + group.height() * 0.361f, group.left + group.width() * 0.66603f, group.top + group.height() * 0.36354f);
      bezierPath.lineTo(group.left + group.width() * 0.66586f, group.top + group.height() * 0.36338f);
      bezierPath.lineTo(group.left + group.width() * 0.66628f, group.top + group.height() * 0.41608f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezierPath.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneUturn {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF group = new RectF();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
  }

  public static void drawLaneUturn(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneUturn(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneUturn(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneUturn.paint;

    // Local Variables
    float expression = Math.min(size.x / 30f, size.y / 30f);

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneUturn.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneUturn.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneUturn.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      RectF group = CacheForLaneUturn.group;
      group.set(0f, 0f, 16f, 22f);
      canvas.save();
      canvas.translate(9f, 5f);
      currentTransformation.peek().postTranslate(9f, 5f);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Bezier
      RectF bezierRect = CacheForLaneUturn.bezierRect;
      bezierRect.set(0f, 0f, 10f, 22f);
      Path bezierPath = CacheForLaneUturn.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(group.left + group.width() * 0.62498f, group.top + group.height() * 0.68182f);
      bezierPath.lineTo(group.left + group.width() * 0.62498f, group.top + group.height() * 0.28459f);
      bezierPath.cubicTo(group.left + group.width() * 0.62498f, group.top + group.height() * 0.20995f, group.left + group.width() * 0.62498f, group.top, group.left + group.width() * 0.31249f, group.top);
      bezierPath.cubicTo(group.left, group.top, group.left, group.top + group.height() * 0.27273f, group.left, group.top + group.height() * 0.27273f);
      bezierPath.lineTo(group.left, group.top + group.height());

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);
      canvas.restore();

      // Bezier 2
      RectF bezier2Rect = CacheForLaneUturn.bezier2Rect;
      bezier2Rect.set(4.01f, 12.99f, 16f, 21.97f);
      Path bezier2Path = CacheForLaneUturn.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(group.left + group.width() * 0.75119f, group.top + group.height() * 0.59306f);
      bezier2Path.cubicTo(group.left + group.width() * 0.75119f, group.top + group.height() * 0.59306f, group.left + group.width() * 0.7509f, group.top + group.height() * 0.64646f, group.left + group.width() * 0.75088f, group.top + group.height() * 0.65038f);
      bezier2Path.cubicTo(group.left + group.width() * 0.75102f, group.top + group.height() * 0.65333f, group.left + group.width() * 0.75125f, group.top + group.height() * 0.65651f, group.left + group.width() * 0.75125f, group.top + group.height() * 0.65947f);
      bezier2Path.cubicTo(group.left + group.width() * 0.75125f, group.top + group.height() * 0.6727f, group.left + group.width() * 0.76325f, group.top + group.height() * 0.68334f, group.left + group.width() * 0.78144f, group.top + group.height() * 0.68334f);
      bezier2Path.cubicTo(group.left + group.width() * 0.79411f, group.top + group.height() * 0.68135f, group.left + group.width() * 0.95046f, group.top + group.height() * 0.64006f, group.left + group.width() * 0.95744f, group.top + group.height() * 0.63822f);
      bezier2Path.cubicTo(group.left + group.width() * 0.96136f, group.top + group.height() * 0.63708f, group.left + group.width() * 0.9654f, group.top + group.height() * 0.63647f, group.left + group.width() * 0.96962f, group.top + group.height() * 0.63647f);
      bezier2Path.cubicTo(group.left + group.width() * 0.98363f, group.top + group.height() * 0.63647f, group.left + group.width() * 0.99555f, group.top + group.height() * 0.64296f, group.left + group.width() * 1f, group.top + group.height() * 0.65204f);
      bezier2Path.lineTo(group.left + group.width() * 0.99996f, group.top + group.height() * 0.65989f);
      bezier2Path.lineTo(group.left + group.width() * 0.99996f, group.top + group.height() * 0.6679f);
      bezier2Path.cubicTo(group.left + group.width() * 0.99829f, group.top + group.height() * 0.67142f, group.left + group.width() * 0.99548f, group.top + group.height() * 0.67455f, group.left + group.width() * 0.99185f, group.top + group.height() * 0.67704f);
      bezier2Path.cubicTo(group.left + group.width() * 0.98369f, group.top + group.height() * 0.68425f, group.left + group.width() * 0.62595f, group.top + group.height() * 0.9987f, group.left + group.width() * 0.62595f, group.top + group.height() * 0.9987f);
      bezier2Path.cubicTo(group.left + group.width() * 0.62595f, group.top + group.height() * 0.9987f, group.left + group.width() * 0.49849f, group.top + group.height() * 0.88548f, group.left + group.width() * 0.39416f, group.top + group.height() * 0.7928f);
      bezier2Path.cubicTo(group.left + group.width() * 0.32387f, group.top + group.height() * 0.73035f, group.left + group.width() * 0.26407f, group.top + group.height() * 0.67723f, group.left + group.width() * 0.26085f, group.top + group.height() * 0.67437f);
      bezier2Path.cubicTo(group.left + group.width() * 0.25452f, group.top + group.height() * 0.66996f, group.left + group.width() * 0.25071f, group.top + group.height() * 0.66378f, group.left + group.width() * 0.25071f, group.top + group.height() * 0.65706f);
      bezier2Path.cubicTo(group.left + group.width() * 0.25071f, group.top + group.height() * 0.64411f, group.left + group.width() * 0.26515f, group.top + group.height() * 0.63365f, group.left + group.width() * 0.28296f, group.top + group.height() * 0.63365f);
      bezier2Path.cubicTo(group.left + group.width() * 0.28718f, group.top + group.height() * 0.63365f, group.left + group.width() * 0.29122f, group.top + group.height() * 0.63422f, group.left + group.width() * 0.29491f, group.top + group.height() * 0.63531f);
      bezier2Path.cubicTo(group.left + group.width() * 0.30212f, group.top + group.height() * 0.63724f, group.left + group.width() * 0.45847f, group.top + group.height() * 0.67854f, group.left + group.width() * 0.46523f, group.top + group.height() * 0.68032f);
      bezier2Path.cubicTo(group.left + group.width() * 0.48933f, group.top + group.height() * 0.68052f, group.left + group.width() * 0.50133f, group.top + group.height() * 0.66988f, group.left + group.width() * 0.50133f, group.top + group.height() * 0.65665f);
      bezier2Path.cubicTo(group.left + group.width() * 0.50133f, group.top + group.height() * 0.65368f, group.left + group.width() * 0.50157f, group.top + group.height() * 0.65048f, group.left + group.width() * 0.50158f, group.top + group.height() * 0.64775f);
      bezier2Path.cubicTo(group.left + group.width() * 0.50168f, group.top + group.height() * 0.64403f, group.left + group.width() * 0.50139f, group.top + group.height() * 0.59025f, group.left + group.width() * 0.50139f, group.top + group.height() * 0.59025f);
      bezier2Path.lineTo(group.left + group.width() * 0.75119f, group.top + group.height() * 0.59306f);
      bezier2Path.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier2Path, paint);

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneSlightRight {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF bezier3Rect = new RectF();
    private static Path bezier3Path = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
  }

  public static void drawLaneSlightRight(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneSlightRight(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneSlightRight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneSlightRight.paint;

    // Local Variables
    float expression = Math.min(size.x / 30f, size.y / 30f);

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneSlightRight.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneSlightRight.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneSlightRight.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      canvas.save();
      canvas.translate(9.28f, -0.86f);
      currentTransformation.peek().postTranslate(9.28f, -0.86f);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Bezier 3
      RectF bezier3Rect = CacheForLaneSlightRight.bezier3Rect;
      bezier3Rect.set(0f, 10.61f, 7.17f, 27.6f);
      Path bezier3Path = CacheForLaneSlightRight.bezier3Path;
      bezier3Path.reset();
      bezier3Path.moveTo(7.17f, 10.61f);
      bezier3Path.lineTo(1.47f, 15.89f);
      bezier3Path.cubicTo(0.6f, 17.21f, 0f, 18.82f, 0f, 20.47f);
      bezier3Path.lineTo(0f, 27.6f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeJoin(Paint.Join.ROUND);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier3Path, paint);
      canvas.restore();

      // Bezier
      canvas.save();
      canvas.translate(10.25f, 0f);
      currentTransformation.peek().postTranslate(10.25f, 0f);
      canvas.rotate(49f);
      currentTransformation.peek().postRotate(49f);
      RectF bezierRect = CacheForLaneSlightRight.bezierRect;
      bezierRect.set(0f, 0f, 12.02f, 9.99f);
      Path bezierPath = CacheForLaneSlightRight.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(4.01f, 9.92f);
      bezierPath.lineTo(4.02f, 8.66f);
      bezierPath.lineTo(4.01f, 8.66f);
      bezierPath.cubicTo(4.01f, 8.6f, 4.01f, 8.53f, 4.01f, 8.46f);
      bezierPath.cubicTo(4.01f, 8.17f, 3.82f, 7.94f, 3.53f, 7.94f);
      bezierPath.cubicTo(3.5f, 7.94f, 3.46f, 7.94f, 3.43f, 7.94f);
      bezierPath.lineTo(3.44f, 7.94f);
      bezierPath.lineTo(0.71f, 8.93f);
      bezierPath.lineTo(0.71f, 8.93f);
      bezierPath.cubicTo(0.65f, 8.96f, 0.58f, 8.97f, 0.52f, 8.97f);
      bezierPath.cubicTo(0.23f, 8.97f, 0f, 8.74f, 0f, 8.45f);
      bezierPath.cubicTo(0f, 8.3f, 0.06f, 8.17f, 0.16f, 8.07f);
      bezierPath.lineTo(0.16f, 8.08f);
      bezierPath.lineTo(6.02f, 0f);
      bezierPath.lineTo(11.86f, 8.14f);
      bezierPath.lineTo(11.86f, 8.14f);
      bezierPath.cubicTo(11.96f, 8.23f, 12.02f, 8.37f, 12.02f, 8.52f);
      bezierPath.cubicTo(12.02f, 8.8f, 11.79f, 9.03f, 11.5f, 9.03f);
      bezierPath.cubicTo(11.43f, 9.03f, 11.37f, 9.02f, 11.31f, 8.99f);
      bezierPath.lineTo(11.31f, 8.99f);
      bezierPath.lineTo(8.58f, 8f);
      bezierPath.lineTo(8.59f, 8.01f);
      bezierPath.cubicTo(8.56f, 8f, 8.52f, 8f, 8.49f, 8f);
      bezierPath.cubicTo(8.2f, 8f, 8.01f, 8.23f, 8.01f, 8.53f);
      bezierPath.cubicTo(8.01f, 8.59f, 8f, 8.66f, 8f, 8.73f);
      bezierPath.lineTo(8f, 8.72f);
      bezierPath.lineTo(8.01f, 9.99f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezierPath.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);
      canvas.restore();

      canvas.restore();
    }

    canvas.restore();
  }


  // Resizing Behavior
  public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
    if (rect.equals(target) || target == null) {
      result.set(rect);
      return;
    }

    if (behavior == ResizingBehavior.Stretch) {
      result.set(target);
      return;
    }

    float xRatio = Math.abs(target.width() / rect.width());
    float yRatio = Math.abs(target.height() / rect.height());
    float scale = 0f;

    switch (behavior) {
      case AspectFit: {
        scale = Math.min(xRatio, yRatio);
        break;
      }
      case AspectFill: {
        scale = Math.max(xRatio, yRatio);
        break;
      }
      case Center: {
        scale = 1f;
        break;
      }
      default:
        break;
    }

    float newWidth = Math.abs(rect.width() * scale);
    float newHeight = Math.abs(rect.height() * scale);
    result.set(target.centerX() - newWidth / 2,
      target.centerY() - newHeight / 2,
      target.centerX() + newWidth / 2,
      target.centerY() + newHeight / 2);
  }


}