package com.mapbox.services.android.navigation.ui.v5.instruction.turnlane;

import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PointF;
import android.graphics.RectF;

import java.util.Stack;


/**
 * Created on Nov 10, 2017.
 * Copyright Â© 2017 Mapbox. All rights reserved.
 * <p>
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 */
public class LanesStyleKit {


  // Resizing Behavior
  public enum ResizingBehavior {
    AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
    AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
    Stretch, //!< The content is stretched to match the entire target rectangle.
    Center, //!< The content is centered in the target rectangle, but it is NOT resized.
  }

  // Canvas Drawings
  // Tab

  private static class CacheForLaneStraightRight {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF rectangleRect = new RectF();
    private static Path rectanglePath = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
    private static RectF bezier3Rect = new RectF();
    private static Path bezier3Path = new Path();
  }

  public static void drawLaneStraightRight(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneStraightRight(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneStraightRight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneStraightRight.paint;

    // Local Variables
    float y = size.y / 2f;
    float expression = Math.min(size.x / 30f, size.y / 30f);
    float x = size.x / 2f;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneStraightRight.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneStraightRight.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneStraightRight.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      canvas.save();
      canvas.translate(x, y);
      currentTransformation.peek().postTranslate(x, y);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Rectangle
      RectF rectangleRect = CacheForLaneStraightRight.rectangleRect;
      rectangleRect.set(-6f, -3f, -2f, 12.5f);
      Path rectanglePath = CacheForLaneStraightRight.rectanglePath;
      rectanglePath.reset();
      rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
      rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
      rectanglePath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(rectanglePath, paint);

      // Bezier
      RectF bezierRect = CacheForLaneStraightRight.bezierRect;
      bezierRect.set(-10f, -12.5f, 2.02f, -2.51f);
      Path bezierPath = CacheForLaneStraightRight.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(-3.98f, -12.5f);
      bezierPath.cubicTo(-3.94f, -12.44f, 1.74f, -4.53f, 1.86f, -4.37f);
      bezierPath.cubicTo(1.96f, -4.27f, 2.02f, -4.13f, 2.02f, -3.98f);
      bezierPath.cubicTo(2.02f, -3.7f, 1.79f, -3.47f, 1.5f, -3.47f);
      bezierPath.cubicTo(1.44f, -3.47f, 1.37f, -3.48f, 1.31f, -3.51f);
      bezierPath.cubicTo(1.2f, -3.55f, -1.31f, -4.46f, -1.41f, -4.5f);
      bezierPath.cubicTo(-1.8f, -4.5f, -1.99f, -4.27f, -1.99f, -3.98f);
      bezierPath.cubicTo(-1.99f, -3.91f, -1.99f, -3.84f, -2f, -3.78f);
      bezierPath.cubicTo(-2f, -3.7f, -1.99f, -2.51f, -1.99f, -2.51f);
      bezierPath.lineTo(-5.99f, -2.58f);
      bezierPath.cubicTo(-5.99f, -2.58f, -5.98f, -3.75f, -5.98f, -3.84f);
      bezierPath.cubicTo(-5.99f, -3.9f, -5.99f, -3.97f, -5.99f, -4.04f);
      bezierPath.cubicTo(-5.99f, -4.33f, -6.18f, -4.56f, -6.47f, -4.56f);
      bezierPath.cubicTo(-6.68f, -4.52f, -9.18f, -3.61f, -9.29f, -3.57f);
      bezierPath.cubicTo(-9.35f, -3.54f, -9.42f, -3.53f, -9.48f, -3.53f);
      bezierPath.cubicTo(-9.77f, -3.53f, -10f, -3.76f, -10f, -4.04f);
      bezierPath.cubicTo(-10f, -4.2f, -9.94f, -4.33f, -9.84f, -4.42f);
      bezierPath.cubicTo(-9.72f, -4.6f, -4.03f, -12.44f, -3.99f, -12.5f);
      bezierPath.lineTo(-3.98f, -12.5f);
      bezierPath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);

      // Bezier 2
      RectF bezier2Rect = CacheForLaneStraightRight.bezier2Rect;
      bezier2Rect.set(2.99f, -3.92f, 11.97f, 8.1f);
      Path bezier2Path = CacheForLaneStraightRight.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(3.05f, 0.09f);
      bezier2Path.lineTo(4.31f, 0.09f);
      bezier2Path.lineTo(4.31f, 0.09f);
      bezier2Path.cubicTo(4.37f, 0.09f, 4.44f, 0.09f, 4.51f, 0.09f);
      bezier2Path.cubicTo(4.8f, 0.09f, 5.03f, -0.1f, 5.03f, -0.4f);
      bezier2Path.cubicTo(5.03f, -0.43f, 5.03f, -0.46f, 5.03f, -0.49f);
      bezier2Path.lineTo(5.03f, -0.49f);
      bezier2Path.lineTo(4.04f, -3.22f);
      bezier2Path.lineTo(4.04f, -3.21f);
      bezier2Path.cubicTo(4.02f, -3.27f, 4f, -3.34f, 4f, -3.41f);
      bezier2Path.cubicTo(4f, -3.69f, 4.23f, -3.92f, 4.52f, -3.92f);
      bezier2Path.cubicTo(4.67f, -3.92f, 4.8f, -3.86f, 4.9f, -3.76f);
      bezier2Path.lineTo(4.9f, -3.76f);
      bezier2Path.lineTo(11.97f, 2.09f);
      bezier2Path.lineTo(4.83f, 7.94f);
      bezier2Path.lineTo(4.84f, 7.93f);
      bezier2Path.cubicTo(4.74f, 8.03f, 4.6f, 8.1f, 4.46f, 8.1f);
      bezier2Path.cubicTo(4.17f, 8.1f, 3.94f, 7.87f, 3.94f, 7.58f);
      bezier2Path.cubicTo(3.94f, 7.51f, 3.95f, 7.45f, 3.98f, 7.39f);
      bezier2Path.lineTo(3.98f, 7.39f);
      bezier2Path.lineTo(4.97f, 4.66f);
      bezier2Path.lineTo(4.97f, 4.66f);
      bezier2Path.cubicTo(4.97f, 4.64f, 4.97f, 4.6f, 4.97f, 4.57f);
      bezier2Path.cubicTo(4.97f, 4.28f, 4.74f, 4.09f, 4.45f, 4.09f);
      bezier2Path.cubicTo(4.38f, 4.09f, 4.31f, 4.08f, 4.25f, 4.08f);
      bezier2Path.lineTo(4.25f, 4.08f);
      bezier2Path.lineTo(2.99f, 4.09f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezier2Path.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier2Path, paint);

      // Bezier 3
      RectF bezier3Rect = CacheForLaneStraightRight.bezier3Rect;
      bezier3Rect.set(-3.97f, 2.11f, 5.03f, 12.5f);
      Path bezier3Path = CacheForLaneStraightRight.bezier3Path;
      bezier3Path.reset();
      bezier3Path.moveTo(-3.97f, 12.5f);
      bezier3Path.lineTo(-3.97f, 8.37f);
      bezier3Path.cubicTo(-3.97f, 6.73f, -3.27f, 5.15f, -2f, 4.11f);
      bezier3Path.cubicTo(-0.77f, 3.11f, 0.93f, 2.11f, 2.84f, 2.11f);
      bezier3Path.lineTo(5.03f, 2.11f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier3Path, paint);
      canvas.restore();

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneStraightOnly {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
    private static RectF bezier3Rect = new RectF();
    private static Path bezier3Path = new Path();
    private static RectF rectangleRect = new RectF();
    private static Path rectanglePath = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
  }

  public static void drawLaneStraightOnly(Canvas canvas, int primaryColor, int secondaryColor, PointF size) {
    LanesStyleKit.drawLaneStraightOnly(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, size);
  }

  public static void drawLaneStraightOnly(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneStraightOnly.paint;

    // Local Variables
    float y = size.y / 2f;
    float expression = Math.min(size.x / 30f, size.y / 30f);
    float x = size.x / 2f;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneStraightOnly.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneStraightOnly.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneStraightOnly.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      canvas.save();
      canvas.translate(x, y);
      currentTransformation.peek().postTranslate(x, y);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Bezier 2
      RectF bezier2Rect = CacheForLaneStraightOnly.bezier2Rect;
      bezier2Rect.set(2.99f, -3.92f, 11.97f, 8.1f);
      Path bezier2Path = CacheForLaneStraightOnly.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(3.05f, 0.09f);
      bezier2Path.lineTo(4.31f, 0.09f);
      bezier2Path.lineTo(4.31f, 0.09f);
      bezier2Path.cubicTo(4.37f, 0.09f, 4.44f, 0.09f, 4.51f, 0.09f);
      bezier2Path.cubicTo(4.8f, 0.09f, 5.03f, -0.1f, 5.03f, -0.4f);
      bezier2Path.cubicTo(5.03f, -0.43f, 5.03f, -0.46f, 5.03f, -0.49f);
      bezier2Path.lineTo(5.03f, -0.49f);
      bezier2Path.lineTo(4.04f, -3.22f);
      bezier2Path.lineTo(4.04f, -3.21f);
      bezier2Path.cubicTo(4.02f, -3.27f, 4f, -3.34f, 4f, -3.41f);
      bezier2Path.cubicTo(4f, -3.69f, 4.23f, -3.92f, 4.52f, -3.92f);
      bezier2Path.cubicTo(4.67f, -3.92f, 4.8f, -3.86f, 4.9f, -3.76f);
      bezier2Path.lineTo(4.9f, -3.76f);
      bezier2Path.lineTo(11.97f, 2.09f);
      bezier2Path.lineTo(4.83f, 7.94f);
      bezier2Path.lineTo(4.84f, 7.93f);
      bezier2Path.cubicTo(4.74f, 8.03f, 4.6f, 8.1f, 4.46f, 8.1f);
      bezier2Path.cubicTo(4.17f, 8.1f, 3.94f, 7.87f, 3.94f, 7.58f);
      bezier2Path.cubicTo(3.94f, 7.51f, 3.95f, 7.45f, 3.98f, 7.39f);
      bezier2Path.lineTo(3.98f, 7.39f);
      bezier2Path.lineTo(4.97f, 4.66f);
      bezier2Path.lineTo(4.97f, 4.66f);
      bezier2Path.cubicTo(4.97f, 4.64f, 4.97f, 4.6f, 4.97f, 4.57f);
      bezier2Path.cubicTo(4.97f, 4.28f, 4.74f, 4.09f, 4.45f, 4.09f);
      bezier2Path.cubicTo(4.38f, 4.09f, 4.31f, 4.08f, 4.25f, 4.08f);
      bezier2Path.lineTo(4.25f, 4.08f);
      bezier2Path.lineTo(2.99f, 4.09f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezier2Path.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(secondaryColor);
      canvas.drawPath(bezier2Path, paint);

      // Bezier 3
      RectF bezier3Rect = CacheForLaneStraightOnly.bezier3Rect;
      bezier3Rect.set(-3.97f, 2.11f, 5.03f, 12.5f);
      Path bezier3Path = CacheForLaneStraightOnly.bezier3Path;
      bezier3Path.reset();
      bezier3Path.moveTo(-3.97f, 12.5f);
      bezier3Path.lineTo(-3.97f, 8.37f);
      bezier3Path.cubicTo(-3.97f, 6.73f, -3.27f, 5.15f, -2f, 4.11f);
      bezier3Path.cubicTo(-0.77f, 3.11f, 0.93f, 2.11f, 2.84f, 2.11f);
      bezier3Path.lineTo(5.03f, 2.11f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(secondaryColor);
      canvas.drawPath(bezier3Path, paint);
      canvas.restore();

      // Rectangle
      RectF rectangleRect = CacheForLaneStraightOnly.rectangleRect;
      rectangleRect.set(-6f, -3.5f, -2f, 12.5f);
      Path rectanglePath = CacheForLaneStraightOnly.rectanglePath;
      rectanglePath.reset();
      rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
      rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
      rectanglePath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(rectanglePath, paint);

      // Bezier
      RectF bezierRect = CacheForLaneStraightOnly.bezierRect;
      bezierRect.set(-10f, -12.5f, 2.02f, -2.51f);
      Path bezierPath = CacheForLaneStraightOnly.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(-3.98f, -12.5f);
      bezierPath.cubicTo(-3.94f, -12.44f, 1.74f, -4.53f, 1.86f, -4.37f);
      bezierPath.cubicTo(1.96f, -4.27f, 2.02f, -4.13f, 2.02f, -3.98f);
      bezierPath.cubicTo(2.02f, -3.7f, 1.79f, -3.47f, 1.5f, -3.47f);
      bezierPath.cubicTo(1.44f, -3.47f, 1.37f, -3.48f, 1.31f, -3.51f);
      bezierPath.cubicTo(1.2f, -3.55f, -1.31f, -4.46f, -1.41f, -4.5f);
      bezierPath.cubicTo(-1.8f, -4.5f, -1.99f, -4.27f, -1.99f, -3.98f);
      bezierPath.cubicTo(-1.99f, -3.91f, -1.99f, -3.84f, -2f, -3.78f);
      bezierPath.cubicTo(-2f, -3.7f, -1.99f, -2.51f, -1.99f, -2.51f);
      bezierPath.lineTo(-5.99f, -2.58f);
      bezierPath.cubicTo(-5.99f, -2.58f, -5.98f, -3.75f, -5.98f, -3.84f);
      bezierPath.cubicTo(-5.99f, -3.9f, -5.99f, -3.97f, -5.99f, -4.04f);
      bezierPath.cubicTo(-5.99f, -4.33f, -6.18f, -4.56f, -6.47f, -4.56f);
      bezierPath.cubicTo(-6.68f, -4.52f, -9.18f, -3.61f, -9.29f, -3.57f);
      bezierPath.cubicTo(-9.35f, -3.54f, -9.42f, -3.53f, -9.48f, -3.53f);
      bezierPath.cubicTo(-9.77f, -3.53f, -10f, -3.76f, -10f, -4.04f);
      bezierPath.cubicTo(-10f, -4.2f, -9.94f, -4.33f, -9.84f, -4.42f);
      bezierPath.cubicTo(-9.72f, -4.6f, -4.03f, -12.44f, -3.99f, -12.5f);
      bezierPath.lineTo(-3.98f, -12.5f);
      bezierPath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneRight {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
  }

  public static void drawLaneRight(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneRight(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneRight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneRight.paint;

    // Local Variables
    float y = size.y / 2f;
    float expression = Math.min(size.x / 30f, size.y / 30f);
    float x = size.x / 2f;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneRight.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneRight.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneRight.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      canvas.save();
      canvas.translate(x, y);
      currentTransformation.peek().postTranslate(x, y);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Bezier
      RectF bezierRect = CacheForLaneRight.bezierRect;
      bezierRect.set(-0.13f, -10.5f, 8.85f, 1.52f);
      Path bezierPath = CacheForLaneRight.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(1.46f, -10.5f);
      bezierPath.cubicTo(1.55f, -10.5f, 1.68f, -10.44f, 1.77f, -10.34f);
      bezierPath.cubicTo(1.93f, -10.21f, 8.85f, -4.49f, 8.85f, -4.49f);
      bezierPath.cubicTo(8.85f, -4.49f, 1.87f, 1.23f, 1.72f, 1.36f);
      bezierPath.cubicTo(1.62f, 1.46f, 1.48f, 1.52f, 1.34f, 1.52f);
      bezierPath.cubicTo(1.05f, 1.52f, 0.82f, 1.29f, 0.82f, 1f);
      bezierPath.cubicTo(0.82f, 0.94f, 0.83f, 0.87f, 0.86f, 0.81f);
      bezierPath.cubicTo(0.9f, 0.7f, 1.81f, -1.81f, 1.85f, -1.91f);
      bezierPath.cubicTo(1.85f, -2.3f, 1.62f, -2.49f, 1.33f, -2.49f);
      bezierPath.cubicTo(1.26f, -2.49f, 1.19f, -2.49f, 1.13f, -2.5f);
      bezierPath.cubicTo(1.05f, -2.5f, -0.13f, -2.49f, -0.13f, -2.49f);
      bezierPath.lineTo(-0.07f, -6.49f);
      bezierPath.cubicTo(-0.07f, -6.49f, 1.1f, -6.48f, 1.19f, -6.48f);
      bezierPath.cubicTo(1.25f, -6.49f, 1.32f, -6.49f, 1.39f, -6.49f);
      bezierPath.cubicTo(1.68f, -6.49f, 1.91f, -6.68f, 1.91f, -6.97f);
      bezierPath.cubicTo(1.87f, -7.18f, 0.96f, -9.68f, 0.92f, -9.79f);
      bezierPath.cubicTo(0.9f, -9.85f, 0.88f, -9.92f, 0.88f, -9.98f);
      bezierPath.cubicTo(0.88f, -10.27f, 1.11f, -10.5f, 1.39f, -10.5f);
      bezierPath.lineTo(1.46f, -10.5f);
      bezierPath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);

      // Bezier 2
      RectF bezier2Rect = CacheForLaneRight.bezier2Rect;
      bezier2Rect.set(-6f, -4.47f, 5.03f, 12.5f);
      Path bezier2Path = CacheForLaneRight.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(-6f, 12.5f);
      bezier2Path.lineTo(-5.94f, -0.94f);
      bezier2Path.cubicTo(-5.94f, -0.94f, -5.66f, -4.47f, -2.06f, -4.47f);
      bezier2Path.lineTo(5.03f, -4.47f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier2Path, paint);
      canvas.restore();

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneRightOnly {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF rectangleRect = new RectF();
    private static Path rectanglePath = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
    private static RectF bezier3Rect = new RectF();
    private static Path bezier3Path = new Path();
  }

  public static void drawLaneRightOnly(Canvas canvas, int primaryColor, int secondaryColor, PointF size) {
    LanesStyleKit.drawLaneRightOnly(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, size);
  }

  public static void drawLaneRightOnly(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneRightOnly.paint;

    // Local Variables
    float y = size.y / 2f;
    float expression = Math.min(size.x / 30f, size.y / 30f);
    float x = size.x / 2f;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneRightOnly.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneRightOnly.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneRightOnly.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      canvas.save();
      canvas.translate(x, y);
      currentTransformation.peek().postTranslate(x, y);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Rectangle
      RectF rectangleRect = CacheForLaneRightOnly.rectangleRect;
      rectangleRect.set(-6f, -3.5f, -2f, 12.5f);
      Path rectanglePath = CacheForLaneRightOnly.rectanglePath;
      rectanglePath.reset();
      rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
      rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
      rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
      rectanglePath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(secondaryColor);
      canvas.drawPath(rectanglePath, paint);

      // Bezier
      RectF bezierRect = CacheForLaneRightOnly.bezierRect;
      bezierRect.set(-10f, -12.5f, 2.02f, -2.51f);
      Path bezierPath = CacheForLaneRightOnly.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(-3.98f, -12.5f);
      bezierPath.cubicTo(-3.94f, -12.44f, 1.74f, -4.53f, 1.86f, -4.37f);
      bezierPath.cubicTo(1.96f, -4.27f, 2.02f, -4.13f, 2.02f, -3.98f);
      bezierPath.cubicTo(2.02f, -3.7f, 1.79f, -3.47f, 1.5f, -3.47f);
      bezierPath.cubicTo(1.44f, -3.47f, 1.37f, -3.48f, 1.31f, -3.51f);
      bezierPath.cubicTo(1.2f, -3.55f, -1.31f, -4.46f, -1.41f, -4.5f);
      bezierPath.cubicTo(-1.8f, -4.5f, -1.99f, -4.27f, -1.99f, -3.98f);
      bezierPath.cubicTo(-1.99f, -3.91f, -1.99f, -3.84f, -2f, -3.78f);
      bezierPath.cubicTo(-2f, -3.7f, -1.99f, -2.51f, -1.99f, -2.51f);
      bezierPath.lineTo(-5.99f, -2.58f);
      bezierPath.cubicTo(-5.99f, -2.58f, -5.98f, -3.75f, -5.98f, -3.84f);
      bezierPath.cubicTo(-5.99f, -3.9f, -5.99f, -3.97f, -5.99f, -4.04f);
      bezierPath.cubicTo(-5.99f, -4.33f, -6.18f, -4.56f, -6.47f, -4.56f);
      bezierPath.cubicTo(-6.68f, -4.52f, -9.18f, -3.61f, -9.29f, -3.57f);
      bezierPath.cubicTo(-9.35f, -3.54f, -9.42f, -3.53f, -9.48f, -3.53f);
      bezierPath.cubicTo(-9.77f, -3.53f, -10f, -3.76f, -10f, -4.04f);
      bezierPath.cubicTo(-10f, -4.2f, -9.94f, -4.33f, -9.84f, -4.42f);
      bezierPath.cubicTo(-9.72f, -4.6f, -4.03f, -12.44f, -3.99f, -12.5f);
      bezierPath.lineTo(-3.98f, -12.5f);
      bezierPath.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(secondaryColor);
      canvas.drawPath(bezierPath, paint);

      // Bezier 2
      RectF bezier2Rect = CacheForLaneRightOnly.bezier2Rect;
      bezier2Rect.set(2.99f, -3.92f, 11.97f, 8.1f);
      Path bezier2Path = CacheForLaneRightOnly.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(3.05f, 0.09f);
      bezier2Path.lineTo(4.31f, 0.09f);
      bezier2Path.lineTo(4.31f, 0.09f);
      bezier2Path.cubicTo(4.37f, 0.09f, 4.44f, 0.09f, 4.51f, 0.09f);
      bezier2Path.cubicTo(4.8f, 0.09f, 5.03f, -0.1f, 5.03f, -0.4f);
      bezier2Path.cubicTo(5.03f, -0.43f, 5.03f, -0.46f, 5.03f, -0.49f);
      bezier2Path.lineTo(5.03f, -0.49f);
      bezier2Path.lineTo(4.04f, -3.22f);
      bezier2Path.lineTo(4.04f, -3.21f);
      bezier2Path.cubicTo(4.02f, -3.27f, 4f, -3.34f, 4f, -3.41f);
      bezier2Path.cubicTo(4f, -3.69f, 4.23f, -3.92f, 4.52f, -3.92f);
      bezier2Path.cubicTo(4.67f, -3.92f, 4.8f, -3.86f, 4.9f, -3.76f);
      bezier2Path.lineTo(4.9f, -3.76f);
      bezier2Path.lineTo(11.97f, 2.09f);
      bezier2Path.lineTo(4.83f, 7.94f);
      bezier2Path.lineTo(4.84f, 7.93f);
      bezier2Path.cubicTo(4.74f, 8.03f, 4.6f, 8.1f, 4.46f, 8.1f);
      bezier2Path.cubicTo(4.17f, 8.1f, 3.94f, 7.87f, 3.94f, 7.58f);
      bezier2Path.cubicTo(3.94f, 7.51f, 3.95f, 7.45f, 3.98f, 7.39f);
      bezier2Path.lineTo(3.98f, 7.39f);
      bezier2Path.lineTo(4.97f, 4.66f);
      bezier2Path.lineTo(4.97f, 4.66f);
      bezier2Path.cubicTo(4.97f, 4.64f, 4.97f, 4.6f, 4.97f, 4.57f);
      bezier2Path.cubicTo(4.97f, 4.28f, 4.74f, 4.09f, 4.45f, 4.09f);
      bezier2Path.cubicTo(4.38f, 4.09f, 4.31f, 4.08f, 4.25f, 4.08f);
      bezier2Path.lineTo(4.25f, 4.08f);
      bezier2Path.lineTo(2.99f, 4.09f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezier2Path.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier2Path, paint);

      // Bezier 3
      RectF bezier3Rect = CacheForLaneRightOnly.bezier3Rect;
      bezier3Rect.set(-3.97f, 2.11f, 5.03f, 12.5f);
      Path bezier3Path = CacheForLaneRightOnly.bezier3Path;
      bezier3Path.reset();
      bezier3Path.moveTo(-3.97f, 12.5f);
      bezier3Path.lineTo(-3.97f, 8.37f);
      bezier3Path.cubicTo(-3.97f, 6.73f, -3.27f, 5.15f, -2f, 4.11f);
      bezier3Path.cubicTo(-0.77f, 3.11f, 0.93f, 2.11f, 2.84f, 2.11f);
      bezier3Path.lineTo(5.03f, 2.11f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier3Path, paint);
      canvas.restore();

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneStraight {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF rectangleRect = new RectF();
    private static Path rectanglePath = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
  }

  public static void drawLaneStraight(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneStraight(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneStraight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneStraight.paint;

    // Local Variables
    float y = size.y / 2f;
    float expression = Math.min(size.x / 30f, size.y / 30f);
    float x = size.x / 2f;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneStraight.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneStraight.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneStraight.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      canvas.save();
      canvas.translate(x, y);
      currentTransformation.peek().postTranslate(x, y);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Rectangle
      RectF rectangleRect = CacheForLaneStraight.rectangleRect;
      rectangleRect.set(-2f, -4f, 2f, 12f);
      Path rectanglePath = CacheForLaneStraight.rectanglePath;
      rectanglePath.reset();
      rectanglePath.addRect(rectangleRect, Path.Direction.CW);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(rectanglePath, paint);

      // Bezier
      RectF bezierRect = CacheForLaneStraight.bezierRect;
      bezierRect.set(-6f, -12f, 6.02f, -2.01f);
      Path bezierPath = CacheForLaneStraight.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(-1.99f, -2.08f);
      bezierPath.lineTo(-1.98f, -3.34f);
      bezierPath.lineTo(-1.99f, -3.34f);
      bezierPath.cubicTo(-1.99f, -3.4f, -1.99f, -3.47f, -1.99f, -3.54f);
      bezierPath.cubicTo(-1.99f, -3.83f, -2.18f, -4.06f, -2.47f, -4.06f);
      bezierPath.cubicTo(-2.5f, -4.06f, -2.54f, -4.06f, -2.57f, -4.06f);
      bezierPath.lineTo(-2.56f, -4.06f);
      bezierPath.lineTo(-5.29f, -3.07f);
      bezierPath.lineTo(-5.29f, -3.07f);
      bezierPath.cubicTo(-5.35f, -3.05f, -5.42f, -3.03f, -5.48f, -3.03f);
      bezierPath.cubicTo(-5.77f, -3.03f, -6f, -3.26f, -6f, -3.55f);
      bezierPath.cubicTo(-6f, -3.7f, -5.94f, -3.83f, -5.84f, -3.93f);
      bezierPath.lineTo(-5.84f, -3.92f);
      bezierPath.lineTo(0.02f, -12f);
      bezierPath.lineTo(5.86f, -3.86f);
      bezierPath.lineTo(5.86f, -3.86f);
      bezierPath.cubicTo(5.96f, -3.77f, 6.02f, -3.63f, 6.02f, -3.48f);
      bezierPath.cubicTo(6.02f, -3.2f, 5.79f, -2.97f, 5.5f, -2.97f);
      bezierPath.cubicTo(5.43f, -2.97f, 5.37f, -2.98f, 5.31f, -3.01f);
      bezierPath.lineTo(5.31f, -3.01f);
      bezierPath.lineTo(2.58f, -4f);
      bezierPath.lineTo(2.59f, -3.99f);
      bezierPath.cubicTo(2.56f, -4f, 2.52f, -4f, 2.49f, -4f);
      bezierPath.cubicTo(2.2f, -4f, 2.01f, -3.77f, 2.01f, -3.48f);
      bezierPath.cubicTo(2.01f, -3.41f, 2f, -3.34f, 2f, -3.28f);
      bezierPath.lineTo(2f, -3.28f);
      bezierPath.lineTo(2.01f, -2.01f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezierPath.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneUturn {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
    private static RectF bezier2Rect = new RectF();
    private static Path bezier2Path = new Path();
  }

  public static void drawLaneUturn(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneUturn(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneUturn(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneUturn.paint;

    // Local Variables
    float y = size.y / 2f;
    float expression = Math.min(size.x / 30f, size.y / 30f);
    float x = size.x / 2f;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneUturn.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneUturn.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneUturn.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      canvas.save();
      canvas.translate(x, y);
      currentTransformation.peek().postTranslate(x, y);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Bezier
      RectF bezierRect = CacheForLaneUturn.bezierRect;
      bezierRect.set(-6f, -10f, 4f, 12f);
      Path bezierPath = CacheForLaneUturn.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(4f, 5f);
      bezierPath.lineTo(4f, -3.74f);
      bezierPath.cubicTo(4f, -5.38f, 4f, -10f, -1f, -10f);
      bezierPath.cubicTo(-6f, -10f, -6f, -4f, -6f, -4f);
      bezierPath.lineTo(-6f, 12f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);
      canvas.restore();

      // Bezier 2
      RectF bezier2Rect = CacheForLaneUturn.bezier2Rect;
      bezier2Rect.set(-1.99f, 2.99f, 10f, 11.97f);
      Path bezier2Path = CacheForLaneUturn.bezier2Path;
      bezier2Path.reset();
      bezier2Path.moveTo(6.02f, 3.05f);
      bezier2Path.cubicTo(6.02f, 3.05f, 6.01f, 4.22f, 6.01f, 4.31f);
      bezier2Path.cubicTo(6.02f, 4.37f, 6.02f, 4.44f, 6.02f, 4.51f);
      bezier2Path.cubicTo(6.02f, 4.8f, 6.21f, 5.03f, 6.5f, 5.03f);
      bezier2Path.cubicTo(6.71f, 4.99f, 9.21f, 4.08f, 9.32f, 4.04f);
      bezier2Path.cubicTo(9.38f, 4.02f, 9.45f, 4f, 9.51f, 4f);
      bezier2Path.cubicTo(9.74f, 4f, 9.93f, 4.15f, 10f, 4.34f);
      bezier2Path.lineTo(10f, 4.52f);
      bezier2Path.lineTo(10f, 4.69f);
      bezier2Path.cubicTo(9.97f, 4.77f, 9.93f, 4.84f, 9.87f, 4.89f);
      bezier2Path.cubicTo(9.74f, 5.05f, 4.02f, 11.97f, 4.02f, 11.97f);
      bezier2Path.cubicTo(4.02f, 11.97f, 1.98f, 9.48f, 0.31f, 7.44f);
      bezier2Path.cubicTo(-0.82f, 6.07f, -1.77f, 4.9f, -1.83f, 4.84f);
      bezier2Path.cubicTo(-1.93f, 4.74f, -1.99f, 4.6f, -1.99f, 4.46f);
      bezier2Path.cubicTo(-1.99f, 4.17f, -1.76f, 3.94f, -1.47f, 3.94f);
      bezier2Path.cubicTo(-1.4f, 3.94f, -1.34f, 3.95f, -1.28f, 3.98f);
      bezier2Path.cubicTo(-1.17f, 4.02f, 1.34f, 4.93f, 1.44f, 4.97f);
      bezier2Path.cubicTo(1.83f, 4.97f, 2.02f, 4.74f, 2.02f, 4.45f);
      bezier2Path.cubicTo(2.02f, 4.38f, 2.03f, 4.31f, 2.03f, 4.25f);
      bezier2Path.cubicTo(2.03f, 4.17f, 2.02f, 2.99f, 2.02f, 2.99f);
      bezier2Path.lineTo(6.02f, 3.05f);
      bezier2Path.close();

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier2Path, paint);

      canvas.restore();
    }

    canvas.restore();
  }

  private static class CacheForLaneSlightRight {
    private static Paint paint = new Paint();
    private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
    private static RectF resizedFrame = new RectF();
    private static RectF frame = new RectF();
    private static RectF bezier3Rect = new RectF();
    private static Path bezier3Path = new Path();
    private static RectF bezierRect = new RectF();
    private static Path bezierPath = new Path();
  }

  public static void drawLaneSlightRight(Canvas canvas, int primaryColor, PointF size) {
    LanesStyleKit.drawLaneSlightRight(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit, primaryColor, size);
  }

  public static void drawLaneSlightRight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, PointF size) {
    // General Declarations
    Stack<Matrix> currentTransformation = new Stack<Matrix>();
    currentTransformation.push(new Matrix());
    Paint paint = CacheForLaneSlightRight.paint;

    // Local Variables
    float y = size.y / 2f;
    float expression = Math.min(size.x / 30f, size.y / 30f);
    float x = size.x / 2f;

    // Resize to Target Frame
    canvas.save();
    RectF resizedFrame = CacheForLaneSlightRight.resizedFrame;
    LanesStyleKit.resizingBehaviorApply(resizing, CacheForLaneSlightRight.originalFrame, targetFrame, resizedFrame);
    canvas.translate(resizedFrame.left, resizedFrame.top);
    canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);

    // Frame
    RectF frame = CacheForLaneSlightRight.frame;
    frame.set(0f, 0f, size.x, size.y);

    // Group
    {
      canvas.save();
      canvas.translate(x, y);
      currentTransformation.peek().postTranslate(x, y);
      canvas.scale(expression, expression);
      currentTransformation.peek().postScale(expression, expression);

      // Bezier 3
      RectF bezier3Rect = CacheForLaneSlightRight.bezier3Rect;
      bezier3Rect.set(-5.72f, -4.39f, 1.45f, 12.6f);
      Path bezier3Path = CacheForLaneSlightRight.bezier3Path;
      bezier3Path.reset();
      bezier3Path.moveTo(1.45f, -4.39f);
      bezier3Path.lineTo(-4.25f, 0.89f);
      bezier3Path.cubicTo(-5.12f, 2.21f, -5.72f, 3.82f, -5.72f, 5.47f);
      bezier3Path.lineTo(-5.72f, 12.6f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      paint.setStrokeWidth(4f);
      paint.setStrokeJoin(Paint.Join.ROUND);
      paint.setStrokeMiter(10f);
      canvas.save();
      paint.setStyle(Paint.Style.STROKE);
      paint.setColor(primaryColor);
      canvas.drawPath(bezier3Path, paint);
      canvas.restore();

      // Bezier
      canvas.save();
      canvas.translate(4.53f, -15f);
      currentTransformation.peek().postTranslate(4.53f, -15f);
      canvas.rotate(49f);
      currentTransformation.peek().postRotate(49f);
      RectF bezierRect = CacheForLaneSlightRight.bezierRect;
      bezierRect.set(0f, 0f, 12.02f, 9.99f);
      Path bezierPath = CacheForLaneSlightRight.bezierPath;
      bezierPath.reset();
      bezierPath.moveTo(4.01f, 9.92f);
      bezierPath.lineTo(4.02f, 8.66f);
      bezierPath.lineTo(4.01f, 8.66f);
      bezierPath.cubicTo(4.01f, 8.6f, 4.01f, 8.53f, 4.01f, 8.46f);
      bezierPath.cubicTo(4.01f, 8.17f, 3.82f, 7.94f, 3.53f, 7.94f);
      bezierPath.cubicTo(3.5f, 7.94f, 3.46f, 7.94f, 3.43f, 7.94f);
      bezierPath.lineTo(3.44f, 7.94f);
      bezierPath.lineTo(0.71f, 8.93f);
      bezierPath.lineTo(0.71f, 8.93f);
      bezierPath.cubicTo(0.65f, 8.96f, 0.58f, 8.97f, 0.52f, 8.97f);
      bezierPath.cubicTo(0.23f, 8.97f, 0f, 8.74f, 0f, 8.45f);
      bezierPath.cubicTo(0f, 8.3f, 0.06f, 8.17f, 0.16f, 8.07f);
      bezierPath.lineTo(0.16f, 8.08f);
      bezierPath.lineTo(6.02f, 0f);
      bezierPath.lineTo(11.86f, 8.14f);
      bezierPath.lineTo(11.86f, 8.14f);
      bezierPath.cubicTo(11.96f, 8.23f, 12.02f, 8.37f, 12.02f, 8.52f);
      bezierPath.cubicTo(12.02f, 8.8f, 11.79f, 9.03f, 11.5f, 9.03f);
      bezierPath.cubicTo(11.43f, 9.03f, 11.37f, 9.02f, 11.31f, 8.99f);
      bezierPath.lineTo(11.31f, 8.99f);
      bezierPath.lineTo(8.58f, 8f);
      bezierPath.lineTo(8.59f, 8.01f);
      bezierPath.cubicTo(8.56f, 8f, 8.52f, 8f, 8.49f, 8f);
      bezierPath.cubicTo(8.2f, 8f, 8.01f, 8.23f, 8.01f, 8.53f);
      bezierPath.cubicTo(8.01f, 8.59f, 8f, 8.66f, 8f, 8.73f);
      bezierPath.lineTo(8f, 8.72f);
      bezierPath.lineTo(8.01f, 9.99f);

      paint.reset();
      paint.setFlags(Paint.ANTI_ALIAS_FLAG);
      bezierPath.setFillType(Path.FillType.EVEN_ODD);
      paint.setStyle(Paint.Style.FILL);
      paint.setColor(primaryColor);
      canvas.drawPath(bezierPath, paint);
      canvas.restore();

      canvas.restore();
    }

    canvas.restore();
  }


  // Resizing Behavior
  public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
    if (rect.equals(target) || target == null) {
      result.set(rect);
      return;
    }

    if (behavior == ResizingBehavior.Stretch) {
      result.set(target);
      return;
    }

    float xRatio = Math.abs(target.width() / rect.width());
    float yRatio = Math.abs(target.height() / rect.height());
    float scale = 0f;

    switch (behavior) {
      case AspectFit: {
        scale = Math.min(xRatio, yRatio);
        break;
      }
      case AspectFill: {
        scale = Math.max(xRatio, yRatio);
        break;
      }
      case Center: {
        scale = 1f;
        break;
      }
      default:
        break;
    }

    float newWidth = Math.abs(rect.width() * scale);
    float newHeight = Math.abs(rect.height() * scale);
    result.set(target.centerX() - newWidth / 2,
      target.centerY() - newHeight / 2,
      target.centerX() + newWidth / 2,
      target.centerY() + newHeight / 2);
  }


}