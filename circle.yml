version: 2.1
parameters:
  docker-image-tag:
    type: string
    default: "mbgl/android-ndk-r21:769c31f1d8"

workflows:
  version: 2
  default:
    jobs:
      - build
      - release-core-snapshot:
          filters:
            branches:
              only:
                - master
      - release-ui-snapshot:
          filters:
            branches:
              only:
                - master
      - release-core:
          filters:
            tags:
              only: /^release_core_.*/
            branches:
              ignore: /.*/
      - release-ui:
          filters:
            tags:
              only: /^release_ui_.*_core_.*/
            branches:
              ignore: /.*/
      - ui-tests

commands:
  restore-gradle-cache:
    steps:
      - restore_cache:
          keys:
            - deps-{{ checksum "build.gradle" }}-{{ checksum  "gradle/dependencies.gradle" }}-{{ checksum  "examples/build.gradle" }}-{{ checksum  "libnavigation-router/build.gradle" }}-{{ checksum  "libnavigation-base/build.gradle" }}-{{ checksum  "libnavigation-core/build.gradle" }}-{{ checksum  "libnavigation-metrics/build.gradle" }}-{{ checksum  "libnavigation-util/build.gradle" }}-{{ checksum  "libnavigator/build.gradle" }}-{{ checksum  "libtrip-notification/build.gradle" }}-{{ checksum  "libtesting-ui/build.gradle" }}-{{ checksum  "libtesting-utils/build.gradle" }}-{{ checksum  "libnavigation-ui/build.gradle" }}
            - deps-
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: deps-{{ checksum "build.gradle" }}-{{ checksum  "gradle/dependencies.gradle" }}-{{ checksum  "examples/build.gradle" }}-{{ checksum  "libnavigation-router/build.gradle" }}-{{ checksum  "libnavigation-base/build.gradle" }}-{{ checksum  "libnavigation-core/build.gradle" }}-{{ checksum  "libnavigation-metrics/build.gradle" }}-{{ checksum  "libnavigation-util/build.gradle" }}-{{ checksum  "libnavigator/build.gradle" }}-{{ checksum  "libtrip-notification/build.gradle" }}-{{ checksum  "libtesting-ui/build.gradle" }}-{{ checksum  "libtesting-utils/build.gradle" }}-{{ checksum  "libnavigation-ui/build.gradle" }}

  verify:
    steps:
      - run:
          name: Check codebase
          command: make check

  build-module:
    parameters:
      module_target:
        description: module target
        type: string
      variant:
        description: debug or release
        type: string
    steps:
      - run:
          name: Build << parameters.module_target >> APK in << parameters.variant >> mode
          command: |
            ./gradlew << parameters.module_target >>:assemble<< parameters.variant >>

  build-example-app:
    parameters:
      variant:
        description: debug or release
        type: string
    steps:
      - run:
          name: Build examples APK in << parameters.variant >> mode
          command: |
            echo "${MAPBOX_DEVELOPER_CONFIG}" > /root/code/examples/src/main/res/values/mapbox_access_token.xml
            ./gradlew examples:assemble<< parameters.variant >>

  build-instrumentation-test:
    parameters:
      module_target:
        description: module target
        type: string
    steps:
      - run:
          name: Build Instrumentation Test APK
          command: |
            ./gradlew << parameters.module_target >>:assembleAndroidTest

  login-google-cloud-platform:
    steps:
      - run:
          name: Log in to Google Cloud Platform
          shell: /bin/bash -euo pipefail
          command: |
            echo "${GCLOUD_SERVICE_ACCOUNT_JSON}" > secret.json
            gcloud auth activate-service-account --key-file secret.json --project mapbox-navigation-android
            rm secret.json

  store-results:
    parameters:
      module_target:
        description: module target
        type: string
    steps:
      - store_artifacts:
          path: << parameters.module_target >>/build/reports
          destination: << parameters.module_target >>/reports
      - store_test_results:
          path: << parameters.module_target >>/build/test-results

  build-core-debug:
    steps:
      - run:
          name: Build Navigation Core SDK (debug)
          command: make build-core-debug

  build-ui-debug:
    steps:
      - run:
          name: Build Navigation UI SDK(debug)
          command: make build-ui-debug

  build-release-core:
    steps:
      - run:
          name: Build Navigation Core SDK (release)
          command: make build-core-release

  build-release-ui:
    steps:
      - run:
          name: Build Navigation UI SDK (release)
          command: make build-ui-release

  check-api-core:
    steps:
      - run:
          name: Check Navigation Core SDK public API
          command: |
            make build-core-release
            make core-check-api

  check-api-ui:
    steps:
      - run:
          name: Check Navigation UI SDK public API
          command: |
            make build-ui-release
            make ui-check-api

  unit-tests-core:
    steps:
      - run:
          name: Run Navigation Core SDK Unit Tests
          command: make core-unit-tests
      - store-results:
          module_target: "libnavigation-router"
      - store-results:
          module_target: "libnavigation-base"
      - store-results:
          module_target: "libnavigation-core"
      - store-results:
          module_target: "libnavigation-metrics"
      - store-results:
          module_target: "libnavigation-util"
      - store-results:
          module_target: "libnavigator"
      - store-results:
          module_target: "libtrip-notification"

  unit-tests-ui:
    steps:
      - run:
          name: Run Navigation UI SDK Unit Tests
          command: make ui-unit-tests
      - store-results:
          module_target: "libnavigation-ui"

  generate-core-version-name:
    steps:
      - run:
          name: Generate Core version name
          command: |
            if [[ -n "$CIRCLE_TAG" ]]; then
              if [[ $CIRCLE_TAG == release_core_* ]]; then
                POM_CORE_VERSION_NAME=`echo $CIRCLE_TAG | cut -d '_' -f 3`
              elif [[ $CIRCLE_TAG == qa_release_core_*
                        || $CIRCLE_TAG == prod_release_core_* ]]; then
                POM_CORE_VERSION_NAME=`echo $CIRCLE_TAG | cut -d '_' -f 4`
              else
                echo "Exiting the job as this is not a release TAG"
                exit 1
              fi
              echo "export POM_CORE_VERSION_NAME=$POM_CORE_VERSION_NAME" >> $BASH_ENV
            fi

  generate-ui-version-name:
    steps:
      - run:
          name: Generate UI version name
          command: |
            if [[ -n "$CIRCLE_TAG" ]]; then
              if [[ $CIRCLE_TAG == release_ui_*_core_* ]]; then
                POM_UI_VERSION_NAME=`echo $CIRCLE_TAG | cut -d '_' -f 3`
                POM_CORE_VERSION_NAME=`echo $CIRCLE_TAG | cut -d '_' -f 5`
              elif [[ $CIRCLE_TAG == qa_release_ui_*_core_*
                        || $CIRCLE_TAG == prod_release_ui_*_core_* ]]; then
                POM_UI_VERSION_NAME=`echo $CIRCLE_TAG | cut -d '_' -f 4`
                POM_CORE_VERSION_NAME=`echo $CIRCLE_TAG | cut -d '_' -f 6`
              else
                echo "Exiting the job as this is not a release TAG"
                exit 1
              fi
              echo "export POM_UI_VERSION_NAME=$POM_UI_VERSION_NAME" >> $BASH_ENV
              echo "export POM_CORE_VERSION_NAME=$POM_CORE_VERSION_NAME" >> $BASH_ENV
            fi

  run-firebase-instrumentation:
    parameters:
      module_wrapper:
        description: module wrapper
        type: string
      module_target:
        description: module target
        type: string
      variant:
        description: debug or release
        type: string
    steps:
      - run:
          name: Run instrumentation tests on Firebase
          no_output_timeout: 1200
          shell: /bin/bash -euo pipefail
          command: |
            gcloud firebase test android run --type instrumentation \
              --app << parameters.module_wrapper >>/build/outputs/apk/<< parameters.variant >>/<< parameters.module_wrapper >>-<< parameters.variant >>.apk \
              --test << parameters.module_target >>/build/outputs/apk/androidTest/<< parameters.variant >>/<< parameters.module_target >>-<< parameters.variant >>-androidTest.apk \
              --device model=hammerhead,version=21,locale=en,orientation=portrait  \
              --device model=athene,version=23,locale=fr,orientation=landscape \
              --device model=sailfish,version=26,locale=es,orientation=portrait \
              --device model=walleye,version=28,locale=de,orientation=landscape \
              --use-orchestrator \
              --timeout 5m

  run-firebase-robo:
    parameters:
      variant:
        description: debug or release
        type: string
    steps:
      - run:
          name: Run robo tests on Firebase
          no_output_timeout: 10m
          command: |
            gcloud firebase test android run --type robo \
              --app examples/build/outputs/apk/<< parameters.variant >>/examples-<< parameters.variant >>.apk \
              --device model=hammerhead,version=21,locale=en,orientation=portrait  \
              --device model=athene,version=23,locale=fr,orientation=landscape \
              --device model=sailfish,version=26,locale=es,orientation=portrait \
              --device model=walleye,version=28,locale=de,orientation=landscape \
              --timeout 5m

  publish-artifacts:
    parameters:
      artifact-type:
        description: core or ui
        type: string
    steps:
      - deploy:
          name: Publish Navigation SDK to SDK Registry
          command: |
            make << parameters.artifact-type >>-publish-to-sdk-registry

  check-public-documentation:
    steps:
      - run:
          name: Check public documentation
          command: sh scripts/dokka-validate.sh

  generate-documentation:
    steps:
      - run:
          name: Generate documentation
          command: make javadoc-dokka

  track-performance:
    steps:
      - run:
          name: Track performance of the Navigation SDK
          command: |
            if [ -n "${MOBILE_METRICS_TOKEN}" ]; then
              if [[ $CIRCLE_BRANCH == master ]]; then
               curl -u ${MOBILE_METRICS_TOKEN}: \
                 -d build_parameters[CIRCLE_JOB]=android-navigation-benchmark \
                 -d build_parameters[BENCHMARK_COMMIT]= ${CIRCLE_SHA1} \
                 https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master
              fi
            fi
      - run:
          name: Trigger android binary size check
          command: |
            if [ -n "${MOBILE_METRICS_TOKEN}" ]; then
              if [[ $CIRCLE_BRANCH == master ]]; then
                curl -u ${MOBILE_METRICS_TOKEN}: -d build_parameters[CIRCLE_JOB]=android-navigation-binary-size https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master
              fi
            fi
      - run:
          name: Trigger code coverage check
          command: |
            if [ -n "${MOBILE_METRICS_TOKEN}" ]; then
              if [[ $CIRCLE_BRANCH == master ]]; then
                curl -u ${MOBILE_METRICS_TOKEN}: -d build_parameters[CIRCLE_JOB]=android-navigation-code-coverage https://circleci.com/api/v1.1/project/github/mapbox/mobile-metrics/tree/master
              fi
            fi

jobs:
  build:
    working_directory: ~/code
    docker:
      - image: << pipeline.parameters.docker-image-tag >>
    steps:
      - checkout
      - restore-gradle-cache
      - verify
      - check-public-documentation
      - check-api-core
      - check-api-ui
      - build-core-debug
      - build-ui-debug
      - unit-tests-core
      - unit-tests-ui

  ui-tests:
    docker:
      - image: << pipeline.parameters.docker-image-tag >>
    working_directory: ~/code
    environment:
      JVM_OPTS: -Xmx3200m
      BUILDTYPE: Debug
      GRADLE_OPTS: -Xmx4096m -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process
    steps:
      - checkout
      - restore-gradle-cache
      - build-module:
          module_target: "app-tests-wrapper"
          variant: "Debug"
      - build-module:
          module_target: "libnavigation-core"
          variant: "Debug"
      - build-instrumentation-test:
          module_target: "libnavigation-core"
      - login-google-cloud-platform
      - run-firebase-instrumentation:
          module_target: "libnavigation-core"
          module_wrapper: "app-tests-wrapper"
          variant: "debug"
      - build-example-app:
          variant: "Release"
      - run-firebase-robo:
          variant: "release"

  release-core-snapshot:
    working_directory: ~/code
    docker:
      - image: << pipeline.parameters.docker-image-tag >>
    steps:
      - checkout
      - generate-core-version-name
      - check-public-documentation
      - generate-documentation
      - publish-artifacts:
          artifact-type: "core"
      - track-performance

  release-core:
    working_directory: ~/code
    docker:
      - image: << pipeline.parameters.docker-image-tag >>
    steps:
      - generate-core-version-name
      - checkout
      - build-release-core
      - check-public-documentation
      - generate-documentation
      - publish-artifacts:
          artifact-type: "core"

  release-ui-snapshot:
    working_directory: ~/code
    docker:
      - image: << pipeline.parameters.docker-image-tag >>
    steps:
      - generate-ui-version-name
      - checkout
      - check-public-documentation
      - generate-documentation
      - publish-artifacts:
          artifact-type: "ui"
      - track-performance

  release-ui:
    working_directory: ~/code
    docker:
      - image: << pipeline.parameters.docker-image-tag >>
    steps:
      - generate-ui-version-name
      - checkout
      - build-release-ui
      - check-public-documentation
      - generate-documentation
      - publish-artifacts:
          artifact-type: "ui"
