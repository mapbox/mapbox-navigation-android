package com.mapbox.navigation.ui.maps.route.callout.api

import android.view.View
import androidx.annotation.RestrictTo
import com.mapbox.maps.AnnotatedLayerFeature
import com.mapbox.maps.ViewAnnotationAnchorConfig
import com.mapbox.maps.logW
import com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener
import com.mapbox.maps.viewannotation.ViewAnnotationManager
import com.mapbox.maps.viewannotation.annotatedLayerFeature
import com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI
import com.mapbox.navigation.ui.maps.internal.route.callout.model.RouteCalloutData
import com.mapbox.navigation.ui.maps.route.callout.model.CalloutViewHolder
import com.mapbox.navigation.ui.maps.route.callout.model.RouteCallout

/**
 * Responsible for rendering data generated by the [MapboxRouteCalloutsApi] class. The
 * data will change the appearance/behaviour of the route callout(s) on the map.
 */
@OptIn(ExperimentalPreviewMapboxNavigationAPI::class)
@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP_PREFIX)
class MapboxRouteCalloutsView(
    private val viewAnnotationManager: ViewAnnotationManager,
    private val routeCalloutAdapter: MapboxRouteCalloutAdapter,
    private val layerIdProvider: RouteLayerIdProvider,
) {

    private var routeCalloutResult: RouteCalloutData? = null
    private val onViewAnnotationUpdatedListener = object : OnViewAnnotationUpdatedListener {
        override fun onViewAnnotationAnchorUpdated(
            view: View,
            anchor: ViewAnnotationAnchorConfig,
        ) {
            routeCalloutAdapter.onUpdateAnchor(view, anchor)
        }
    }
    private val dataChangedObserver: () -> Unit = {
        routeCalloutResult?.let { renderCallouts(it) }
    }
    private val currentLayersToAttach = mutableSetOf<String>()

    init {
        viewAnnotationManager.addOnViewAnnotationUpdatedListener(onViewAnnotationUpdatedListener)
        routeCalloutAdapter.registerDataObserver(dataChangedObserver)
    }

    /**
     * Renders [RouteCalloutData]
     */
    fun renderCallouts(
        routeCalloutResult: RouteCalloutData,
    ) {
        this.routeCalloutResult = routeCalloutResult
        clear()

        routeCalloutResult.callouts.forEach { calloutRoute ->
            val layer = layerIdProvider.getLayerId(calloutRoute.route.id)
            if (layer != null) {
                val viewHolder = createViewHolder(calloutRoute)

                viewAnnotationManager.viewAnnotationAvoidLayers += layer
                currentLayersToAttach.add(layer)
                addViewAnnotation(layer, viewHolder)
            } else {
                logW(
                    TAG,
                    "Layer for route [${calloutRoute.route.id}] not found",
                )
            }
        }
    }

    fun release() {
        this.routeCalloutResult = null
        clear()
        viewAnnotationManager.removeOnViewAnnotationUpdatedListener(onViewAnnotationUpdatedListener)
        routeCalloutAdapter.removeDataObserver(dataChangedObserver)
    }

    private fun addViewAnnotation(layerId: String, viewHolder: CalloutViewHolder) {
        val options = viewHolder.options.toBuilder()
            .annotatedLayerFeature(layerId)
            .build()

        viewAnnotationManager.addViewAnnotation(
            view = viewHolder.view,
            options = options,
        )
    }

    private fun clear() {
        getAllCalloutViews().forEach { viewAnnotationManager.removeViewAnnotation(it) }
        viewAnnotationManager.viewAnnotationAvoidLayers -= currentLayersToAttach
        currentLayersToAttach.clear()
    }

    private fun createViewHolder(callout: RouteCallout): CalloutViewHolder {
        val viewHolder = routeCalloutAdapter.onCreateViewHolder(callout)

        return viewHolder
    }

    private fun getAllCalloutViews(): List<View> {
        return currentLayersToAttach.mapNotNull {
            viewAnnotationManager.getViewAnnotation(
                AnnotatedLayerFeature.Builder().layerId(it).build(),
            )
        }
    }

    private companion object {
        private const val TAG = "MapboxRouteCalloutView"
    }
}
