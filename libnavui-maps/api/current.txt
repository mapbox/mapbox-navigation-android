// Signature format: 3.0
package com.mapbox.navigation.ui.maps {

  public final class PredictiveCacheController {
    ctor public PredictiveCacheController(com.mapbox.navigation.base.options.PredictiveCacheLocationOptions predictiveCacheLocationOptions = PredictiveCacheLocationOptions.<init>().build(), com.mapbox.navigation.ui.maps.PredictiveCacheControllerErrorHandler? predictiveCacheControllerErrorHandler = null);
    ctor public PredictiveCacheController(com.mapbox.navigation.base.options.PredictiveCacheLocationOptions predictiveCacheLocationOptions = PredictiveCacheLocationOptions.<init>().build());
    method public void createMapControllers(com.mapbox.maps.MapboxMap map, java.util.List<java.lang.String> sourceIdsToCache = emptyList());
    method public void createMapControllers(com.mapbox.maps.MapboxMap map);
    method public void onDestroy();
    method public void removeMapControllers(com.mapbox.maps.MapboxMap map);
  }

  public fun interface PredictiveCacheControllerErrorHandler {
    method public void onError(String? message);
  }

  public final class PredictiveCacheControllerKt {
  }

}

package com.mapbox.navigation.ui.maps.arrival.api {

  public fun interface BuildingHighlightObserver {
    method public void onBuildingHighlight(java.util.List<com.mapbox.maps.QueriedFeature> features);
  }

  public final class MapboxBuildingArrivalApi {
    ctor public MapboxBuildingArrivalApi();
    method public com.mapbox.navigation.ui.maps.arrival.api.MapboxBuildingArrivalApi buildingHighlightApi(com.mapbox.navigation.ui.maps.arrival.api.MapboxBuildingHighlightApi? mapboxBuildingHighlightApi);
    method public void clearBuildingHighlightObservers();
    method public void disable();
    method public void enable(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public com.mapbox.navigation.ui.maps.arrival.api.MapboxBuildingArrivalApi registerBuildingHighlightObserver(com.mapbox.navigation.ui.maps.arrival.api.BuildingHighlightObserver observer);
    method public void unregisterBuildingHighlightObserver(com.mapbox.navigation.ui.maps.arrival.api.BuildingHighlightObserver observer);
  }

  public final class MapboxBuildingHighlightApi {
    ctor public MapboxBuildingHighlightApi(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.navigation.ui.maps.arrival.model.MapboxBuildingHighlightOptions options = MapboxBuildingHighlightOptions.default);
    method public void clear();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getBuildingHeightExpression();
    method public java.util.List<com.mapbox.maps.QueriedFeature> getHighlightedBuildings();
    method public void highlightBuilding(com.mapbox.geojson.Point? point, com.mapbox.navigation.ui.maps.arrival.api.BuildingHighlightObserver callback);
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression buildingHeightExpression;
    property public final java.util.List<com.mapbox.maps.QueriedFeature> highlightedBuildings;
    field public static final String BUILDING_LAYER_ID = "building";
    field public static final String COMPOSITE_SOURCE_ID = "composite";
    field public static final com.mapbox.navigation.ui.maps.arrival.api.MapboxBuildingHighlightApi.Companion Companion;
    field public static final String HIGHLIGHT_BUILDING_LAYER_ID = "mapbox-building-highlight-layer";
  }

  public static final class MapboxBuildingHighlightApi.Companion {
  }

}

package com.mapbox.navigation.ui.maps.arrival.model {

  public final class MapboxBuildingHighlightOptions {
    method public int getFillExtrusionColor();
    method public double getFillExtrusionOpacity();
    method public com.mapbox.navigation.ui.maps.arrival.model.MapboxBuildingHighlightOptions.Builder toBuilder();
    property public final int fillExtrusionColor;
    property public final double fillExtrusionOpacity;
  }

  public static final class MapboxBuildingHighlightOptions.Builder {
    ctor public MapboxBuildingHighlightOptions.Builder();
    method public com.mapbox.navigation.ui.maps.arrival.model.MapboxBuildingHighlightOptions build();
    method public com.mapbox.navigation.ui.maps.arrival.model.MapboxBuildingHighlightOptions.Builder fillExtrusionColor(@ColorInt int fillExtrusionColor);
    method public com.mapbox.navigation.ui.maps.arrival.model.MapboxBuildingHighlightOptions.Builder fillExtrusionOpacity(double fillExtrusionOpacity);
  }

}

package com.mapbox.navigation.ui.maps.camera {

  @UiThread public final class NavigationCamera {
    ctor public NavigationCamera(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.animation.CameraAnimationsPlugin cameraPlugin, com.mapbox.navigation.ui.maps.camera.data.ViewportDataSource viewportDataSource, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraStateTransition stateTransition = MapboxNavigationCameraStateTransition(mapboxMap, cameraPlugin));
    method public com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? getDebugger();
    method public com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState getState();
    method public void registerNavigationCameraStateChangeObserver(com.mapbox.navigation.ui.maps.camera.state.NavigationCameraStateChangedObserver navigationCameraStateChangedObserver);
    method public void requestNavigationCameraToFollowing(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> stateTransitionOptionsBlock, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> frameTransitionOptionsBlock, android.animation.Animator.AnimatorListener? animatorListener = null);
    method public void requestNavigationCameraToFollowing(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> stateTransitionOptionsBlock, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> frameTransitionOptionsBlock);
    method public void requestNavigationCameraToFollowing(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions frameTransitionOptions = DEFAULT_FRAME_TRANSITION_OPT, android.animation.Animator.AnimatorListener? animatorListener = null);
    method public void requestNavigationCameraToFollowing(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions frameTransitionOptions = DEFAULT_FRAME_TRANSITION_OPT);
    method public void requestNavigationCameraToFollowing(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT);
    method public void requestNavigationCameraToFollowing();
    method public void requestNavigationCameraToIdle();
    method public void requestNavigationCameraToOverview(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> stateTransitionOptionsBlock, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> frameTransitionOptionsBlock, android.animation.Animator.AnimatorListener? animatorListener = null);
    method public void requestNavigationCameraToOverview(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> stateTransitionOptionsBlock, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> frameTransitionOptionsBlock);
    method public void requestNavigationCameraToOverview(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions frameTransitionOptions = DEFAULT_FRAME_TRANSITION_OPT, android.animation.Animator.AnimatorListener? animatorListener = null);
    method public void requestNavigationCameraToOverview(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions frameTransitionOptions = DEFAULT_FRAME_TRANSITION_OPT);
    method public void requestNavigationCameraToOverview(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT);
    method public void requestNavigationCameraToOverview();
    method public void resetFrame();
    method public void setDebugger(com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? p);
    method public void unregisterNavigationCameraStateChangeObserver(com.mapbox.navigation.ui.maps.camera.state.NavigationCameraStateChangedObserver navigationCameraStateChangedObserver);
    property public final com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? debugger;
    property public final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState state;
    field public static final com.mapbox.navigation.ui.maps.camera.NavigationCamera.Companion Companion;
    field public static final String NAVIGATION_CAMERA_OWNER = "NAVIGATION_CAMERA_OWNER";
  }

  public static final class NavigationCamera.Companion {
  }

}

package com.mapbox.navigation.ui.maps.camera.data {

  public final class FollowingFrameOptions {
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.BearingSmoothing getBearingSmoothing();
    method public boolean getBearingUpdatesAllowed();
    method public boolean getCenterUpdatesAllowed();
    method public double getDefaultPitch();
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.FrameGeometryAfterManeuver getFrameGeometryAfterManeuver();
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.IntersectionDensityCalculation getIntersectionDensityCalculation();
    method public double getMaxZoom();
    method public boolean getMaximizeViewableGeometryWhenPitchZero();
    method public double getMinZoom();
    method public boolean getPaddingUpdatesAllowed();
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.PitchNearManeuvers getPitchNearManeuvers();
    method public boolean getPitchUpdatesAllowed();
    method public boolean getZoomUpdatesAllowed();
    method public void setBearingUpdatesAllowed(boolean p);
    method public void setCenterUpdatesAllowed(boolean p);
    method public void setDefaultPitch(double p);
    method public void setMaxZoom(double p);
    method public void setMaximizeViewableGeometryWhenPitchZero(boolean p);
    method public void setMinZoom(double p);
    method public void setPaddingUpdatesAllowed(boolean p);
    method public void setPitchUpdatesAllowed(boolean p);
    method public void setZoomUpdatesAllowed(boolean p);
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.BearingSmoothing bearingSmoothing;
    property public final boolean bearingUpdatesAllowed;
    property public final boolean centerUpdatesAllowed;
    property public final double defaultPitch;
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.FrameGeometryAfterManeuver frameGeometryAfterManeuver;
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.IntersectionDensityCalculation intersectionDensityCalculation;
    property public final double maxZoom;
    property public final boolean maximizeViewableGeometryWhenPitchZero;
    property public final double minZoom;
    property public final boolean paddingUpdatesAllowed;
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.PitchNearManeuvers pitchNearManeuvers;
    property public final boolean pitchUpdatesAllowed;
    property public final boolean zoomUpdatesAllowed;
  }

  public static final class FollowingFrameOptions.BearingSmoothing {
    method public boolean getEnabled();
    method public double getMaxBearingAngleDiff();
    method public void setEnabled(boolean p);
    method public void setMaxBearingAngleDiff(double p);
    property public final boolean enabled;
    property public final double maxBearingAngleDiff;
  }

  public static final class FollowingFrameOptions.FrameGeometryAfterManeuver {
    method public double getDistanceToCoalesceCompoundManeuvers();
    method public double getDistanceToFrameAfterManeuver();
    method public boolean getEnabled();
    method public void setDistanceToCoalesceCompoundManeuvers(double p);
    method public void setDistanceToFrameAfterManeuver(double p);
    method public void setEnabled(boolean p);
    property public final double distanceToCoalesceCompoundManeuvers;
    property public final double distanceToFrameAfterManeuver;
    property public final boolean enabled;
  }

  public static final class FollowingFrameOptions.IntersectionDensityCalculation {
    method public double getAverageDistanceMultiplier();
    method public boolean getEnabled();
    method public double getMinimumDistanceBetweenIntersections();
    method public void setAverageDistanceMultiplier(double p);
    method public void setEnabled(boolean p);
    method public void setMinimumDistanceBetweenIntersections(double p);
    property public final double averageDistanceMultiplier;
    property public final boolean enabled;
    property public final double minimumDistanceBetweenIntersections;
  }

  public static final class FollowingFrameOptions.PitchNearManeuvers {
    method public boolean getEnabled();
    method public double getTriggerDistanceFromManeuver();
    method public void setEnabled(boolean p);
    method public void setTriggerDistanceFromManeuver(double p);
    property public final boolean enabled;
    property public final double triggerDistanceFromManeuver;
  }

  @UiThread public final class MapboxNavigationViewportDataSource implements com.mapbox.navigation.ui.maps.camera.data.ViewportDataSource {
    ctor public MapboxNavigationViewportDataSource(com.mapbox.maps.MapboxMap mapboxMap);
    method public void additionalPointsToFrameForFollowing(java.util.List<com.mapbox.geojson.Point> points);
    method public void additionalPointsToFrameForOverview(java.util.List<com.mapbox.geojson.Point> points);
    method public void clearFollowingOverrides();
    method public void clearOverviewOverrides();
    method public void clearRouteData();
    method public void evaluate();
    method public void followingBearingPropertyOverride(Double? value);
    method public void followingCenterPropertyOverride(com.mapbox.geojson.Point? value);
    method public void followingPitchPropertyOverride(Double? value);
    method public void followingZoomPropertyOverride(Double? value);
    method public com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? getDebugger();
    method public com.mapbox.maps.EdgeInsets getFollowingPadding();
    method public com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions getOptions();
    method public com.mapbox.maps.EdgeInsets getOverviewPadding();
    method public com.mapbox.navigation.ui.maps.camera.data.ViewportData getViewportData();
    method public void onLocationChanged(android.location.Location location);
    method public void onRouteChanged(com.mapbox.api.directions.v5.models.DirectionsRoute route);
    method public void onRouteProgressChanged(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public void overviewBearingPropertyOverride(Double? value);
    method public void overviewCenterPropertyOverride(com.mapbox.geojson.Point? value);
    method public void overviewPitchPropertyOverride(Double? value);
    method public void overviewZoomPropertyOverride(Double? value);
    method public void registerUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
    method public void setDebugger(com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? p);
    method public void setFollowingPadding(com.mapbox.maps.EdgeInsets p);
    method public void setOverviewPadding(com.mapbox.maps.EdgeInsets p);
    method public void unregisterUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
    property public final com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? debugger;
    property public final com.mapbox.maps.EdgeInsets followingPadding;
    property public final com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions options;
    property public final com.mapbox.maps.EdgeInsets overviewPadding;
  }

  public final class MapboxNavigationViewportDataSourceOptions {
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions getFollowingFrameOptions();
    method public com.mapbox.navigation.ui.maps.camera.data.OverviewFrameOptions getOverviewFrameOptions();
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions followingFrameOptions;
    property public final com.mapbox.navigation.ui.maps.camera.data.OverviewFrameOptions overviewFrameOptions;
  }

  public final class OverviewFrameOptions {
    method public boolean getBearingUpdatesAllowed();
    method public boolean getCenterUpdatesAllowed();
    method public com.mapbox.navigation.ui.maps.camera.data.OverviewFrameOptions.GeometrySimplification getGeometrySimplification();
    method public double getMaxZoom();
    method public boolean getPaddingUpdatesAllowed();
    method public boolean getPitchUpdatesAllowed();
    method public boolean getZoomUpdatesAllowed();
    method public void setBearingUpdatesAllowed(boolean p);
    method public void setCenterUpdatesAllowed(boolean p);
    method public void setMaxZoom(double p);
    method public void setPaddingUpdatesAllowed(boolean p);
    method public void setPitchUpdatesAllowed(boolean p);
    method public void setZoomUpdatesAllowed(boolean p);
    property public final boolean bearingUpdatesAllowed;
    property public final boolean centerUpdatesAllowed;
    property public final com.mapbox.navigation.ui.maps.camera.data.OverviewFrameOptions.GeometrySimplification geometrySimplification;
    property public final double maxZoom;
    property public final boolean paddingUpdatesAllowed;
    property public final boolean pitchUpdatesAllowed;
    property public final boolean zoomUpdatesAllowed;
  }

  public static final class OverviewFrameOptions.GeometrySimplification {
    method public boolean getEnabled();
    method public int getSimplificationFactor();
    method public void setEnabled(boolean p);
    method public void setSimplificationFactor(int p);
    property public final boolean enabled;
    property public final int simplificationFactor;
  }

  public final class ViewportData {
    ctor public ViewportData(com.mapbox.maps.CameraOptions cameraForFollowing, com.mapbox.maps.CameraOptions cameraForOverview);
    method public com.mapbox.maps.CameraOptions component1();
    method public com.mapbox.maps.CameraOptions component2();
    method public com.mapbox.navigation.ui.maps.camera.data.ViewportData copy(com.mapbox.maps.CameraOptions cameraForFollowing, com.mapbox.maps.CameraOptions cameraForOverview);
    method public com.mapbox.maps.CameraOptions getCameraForFollowing();
    method public com.mapbox.maps.CameraOptions getCameraForOverview();
    property public final com.mapbox.maps.CameraOptions cameraForFollowing;
    property public final com.mapbox.maps.CameraOptions cameraForOverview;
  }

  public interface ViewportDataSource {
    method public com.mapbox.navigation.ui.maps.camera.data.ViewportData getViewportData();
    method public void registerUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
    method public void unregisterUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
  }

  public final class ViewportDataSourceProcessorKt {
  }

  public fun interface ViewportDataSourceUpdateObserver {
    method public void viewportDataSourceUpdated(com.mapbox.navigation.ui.maps.camera.data.ViewportData viewportData);
  }

}

package com.mapbox.navigation.ui.maps.camera.data.debugger {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class MapboxNavigationViewportDataSourceDebugger {
    ctor public MapboxNavigationViewportDataSourceDebugger(android.content.Context context, com.mapbox.maps.MapView mapView, String? layerAbove = null);
    ctor public MapboxNavigationViewportDataSourceDebugger(android.content.Context context, com.mapbox.maps.MapView mapView);
    method public boolean getEnabled();
    method public void setEnabled(boolean value);
    property public final boolean enabled;
  }

}

package com.mapbox.navigation.ui.maps.camera.lifecycle {

  public final class NavigationBasicGesturesHandler implements com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener {
    ctor public NavigationBasicGesturesHandler(com.mapbox.navigation.ui.maps.camera.NavigationCamera navigationCamera);
    method public void onAnimatorCancelling(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorEnding(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorInterrupting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator runningAnimator, String? runningAnimatorOwner, android.animation.ValueAnimator newAnimator, String? newAnimatorOwner);
    method public void onAnimatorStarting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
  }

  public fun interface NavigationScaleGestureActionListener {
    method public void onNavigationScaleGestureAction();
  }

  public final class NavigationScaleGestureHandler implements com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener {
    ctor public NavigationScaleGestureHandler(android.content.Context context, com.mapbox.navigation.ui.maps.camera.NavigationCamera navigationCamera, com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.gestures.GesturesPlugin gesturesPlugin, com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin locationPlugin, com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureActionListener? scaleActionListener = null, com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions options = NavigationScaleGestureHandlerOptions.<init>(context).build());
    method public void cleanup();
    method public com.mapbox.android.gestures.AndroidGesturesManager getCustomGesturesManager();
    method public com.mapbox.android.gestures.AndroidGesturesManager getInitialGesturesManager();
    method public void initialize();
    method public boolean isInitialized();
    method public void onAnimatorCancelling(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorEnding(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorInterrupting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator runningAnimator, String? runningAnimatorOwner, android.animation.ValueAnimator newAnimator, String? newAnimatorOwner);
    method public void onAnimatorStarting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    property public final com.mapbox.android.gestures.AndroidGesturesManager customGesturesManager;
    property public final com.mapbox.android.gestures.AndroidGesturesManager initialGesturesManager;
    property public final boolean isInitialized;
  }

  public final class NavigationScaleGestureHandlerOptions {
    method public float getFollowingInitialMoveThreshold();
    method public float getFollowingMultiFingerMoveThreshold();
    method public android.graphics.RectF? getFollowingMultiFingerProtectedMoveArea();
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder toBuilder();
    property public final float followingInitialMoveThreshold;
    property public final float followingMultiFingerMoveThreshold;
    property public final android.graphics.RectF? followingMultiFingerProtectedMoveArea;
  }

  public static final class NavigationScaleGestureHandlerOptions.Builder {
    ctor public NavigationScaleGestureHandlerOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions build();
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingInitialMoveThreshold(float followingInitialMoveThreshold);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingMultiFingerMoveThreshold(float followingMultiFingerMoveThreshold);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingMultiFingerProtectedMoveArea(android.graphics.RectF? followingMultiFingerProtectedMoveArea);
  }

}

package com.mapbox.navigation.ui.maps.camera.state {

  public enum NavigationCameraState {
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState FOLLOWING;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState IDLE;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState OVERVIEW;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState TRANSITION_TO_FOLLOWING;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState TRANSITION_TO_OVERVIEW;
  }

  public fun interface NavigationCameraStateChangedObserver {
    method public void onNavigationCameraStateChanged(com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState navigationCameraState);
  }

}

package com.mapbox.navigation.ui.maps.camera.transition {

  public final class MapboxNavigationCameraStateTransition implements com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraStateTransition {
    ctor public MapboxNavigationCameraStateTransition(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.animation.CameraAnimationsPlugin cameraPlugin, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransition navigationCameraTransition = MapboxNavigationCameraTransition(mapboxMap, cameraPlugin));
    method public android.animation.AnimatorSet transitionToFollowing(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionToOverview(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet updateFrameForFollowing(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet updateFrameForOverview(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
  }

  public final class MapboxNavigationCameraTransition implements com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransition {
    ctor public MapboxNavigationCameraTransition(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.animation.CameraAnimationsPlugin cameraPlugin);
    method public android.animation.AnimatorSet transitionFromHighZoomToLowZoom(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionFromLowZoomToHighZoom(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionLinear(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
  }

  public final class MapboxNavigationCameraTransitionKt {
  }

  public interface NavigationCameraStateTransition {
    method public android.animation.AnimatorSet transitionToFollowing(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionToOverview(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet updateFrameForFollowing(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet updateFrameForOverview(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
  }

  public interface NavigationCameraTransition {
    method public android.animation.AnimatorSet transitionFromHighZoomToLowZoom(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionFromLowZoomToHighZoom(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionLinear(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
  }

  public final class NavigationCameraTransitionOptions {
    method public long getMaxDuration();
    method public com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder toBuilder();
    property public final long maxDuration;
  }

  public static final class NavigationCameraTransitionOptions.Builder {
    ctor public NavigationCameraTransitionOptions.Builder();
    method public com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions build();
    method public com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder maxDuration(long maxDuration);
  }

}

package com.mapbox.navigation.ui.maps.camera.utils {

  public final class MapboxNavigationCameraUtilsKt {
  }

}

package com.mapbox.navigation.ui.maps.camera.view {

  public final class MapboxRecenterButton extends androidx.constraintlayout.widget.ConstraintLayout {
    ctor public MapboxRecenterButton(android.content.Context context);
    ctor public MapboxRecenterButton(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public MapboxRecenterButton(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    method public void showTextAndExtend(long duration);
    method public void updateStyle(@StyleRes int style);
  }

  public final class MapboxRouteOverviewButton extends androidx.constraintlayout.widget.ConstraintLayout {
    ctor public MapboxRouteOverviewButton(android.content.Context context);
    ctor public MapboxRouteOverviewButton(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public MapboxRouteOverviewButton(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    method public void showTextAndExtend(long duration);
    method public void updateStyle(@StyleRes int style);
  }

}

package com.mapbox.navigation.ui.maps.guidance.junction.api {

  public final class MapboxJunctionApi {
    ctor public MapboxJunctionApi(String accessToken);
    method public void cancelAll();
    method public void generateJunction(com.mapbox.api.directions.v5.models.BannerInstructions instructions, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionError,com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionValue>> consumer);
  }

}

package com.mapbox.navigation.ui.maps.guidance.junction.model {

  public final class JunctionError {
    method public String? getErrorMessage();
    method public Throwable? getThrowable();
    property public final String? errorMessage;
    property public final Throwable? throwable;
  }

  public final class JunctionValue {
    method public android.graphics.Bitmap getBitmap();
    property public final android.graphics.Bitmap bitmap;
  }

}

package com.mapbox.navigation.ui.maps.guidance.junction.view {

  public final class MapboxJunctionView extends androidx.appcompat.widget.AppCompatImageView {
    ctor public MapboxJunctionView(android.content.Context context);
    ctor public MapboxJunctionView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public MapboxJunctionView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    method public void render(com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionError,com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionValue> result);
  }

}

package com.mapbox.navigation.ui.maps.guidance.signboard.api {

  public class MapboxExternalFileResolver extends com.caverock.androidsvg.SVGExternalFileResolver {
    ctor public MapboxExternalFileResolver(android.content.res.AssetManager assetManager);
  }

  public final class MapboxSignboardApi {
    ctor public MapboxSignboardApi(String accessToken, com.mapbox.navigation.ui.maps.guidance.signboard.api.SvgToBitmapParser parser, com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions options = MapboxSignboardOptions.<init>().build());
    ctor public MapboxSignboardApi(String accessToken, com.mapbox.navigation.ui.maps.guidance.signboard.api.SvgToBitmapParser parser);
    ctor public MapboxSignboardApi(String accessToken, android.content.Context applicationContext, com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions options = MapboxSignboardOptions.<init>().build());
    method public void cancelAll();
    method public void generateSignboard(com.mapbox.api.directions.v5.models.BannerInstructions instructions, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.signboard.model.SignboardError,com.mapbox.navigation.ui.maps.guidance.signboard.model.SignboardValue>> consumer);
  }

  public final class MapboxSvgToBitmapParser implements com.mapbox.navigation.ui.maps.guidance.signboard.api.SvgToBitmapParser {
    ctor public MapboxSvgToBitmapParser(com.caverock.androidsvg.SVGExternalFileResolver externalFileResolver);
    method public com.mapbox.bindgen.Expected<java.lang.String,android.graphics.Bitmap> parse(byte[] svg, com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions options);
  }

  public fun interface SvgToBitmapParser {
    method public com.mapbox.bindgen.Expected<java.lang.String,android.graphics.Bitmap> parse(byte[] svg, com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions options);
  }

}

package com.mapbox.navigation.ui.maps.guidance.signboard.model {

  public final class MapboxSignboardOptions {
    method public String getCssStyles();
    method public int getDesiredSignboardWidth();
    method public com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions.Builder toBuilder();
    property public final String cssStyles;
    property public final int desiredSignboardWidth;
  }

  public static final class MapboxSignboardOptions.Builder {
    ctor public MapboxSignboardOptions.Builder();
    method public com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions build();
    method public com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions.Builder cssStyles(String cssStyles);
    method public com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions.Builder desiredSignboardWidth(int desiredSignboardWidth);
  }

  public final class SignboardError {
    method public String? getErrorMessage();
    method public Throwable? getThrowable();
    property public final String? errorMessage;
    property public final Throwable? throwable;
  }

  public final class SignboardValue {
    method public android.graphics.Bitmap getBitmap();
    property public final android.graphics.Bitmap bitmap;
  }

}

package com.mapbox.navigation.ui.maps.guidance.signboard.view {

  public final class MapboxSignboardView extends androidx.appcompat.widget.AppCompatImageView {
    ctor public MapboxSignboardView(android.content.Context context);
    ctor public MapboxSignboardView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public MapboxSignboardView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    method public void render(com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.signboard.model.SignboardError,com.mapbox.navigation.ui.maps.guidance.signboard.model.SignboardValue> result);
  }

}

package com.mapbox.navigation.ui.maps.internal.route.line {

  public final class MapboxRouteLineApiExtensions {
    method public suspend Object? clearRouteLine(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineClearValue>> p);
    method public suspend Object? findClosestRoute(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, com.mapbox.geojson.Point target, com.mapbox.maps.MapboxMap mapboxMap, float padding, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteNotFound,com.mapbox.navigation.ui.maps.route.line.model.ClosestRouteValue>> p);
    method public suspend Object? getRouteDrawData(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> p);
    method public suspend Object? setRoutes(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteLine> newRoutes, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> p);
    method public suspend Object? showRouteWithLegIndexHighlighted(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, int legIndex, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue>> p);
    field public static final com.mapbox.navigation.ui.maps.internal.route.line.MapboxRouteLineApiExtensions INSTANCE;
  }

  public final class MapboxRouteLineUtils {
    method public java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteLineExpressionData> calculateRouteLineSegments(com.mapbox.api.directions.v5.models.DirectionsRoute route, java.util.List<java.lang.String> trafficBackfillRoadClasses, boolean isPrimaryRoute, com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources, double restrictedRoadSectionScale, boolean displayRestrictedRoadSections);
    method public static String? getBelowLayerIdToUse(String? belowLayerId, com.mapbox.maps.Style style);
    method @ColorInt public int getRouteColorForCongestion(String congestionValue, boolean isPrimaryRoute, com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources);
    method public kotlin.jvm.functions.Function0<java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteFeatureData>> getRouteFeatureDataProvider(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> directionsRoutes);
    method public kotlin.jvm.functions.Function0<java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteFeatureData>> getRouteLineFeatureDataProvider(java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteLine> directionsRoutes);
    field public static final com.mapbox.navigation.ui.maps.internal.route.line.MapboxRouteLineUtils INSTANCE;
  }

}

package com.mapbox.navigation.ui.maps.location {

  public final class NavigationLocationProvider implements com.mapbox.maps.plugin.locationcomponent.LocationProvider {
    ctor public NavigationLocationProvider();
    method public void changePosition(android.location.Location location, java.util.List<? extends android.location.Location> keyPoints = emptyList(), kotlin.jvm.functions.Function1<? super android.animation.ValueAnimator,kotlin.Unit>? latLngTransitionOptions = null, kotlin.jvm.functions.Function1<? super android.animation.ValueAnimator,kotlin.Unit>? bearingTransitionOptions = null);
    method public java.util.List<android.location.Location> getLastKeyPoints();
    method public android.location.Location? getLastLocation();
    method public void registerLocationConsumer(com.mapbox.maps.plugin.locationcomponent.LocationConsumer locationConsumer);
    method public void unRegisterLocationConsumer(com.mapbox.maps.plugin.locationcomponent.LocationConsumer locationConsumer);
    property public final java.util.List<android.location.Location> lastKeyPoints;
    property public final android.location.Location? lastLocation;
  }

}

package com.mapbox.navigation.ui.maps.route.arrow.api {

  public final class MapboxRouteArrowApi {
    ctor public MapboxRouteArrowApi();
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.arrow.model.InvalidPointError,com.mapbox.navigation.ui.maps.route.arrow.model.ArrowAddedValue> addArrow(com.mapbox.navigation.ui.maps.route.arrow.model.ManeuverArrow arrow);
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.arrow.model.InvalidPointError,com.mapbox.navigation.ui.maps.route.arrow.model.UpdateManeuverArrowValue> addUpcomingManeuverArrow(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.ClearArrowsValue clearArrows();
    method public java.util.List<com.mapbox.navigation.ui.maps.route.arrow.model.ManeuverArrow> getArrows();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.ArrowVisibilityChangeValue hideManeuverArrow();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.ArrowAddedValue redraw();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RemoveArrowValue removeArrow(com.mapbox.navigation.ui.maps.route.arrow.model.ManeuverArrow arrow);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.ArrowVisibilityChangeValue showManeuverArrow();
  }

  public final class MapboxRouteArrowView {
    ctor public MapboxRouteArrowView(com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions options);
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility(com.mapbox.maps.Style style);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.ArrowVisibilityChangeValue visibilityChange);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.ArrowAddedValue arrowAdded);
    method public void render(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.arrow.model.InvalidPointError,com.mapbox.navigation.ui.maps.route.arrow.model.ArrowAddedValue> expectedValue);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.RemoveArrowValue state);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.ClearArrowsValue state);
    method public void renderManeuverUpdate(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.arrow.model.InvalidPointError,com.mapbox.navigation.ui.maps.route.arrow.model.UpdateManeuverArrowValue> expectedValue);
  }

}

package com.mapbox.navigation.ui.maps.route.arrow.model {

  public final class ArrowAddedValue {
    method public com.mapbox.geojson.FeatureCollection getArrowHeadFeatureCollection();
    method public com.mapbox.geojson.FeatureCollection getArrowShaftFeatureCollection();
    property public final com.mapbox.geojson.FeatureCollection arrowHeadFeatureCollection;
    property public final com.mapbox.geojson.FeatureCollection arrowShaftFeatureCollection;
  }

  public final class ArrowVisibilityChangeValue {
    method public java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> getLayerVisibilityModifications();
    property public final java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> layerVisibilityModifications;
  }

  public final class ClearArrowsValue {
    method public com.mapbox.geojson.FeatureCollection getArrowHeadFeatureCollection();
    method public com.mapbox.geojson.FeatureCollection getArrowShaftFeatureCollection();
    property public final com.mapbox.geojson.FeatureCollection arrowHeadFeatureCollection;
    property public final com.mapbox.geojson.FeatureCollection arrowShaftFeatureCollection;
  }

  public final class InvalidPointError {
    ctor public InvalidPointError(String errorMessage, Throwable? throwable);
    method public String getErrorMessage();
    method public Throwable? getThrowable();
    property public final String errorMessage;
    property public final Throwable? throwable;
  }

  public final class ManeuverArrow {
    ctor public ManeuverArrow(java.util.List<com.mapbox.geojson.Point> points);
    method public java.util.List<com.mapbox.geojson.Point> getPoints();
    property public final java.util.List<com.mapbox.geojson.Point> points;
  }

  public final class RemoveArrowValue {
    method public com.mapbox.geojson.FeatureCollection getArrowHeadFeatureCollection();
    method public com.mapbox.geojson.FeatureCollection getArrowShaftFeatureCollection();
    property public final com.mapbox.geojson.FeatureCollection arrowHeadFeatureCollection;
    property public final com.mapbox.geojson.FeatureCollection arrowShaftFeatureCollection;
  }

  public final class RouteArrowOptions {
    method public String getAboveLayerId();
    method public int getArrowCasingColor();
    method public int getArrowColor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getArrowHeadCasingScaleExpression();
    method public android.graphics.drawable.Drawable getArrowHeadIcon();
    method public android.graphics.drawable.Drawable getArrowHeadIconCasing();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getArrowHeadScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getArrowShaftCasingScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getArrowShaftScaleExpression();
    method public double getTolerance();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder toBuilder(android.content.Context context);
    property public final String aboveLayerId;
    property public final int arrowCasingColor;
    property public final int arrowColor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression arrowHeadCasingScaleExpression;
    property public final android.graphics.drawable.Drawable arrowHeadIcon;
    property public final android.graphics.drawable.Drawable arrowHeadIconCasing;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression arrowHeadScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression arrowShaftCasingScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression arrowShaftScaleExpression;
    property public final double tolerance;
  }

  public static final class RouteArrowOptions.Builder {
    ctor public RouteArrowOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions build();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withAboveLayerId(String layerId);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowHeadIconCasingDrawable(@DrawableRes int drawable);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowHeadIconDrawable(@DrawableRes int drawable);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowShaftCasingScalingExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowShaftScalingExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowheadCasingScalingExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowheadScalingExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withTolerance(double tolerance);
  }

  public final class UpdateManeuverArrowValue {
    method public com.mapbox.geojson.Feature? getArrowHeadFeature();
    method public com.mapbox.geojson.Feature? getArrowShaftFeature();
    method public java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> getLayerVisibilityModifications();
    property public final com.mapbox.geojson.Feature? arrowHeadFeature;
    property public final com.mapbox.geojson.Feature? arrowShaftFeature;
    property public final java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> layerVisibilityModifications;
  }

}

package com.mapbox.navigation.ui.maps.route.line.api {

  public final class MapboxRouteLineApi {
    ctor public MapboxRouteLineApi(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions routeLineOptions);
    method public void clearRouteLine(com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineClearValue>> consumer);
    method public void findClosestRoute(com.mapbox.geojson.Point target, com.mapbox.maps.MapboxMap mapboxMap, float padding, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteNotFound,com.mapbox.navigation.ui.maps.route.line.model.ClosestRouteValue>> resultConsumer);
    method public com.mapbox.api.directions.v5.models.DirectionsRoute? getPrimaryRoute();
    method public void getRouteDrawData(com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public java.util.List<com.mapbox.api.directions.v5.models.DirectionsRoute> getRoutes();
    method public double getVanishPointOffset();
    method public void setRoutes(java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteLine> newRoutes, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue> setVanishingOffset(double offset);
    method public void showRouteWithLegIndexHighlighted(int legIndexToHighlight, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue>> consumer);
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue> updateTraveledRouteLine(com.mapbox.geojson.Point point);
    method public void updateWithRouteProgress(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue>> consumer);
    field public static final com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi.Companion Companion;
  }

  public static final class MapboxRouteLineApi.Companion {
  }

  public final class MapboxRouteLineView {
    ctor public MapboxRouteLineView(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions options);
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getAlternativeRoutesVisibility(com.mapbox.maps.Style style);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions getOptions();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getPrimaryRouteVisibility(com.mapbox.maps.Style style);
    method public void hideAlternativeRoutes(com.mapbox.maps.Style style);
    method public void hideOriginAndDestinationPoints(com.mapbox.maps.Style style);
    method public void hidePrimaryRoute(com.mapbox.maps.Style style);
    method public void initializeLayers(com.mapbox.maps.Style style);
    method public void renderClearRouteLineValue(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineClearValue> clearRouteLineValue);
    method public void renderRouteDrawData(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue> routeDrawData);
    method public void renderRouteLineUpdate(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue> update);
    method public void setOptions(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions p);
    method public void showAlternativeRoutes(com.mapbox.maps.Style style);
    method public void showOriginAndDestinationPoints(com.mapbox.maps.Style style);
    method public void showPrimaryRoute(com.mapbox.maps.Style style);
    property public final com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions options;
  }

}

package com.mapbox.navigation.ui.maps.route.line.model {

  public final class ClosestRouteValue {
    method public com.mapbox.api.directions.v5.models.DirectionsRoute getRoute();
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute route;
  }

  public final class MapboxRouteLineOptions {
    method public android.graphics.drawable.Drawable getDestinationIcon();
    method public boolean getDisplayRestrictedRoadSections();
    method public android.graphics.drawable.Drawable getOriginIcon();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources getResourceProvider();
    method public String? getRouteLineBelowLayerId();
    method public boolean getStyleInactiveRouteLegsIndependently();
    method public double getTolerance();
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder toBuilder(android.content.Context context);
    property public final android.graphics.drawable.Drawable destinationIcon;
    property public final boolean displayRestrictedRoadSections;
    property public final android.graphics.drawable.Drawable originIcon;
    property public final com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources resourceProvider;
    property public final String? routeLineBelowLayerId;
    property public final boolean styleInactiveRouteLegsIndependently;
    property public final double tolerance;
  }

  public static final class MapboxRouteLineOptions.Builder {
    ctor public MapboxRouteLineOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions build();
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder displayRestrictedRoadSections(boolean displayRestrictedRoadSections);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder styleInactiveRouteLegsIndependently(boolean enable);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder withRouteLineBelowLayerId(String layerId);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder withRouteLineResources(com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources resourceProvider);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder withRouteStyleDescriptors(java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteStyleDescriptor> routeStyleDescriptors);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder withTolerance(double tolerance);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder withVanishingRouteLineEnabled(boolean isEnabled);
  }

  public final class RouteFeatureData {
    ctor public RouteFeatureData(com.mapbox.api.directions.v5.models.DirectionsRoute route, com.mapbox.geojson.FeatureCollection featureCollection, com.mapbox.geojson.LineString lineString);
    method public com.mapbox.api.directions.v5.models.DirectionsRoute component1();
    method public com.mapbox.geojson.FeatureCollection component2();
    method public com.mapbox.geojson.LineString component3();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteFeatureData copy(com.mapbox.api.directions.v5.models.DirectionsRoute route, com.mapbox.geojson.FeatureCollection featureCollection, com.mapbox.geojson.LineString lineString);
    method public com.mapbox.geojson.FeatureCollection getFeatureCollection();
    method public com.mapbox.geojson.LineString getLineString();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute getRoute();
    property public final com.mapbox.geojson.FeatureCollection featureCollection;
    property public final com.mapbox.geojson.LineString lineString;
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute route;
  }

  public final class RouteLine {
    ctor public RouteLine(com.mapbox.api.directions.v5.models.DirectionsRoute route, String? identifier);
    method public com.mapbox.api.directions.v5.models.DirectionsRoute component1();
    method public String? component2();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLine copy(com.mapbox.api.directions.v5.models.DirectionsRoute route, String? identifier);
    method public String? getIdentifier();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute getRoute();
    property public final String? identifier;
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute route;
  }

  public final class RouteLineClearValue {
    method public com.mapbox.geojson.FeatureCollection getAltRoute1Source();
    method public com.mapbox.geojson.FeatureCollection getAltRoute2Source();
    method public com.mapbox.geojson.FeatureCollection getPrimaryRouteSource();
    method public com.mapbox.geojson.FeatureCollection getWaypointsSource();
    property public final com.mapbox.geojson.FeatureCollection altRoute1Source;
    property public final com.mapbox.geojson.FeatureCollection altRoute2Source;
    property public final com.mapbox.geojson.FeatureCollection primaryRouteSource;
    property public final com.mapbox.geojson.FeatureCollection waypointsSource;
  }

  public final class RouteLineColorResources {
    method public int getAlternativeRouteCasingColor();
    method public int getAlternativeRouteClosureColor();
    method public int getAlternativeRouteDefaultColor();
    method public int getAlternativeRouteHeavyColor();
    method public int getAlternativeRouteLowColor();
    method public int getAlternativeRouteModerateColor();
    method public int getAlternativeRouteRestrictedRoadColor();
    method public int getAlternativeRouteSevereColor();
    method public int getAlternativeRouteUnknownTrafficColor();
    method public int getInActiveRouteLegsColor();
    method public int getRestrictedRoadColor();
    method public int getRouteCasingColor();
    method public int getRouteClosureColor();
    method public int getRouteDefaultColor();
    method public int getRouteHeavyColor();
    method public int getRouteLineTraveledCasingColor();
    method public int getRouteLineTraveledColor();
    method public int getRouteLowCongestionColor();
    method public int getRouteModerateColor();
    method public int getRouteSevereColor();
    method public int getRouteUnknownTrafficColor();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder toBuilder();
    property public final int alternativeRouteCasingColor;
    property public final int alternativeRouteClosureColor;
    property public final int alternativeRouteDefaultColor;
    property public final int alternativeRouteHeavyColor;
    property public final int alternativeRouteLowColor;
    property public final int alternativeRouteModerateColor;
    property public final int alternativeRouteRestrictedRoadColor;
    property public final int alternativeRouteSevereColor;
    property public final int alternativeRouteUnknownTrafficColor;
    property public final int inActiveRouteLegsColor;
    property public final int restrictedRoadColor;
    property public final int routeCasingColor;
    property public final int routeClosureColor;
    property public final int routeDefaultColor;
    property public final int routeHeavyColor;
    property public final int routeLineTraveledCasingColor;
    property public final int routeLineTraveledColor;
    property public final int routeLowCongestionColor;
    property public final int routeModerateColor;
    property public final int routeSevereColor;
    property public final int routeUnknownTrafficColor;
  }

  public static final class RouteLineColorResources.Builder {
    ctor public RouteLineColorResources.Builder();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteClosureColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteDefaultColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteHeavyColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteLowColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteModerateColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteRestrictedRoadColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteSevereColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteUnknownTrafficColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources build();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inActiveRouteLegsColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder restrictedRoadColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeClosureColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeDefaultColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeHeavyColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeLineTraveledCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeLineTraveledColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeLowCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeModerateColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeSevereColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeUnknownTrafficColor(@ColorInt int color);
  }

  public final class RouteLineDistancesIndex {
    ctor public RouteLineDistancesIndex(com.mapbox.geojson.Point point, double distanceRemaining);
    method public com.mapbox.geojson.Point component1();
    method public double component2();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex copy(com.mapbox.geojson.Point point, double distanceRemaining);
    method public double getDistanceRemaining();
    method public com.mapbox.geojson.Point getPoint();
    property public final double distanceRemaining;
    property public final com.mapbox.geojson.Point point;
  }

  public final class RouteLineError {
    method public String getErrorMessage();
    method public Throwable? getThrowable();
    property public final String errorMessage;
    property public final Throwable? throwable;
  }

  public final class RouteLineExpressionData {
    ctor public RouteLineExpressionData(double offset, @ColorInt int segmentColor, int legIndex);
    method public double component1();
    method public int component2();
    method public int component3();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineExpressionData copy(double offset, int segmentColor, int legIndex);
    method public int getLegIndex();
    method public double getOffset();
    method public int getSegmentColor();
    property public final int legIndex;
    property public final double offset;
    property public final int segmentColor;
  }

  public final class RouteLineGranularDistances {
    ctor public RouteLineGranularDistances(double distance, android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> distancesArray);
    method public double component1();
    method public android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> component2();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineGranularDistances copy(double distance, android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> distancesArray);
    method public double getDistance();
    method public android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> getDistancesArray();
    property public final double distance;
    property public final android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> distancesArray;
  }

  public final class RouteLineResources {
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getAlternativeRouteCasingLineScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getAlternativeRouteLineScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getAlternativeRouteTrafficLineScaleExpression();
    method public int getDestinationWaypointIcon();
    method public int getOriginWaypointIcon();
    method public double getRestrictedRoadSectionScale();
    method public boolean getRoundedLineCap();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteCasingLineScaleExpression();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources getRouteLineColorResources();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteLineScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteTrafficLineScaleExpression();
    method public java.util.List<java.lang.String> getTrafficBackfillRoadClasses();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder toBuilder();
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression alternativeRouteCasingLineScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression alternativeRouteLineScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression alternativeRouteTrafficLineScaleExpression;
    property public final int destinationWaypointIcon;
    property public final int originWaypointIcon;
    property public final double restrictedRoadSectionScale;
    property public final boolean roundedLineCap;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeCasingLineScaleExpression;
    property public final com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeLineScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeTrafficLineScaleExpression;
    property public final java.util.List<java.lang.String> trafficBackfillRoadClasses;
  }

  public static final class RouteLineResources.Builder {
    ctor public RouteLineResources.Builder();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder alternativeRouteCasingLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder alternativeRouteLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder alternativeRouteTrafficLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources build();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder destinationWaypointIcon(@DrawableRes int resource);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder originWaypointIcon(@DrawableRes int resource);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder restrictedRoadSectionScale(double scaleValue);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder roundedLineCap(boolean roundLineCap);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder routeCasingLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder routeLineColorResources(com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder routeLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder routeTrafficLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder trafficBackfillRoadClasses(java.util.List<java.lang.String> roadClasses);
  }

  public final class RouteLineScaleValue {
    ctor public RouteLineScaleValue(float scaleStop, float scaleMultiplier, float scale);
    method public float component1();
    method public float component2();
    method public float component3();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleValue copy(float scaleStop, float scaleMultiplier, float scale);
    method public float getScale();
    method public float getScaleMultiplier();
    method public float getScaleStop();
    property public final float scale;
    property public final float scaleMultiplier;
    property public final float scaleStop;
  }

  public final class RouteLineUpdateValue {
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getCasingLineExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteLineExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getTrafficLineExpression();
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression casingLineExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeLineExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression trafficLineExpression;
  }

  public final class RouteNotFound {
    method public String getErrorMessage();
    method public Throwable? getThrowable();
    property public final String errorMessage;
    property public final Throwable? throwable;
  }

  public final class RoutePoints {
    ctor public RoutePoints(java.util.List<? extends java.util.List<? extends java.util.List<com.mapbox.geojson.Point>>> nestedList, java.util.List<com.mapbox.geojson.Point> flatList);
    method public java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>> component1();
    method public java.util.List<com.mapbox.geojson.Point> component2();
    method public com.mapbox.navigation.ui.maps.route.line.model.RoutePoints copy(java.util.List<? extends java.util.List<? extends java.util.List<com.mapbox.geojson.Point>>> nestedList, java.util.List<com.mapbox.geojson.Point> flatList);
    method public java.util.List<com.mapbox.geojson.Point> getFlatList();
    method public java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>> getNestedList();
    property public final java.util.List<com.mapbox.geojson.Point> flatList;
    property public final java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>> nestedList;
  }

  public final class RouteSetValue {
    method public kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? getAltRoute1TrafficExpressionProvider();
    method public kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? getAltRoute2TrafficExpressionProvider();
    method public com.mapbox.geojson.FeatureCollection getAlternativeRoute1Source();
    method public com.mapbox.geojson.FeatureCollection getAlternativeRoute2Source();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getCasingLineExpression();
    method public com.mapbox.geojson.FeatureCollection getPrimaryRouteSource();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteLineExpression();
    method public kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? getTrafficLineExpressionProvider();
    method public com.mapbox.geojson.FeatureCollection getWaypointsSource();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue.MutableRouteSetValue toMutableValue();
    property public final kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? altRoute1TrafficExpressionProvider;
    property public final kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? altRoute2TrafficExpressionProvider;
    property public final com.mapbox.geojson.FeatureCollection alternativeRoute1Source;
    property public final com.mapbox.geojson.FeatureCollection alternativeRoute2Source;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression casingLineExpression;
    property public final com.mapbox.geojson.FeatureCollection primaryRouteSource;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeLineExpression;
    property public final kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? trafficLineExpressionProvider;
    property public final com.mapbox.geojson.FeatureCollection waypointsSource;
  }

  public static final class RouteSetValue.MutableRouteSetValue {
    method public kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? getAltRoute1TrafficExpression();
    method public kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? getAltRoute2TrafficExpression();
    method public com.mapbox.geojson.FeatureCollection getAlternativeRoute1Source();
    method public com.mapbox.geojson.FeatureCollection getAlternativeRoute2Source();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getCasingLineExpression();
    method public com.mapbox.geojson.FeatureCollection getPrimaryRouteSource();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteLineExpression();
    method public kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? getTrafficLineExpressionProvider();
    method public com.mapbox.geojson.FeatureCollection getWaypointsSource();
    method public void setAltRoute1TrafficExpression(kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? p);
    method public void setAltRoute2TrafficExpression(kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? p);
    method public void setAlternativeRoute1Source(com.mapbox.geojson.FeatureCollection p);
    method public void setAlternativeRoute2Source(com.mapbox.geojson.FeatureCollection p);
    method public void setCasingLineExpression(com.mapbox.maps.extension.style.expressions.generated.Expression p);
    method public void setPrimaryRouteSource(com.mapbox.geojson.FeatureCollection p);
    method public void setRouteLineExpression(com.mapbox.maps.extension.style.expressions.generated.Expression p);
    method public void setTrafficLineExpressionProvider(kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? p);
    method public void setWaypointsSource(com.mapbox.geojson.FeatureCollection p);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue toImmutableValue();
    property public final kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? altRoute1TrafficExpression;
    property public final kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? altRoute2TrafficExpression;
    property public final com.mapbox.geojson.FeatureCollection alternativeRoute1Source;
    property public final com.mapbox.geojson.FeatureCollection alternativeRoute2Source;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression casingLineExpression;
    property public final com.mapbox.geojson.FeatureCollection primaryRouteSource;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeLineExpression;
    property public final kotlin.jvm.functions.Function0<com.mapbox.maps.extension.style.expressions.generated.Expression>? trafficLineExpressionProvider;
    property public final com.mapbox.geojson.FeatureCollection waypointsSource;
  }

  public final class RouteSetValueKt {
  }

  public final class RouteStyleDescriptor {
    ctor public RouteStyleDescriptor(String routeIdentifier, @ColorInt int lineColor, @ColorInt int lineCasingColor);
    method public String component1();
    method public int component2();
    method public int component3();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteStyleDescriptor copy(String routeIdentifier, int lineColor, int lineCasingColor);
    method public int getLineCasingColor();
    method public int getLineColor();
    method public String getRouteIdentifier();
    property public final int lineCasingColor;
    property public final int lineColor;
    property public final String routeIdentifier;
  }

  public enum VanishingPointState {
    enum_constant public static final com.mapbox.navigation.ui.maps.route.line.model.VanishingPointState DISABLED;
    enum_constant public static final com.mapbox.navigation.ui.maps.route.line.model.VanishingPointState ENABLED;
    enum_constant public static final com.mapbox.navigation.ui.maps.route.line.model.VanishingPointState ONLY_INCREASE_PROGRESS;
  }

}

package com.mapbox.navigation.ui.maps.snapshotter.api {

  public final class MapboxSnapshotterApi {
    ctor public MapboxSnapshotterApi(android.content.Context context, com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions options, com.mapbox.maps.MapView mapView);
    method public void cancel();
    method public void generateSnapshot(com.mapbox.navigation.base.trip.model.RouteProgress progress, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.snapshotter.model.SnapshotError,com.mapbox.navigation.ui.maps.snapshotter.model.SnapshotValue>> consumer);
    method public android.content.Context getContext();
    property public final android.content.Context context;
  }

}

package com.mapbox.navigation.ui.maps.snapshotter.model {

  public final class MapboxSnapshotterOptions {
    method public android.graphics.Bitmap.Config getBitmapConfig();
    method public float getDensity();
    method public com.mapbox.maps.EdgeInsets getEdgeInsets();
    method public int getRoutePrecision();
    method public com.mapbox.maps.Size getSize();
    method public String getStyleUri();
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder toBuilder();
    property public final android.graphics.Bitmap.Config bitmapConfig;
    property public final float density;
    property public final com.mapbox.maps.EdgeInsets edgeInsets;
    property public final int routePrecision;
    property public final com.mapbox.maps.Size size;
    property public final String styleUri;
  }

  public static final class MapboxSnapshotterOptions.Builder {
    ctor public MapboxSnapshotterOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder bitmapConfig(android.graphics.Bitmap.Config bitmapConfig);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions build();
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder density(float density);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder edgeInsets(com.mapbox.maps.EdgeInsets edgeInsets);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder routePrecision(@IntRange(from=5, to=6) int routePrecision);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder size(com.mapbox.maps.Size size);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder styleUri(String styleUri);
  }

  public final class SnapshotError {
    method public String? getErrorMessage();
    method public Throwable? getThrowable();
    property public final String? errorMessage;
    property public final Throwable? throwable;
  }

  public final class SnapshotValue {
    method public android.graphics.Bitmap getSnapshot();
    property public final android.graphics.Bitmap snapshot;
  }

}

package com.mapbox.navigation.ui.maps.snapshotter.view {

  public final class MapboxSnapshotView extends androidx.appcompat.widget.AppCompatImageView {
    ctor public MapboxSnapshotView(android.content.Context context, android.util.AttributeSet? attrs = null, int defStyleAttr = 0);
    ctor public MapboxSnapshotView(android.content.Context context, android.util.AttributeSet? attrs = null);
    ctor public MapboxSnapshotView(android.content.Context context);
    method public void render(com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.snapshotter.model.SnapshotError,com.mapbox.navigation.ui.maps.snapshotter.model.SnapshotValue> result);
  }

}

