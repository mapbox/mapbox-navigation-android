// Signature format: 3.0
package com.mapbox.navigation.ui.maps {

  public final class PredictiveCacheController {
    ctor public PredictiveCacheController(com.mapbox.navigation.core.MapboxNavigation navigation, com.mapbox.navigation.ui.maps.PredictiveCacheControllerErrorHandler? predictiveCacheControllerErrorHandler = null);
    ctor public PredictiveCacheController(com.mapbox.navigation.core.MapboxNavigation navigation);
    method public void onDestroy();
    method public void removeMapInstance();
    method public void setMapInstance(com.mapbox.maps.MapboxMap map);
  }

  public interface PredictiveCacheControllerErrorHandler {
    method public void onError(String? message);
  }

  public final class PredictiveCacheControllerKt {
  }

}

package com.mapbox.navigation.ui.maps.camera {

  @UiThread public final class NavigationCamera {
    ctor public NavigationCamera(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.animation.CameraAnimationsPlugin cameraPlugin, com.mapbox.navigation.ui.maps.camera.data.ViewportDataSource viewportDataSource, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraStateTransition stateTransition = MapboxNavigationCameraStateTransition(mapboxMap, cameraPlugin));
    method public com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState getState();
    method public void registerNavigationCameraStateChangeObserver(com.mapbox.navigation.ui.maps.camera.state.NavigationCameraStateChangedObserver navigationCameraStateChangedObserver);
    method public void requestNavigationCameraToFollowing(android.animation.Animator.AnimatorListener? animatorListener = null);
    method public void requestNavigationCameraToIdle();
    method public void requestNavigationCameraToOverview(android.animation.Animator.AnimatorListener? animatorListener = null);
    method public void resetFrame();
    method public void unregisterNavigationCameraStateChangeObserver(com.mapbox.navigation.ui.maps.camera.state.NavigationCameraStateChangedObserver navigationCameraStateChangedObserver);
    property public final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState state;
    field public static final com.mapbox.navigation.ui.maps.camera.NavigationCamera.Companion Companion;
    field public static final String NAVIGATION_CAMERA_OWNER = "NAVIGATION_CAMERA_OWNER";
  }

  public static final class NavigationCamera.Companion {
  }

}

package com.mapbox.navigation.ui.maps.camera.data {

  public final class MapboxNavigationViewportDataSource implements com.mapbox.navigation.ui.maps.camera.data.ViewportDataSource {
    ctor public MapboxNavigationViewportDataSource(com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions options, com.mapbox.maps.MapboxMap mapboxMap);
    method public void additionalPointsToFrameForFollowing(java.util.List<com.mapbox.geojson.Point> points);
    method public void additionalPointsToFrameForOverview(java.util.List<com.mapbox.geojson.Point> points);
    method public void clearFollowingOverrides();
    method public void clearOverviewOverrides();
    method public void clearRouteData();
    method public void evaluate();
    method public void followingAnchorPropertyOverride(com.mapbox.maps.ScreenCoordinate? value);
    method public void followingBearingPropertyOverride(Double? value);
    method public void followingCenterPropertyOverride(com.mapbox.geojson.Point? value);
    method public void followingPaddingPropertyOverride(com.mapbox.maps.EdgeInsets? value);
    method public void followingPitchPropertyOverride(Double? value);
    method public void followingZoomPropertyOverride(Double? value);
    method public boolean getFollowingAnchorUpdatesAllowed();
    method public boolean getFollowingBearingUpdatesAllowed();
    method public boolean getFollowingCenterUpdatesAllowed();
    method public boolean getFollowingPaddingUpdatesAllowed();
    method public boolean getFollowingPitchUpdatesAllowed();
    method public boolean getFollowingZoomUpdatesAllowed();
    method public boolean getOverviewAnchorUpdatesAllowed();
    method public boolean getOverviewBearingUpdatesAllowed();
    method public boolean getOverviewCenterUpdatesAllowed();
    method public boolean getOverviewPaddingUpdatesAllowed();
    method public boolean getOverviewPitchUpdatesAllowed();
    method public boolean getOverviewZoomUpdatesAllowed();
    method public com.mapbox.navigation.ui.maps.camera.data.ViewportData getViewportData();
    method public void onLocationChanged(android.location.Location location);
    method public void onRouteChanged(com.mapbox.api.directions.v5.models.DirectionsRoute route);
    method public void onRouteProgressChanged(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public void overviewAnchorPropertyOverride(com.mapbox.maps.ScreenCoordinate? value);
    method public void overviewBearingPropertyOverride(Double? value);
    method public void overviewCenterPropertyOverride(com.mapbox.geojson.Point? value);
    method public void overviewPaddingPropertyOverride(com.mapbox.maps.EdgeInsets? value);
    method public void overviewPitchPropertyOverride(Double? value);
    method public void overviewZoomPropertyOverride(Double? value);
    method public void registerUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
    method public void setFollowingAnchorUpdatesAllowed(boolean p);
    method public void setFollowingBearingUpdatesAllowed(boolean p);
    method public void setFollowingCenterUpdatesAllowed(boolean p);
    method public void setFollowingPaddingUpdatesAllowed(boolean p);
    method public void setFollowingPitchUpdatesAllowed(boolean p);
    method public void setFollowingZoomUpdatesAllowed(boolean p);
    method public void setOverviewAnchorUpdatesAllowed(boolean p);
    method public void setOverviewBearingUpdatesAllowed(boolean p);
    method public void setOverviewCenterUpdatesAllowed(boolean p);
    method public void setOverviewPaddingUpdatesAllowed(boolean p);
    method public void setOverviewPitchUpdatesAllowed(boolean p);
    method public void setOverviewZoomUpdatesAllowed(boolean p);
    method public void unregisterUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
    property public final boolean followingAnchorUpdatesAllowed;
    property public final boolean followingBearingUpdatesAllowed;
    property public final boolean followingCenterUpdatesAllowed;
    property public final boolean followingPaddingUpdatesAllowed;
    property public final boolean followingPitchUpdatesAllowed;
    property public final boolean followingZoomUpdatesAllowed;
    property public final boolean overviewAnchorUpdatesAllowed;
    property public final boolean overviewBearingUpdatesAllowed;
    property public final boolean overviewCenterUpdatesAllowed;
    property public final boolean overviewPaddingUpdatesAllowed;
    property public final boolean overviewPitchUpdatesAllowed;
    property public final boolean overviewZoomUpdatesAllowed;
  }

  public final class MapboxNavigationViewportDataSourceKt {
  }

  public final class MapboxNavigationViewportDataSourceOptions {
    method public double getMaxFollowingPitch();
    method public double getMaxZoom();
    method public double getMinFollowingZoom();
    method public com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions.Builder toBuilder();
    property public final double maxFollowingPitch;
    property public final double maxZoom;
    property public final double minFollowingZoom;
  }

  public static final class MapboxNavigationViewportDataSourceOptions.Builder {
    ctor public MapboxNavigationViewportDataSourceOptions.Builder();
    method public com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions build();
    method public com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions.Builder maxFollowingPitch(double maxFollowingPitch);
    method public com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions.Builder maxZoom(double maxZoom);
    method public com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions.Builder minFollowingZoom(double minFollowingZoom);
  }

  public final class ViewportData {
    ctor public ViewportData(com.mapbox.maps.CameraOptions cameraForFollowing, com.mapbox.maps.CameraOptions cameraForOverview);
    method public com.mapbox.maps.CameraOptions component1();
    method public com.mapbox.maps.CameraOptions component2();
    method public com.mapbox.navigation.ui.maps.camera.data.ViewportData copy(com.mapbox.maps.CameraOptions cameraForFollowing, com.mapbox.maps.CameraOptions cameraForOverview);
    method public com.mapbox.maps.CameraOptions getCameraForFollowing();
    method public com.mapbox.maps.CameraOptions getCameraForOverview();
    property public final com.mapbox.maps.CameraOptions cameraForFollowing;
    property public final com.mapbox.maps.CameraOptions cameraForOverview;
  }

  public interface ViewportDataSource {
    method public com.mapbox.navigation.ui.maps.camera.data.ViewportData getViewportData();
    method public void registerUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
    method public void unregisterUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
  }

  public interface ViewportDataSourceUpdateObserver {
    method public void viewportDataSourceUpdated(com.mapbox.navigation.ui.maps.camera.data.ViewportData viewportData);
  }

}

package com.mapbox.navigation.ui.maps.camera.lifecycle {

  public final class NavigationBasicGesturesHandler implements com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener {
    ctor public NavigationBasicGesturesHandler(com.mapbox.navigation.ui.maps.camera.NavigationCamera navigationCamera);
    method public void onAnimatorCancelling(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorEnding(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorInterrupting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator runningAnimator, String? runningAnimatorOwner, android.animation.ValueAnimator newAnimator, String? newAnimatorOwner);
    method public void onAnimatorStarting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
  }

  public interface NavigationScaleGestureActionListener {
    method public void onNavigationScaleGestureAction();
  }

  public final class NavigationScaleGestureHandler implements com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener {
    ctor public NavigationScaleGestureHandler(android.content.Context context, com.mapbox.navigation.ui.maps.camera.NavigationCamera navigationCamera, com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.gestures.GesturesPlugin gesturesPlugin, com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin locationPlugin, com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureActionListener? scaleActionListener = null, com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions options = NavigationScaleGestureHandlerOptions.<init>(context).build());
    method public void cleanup();
    method public com.mapbox.android.gestures.AndroidGesturesManager getCustomGesturesManager();
    method public com.mapbox.android.gestures.AndroidGesturesManager getInitialGesturesManager();
    method public void initialize();
    method public boolean isInitialized();
    method public void onAnimatorCancelling(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorEnding(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorInterrupting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator runningAnimator, String? runningAnimatorOwner, android.animation.ValueAnimator newAnimator, String? newAnimatorOwner);
    method public void onAnimatorStarting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    property public final com.mapbox.android.gestures.AndroidGesturesManager customGesturesManager;
    property public final com.mapbox.android.gestures.AndroidGesturesManager initialGesturesManager;
    property public final boolean isInitialized;
  }

  public final class NavigationScaleGestureHandlerOptions {
    method public float getFollowingInitialMoveThreshold();
    method public float getFollowingMultiFingerMoveThreshold();
    method public android.graphics.RectF? getFollowingMultiFingerProtectedMoveArea();
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder toBuilder();
    property public final float followingInitialMoveThreshold;
    property public final float followingMultiFingerMoveThreshold;
    property public final android.graphics.RectF? followingMultiFingerProtectedMoveArea;
  }

  public static final class NavigationScaleGestureHandlerOptions.Builder {
    ctor public NavigationScaleGestureHandlerOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions build();
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingInitialMoveThreshold(float followingInitialMoveThreshold);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingMultiFingerMoveThreshold(float followingMultiFingerMoveThreshold);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingMultiFingerProtectedMoveArea(android.graphics.RectF? followingMultiFingerProtectedMoveArea);
  }

}

package com.mapbox.navigation.ui.maps.camera.state {

  public enum NavigationCameraState {
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState FOLLOWING;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState IDLE;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState OVERVIEW;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState TRANSITION_TO_FOLLOWING;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState TRANSITION_TO_OVERVIEW;
  }

  public interface NavigationCameraStateChangedObserver {
    method public void onNavigationCameraStateChanged(com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState navigationCameraState);
  }

}

package com.mapbox.navigation.ui.maps.camera.transition {

  public final class MapboxNavigationCameraStateTransition implements com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraStateTransition {
    ctor public MapboxNavigationCameraStateTransition(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.animation.CameraAnimationsPlugin cameraPlugin, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransition navigationCameraTransition = MapboxNavigationCameraTransition(mapboxMap, cameraPlugin));
    method public android.animation.AnimatorSet transitionToFollowing(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet transitionToOverview(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet updateFrameForFollowing(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet updateFrameForOverview(com.mapbox.maps.CameraOptions cameraOptions);
  }

  public final class MapboxNavigationCameraTransition implements com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransition {
    ctor public MapboxNavigationCameraTransition(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.animation.CameraAnimationsPlugin cameraPlugin);
    method public android.animation.AnimatorSet transitionFromHighZoomToLowZoom(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet transitionFromLowZoomToHighZoom(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet transitionLinear(com.mapbox.maps.CameraOptions cameraOptions);
  }

  public final class MapboxNavigationCameraTransitionKt {
  }

  public interface NavigationCameraStateTransition {
    method public android.animation.AnimatorSet transitionToFollowing(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet transitionToOverview(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet updateFrameForFollowing(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet updateFrameForOverview(com.mapbox.maps.CameraOptions cameraOptions);
  }

  public interface NavigationCameraTransition {
    method public android.animation.AnimatorSet transitionFromHighZoomToLowZoom(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet transitionFromLowZoomToHighZoom(com.mapbox.maps.CameraOptions cameraOptions);
    method public android.animation.AnimatorSet transitionLinear(com.mapbox.maps.CameraOptions cameraOptions);
  }

}

package com.mapbox.navigation.ui.maps.camera.utils {

  public final class MapboxNavigationCameraUtilsKt {
  }

}

package com.mapbox.navigation.ui.maps.internal.route.line {

  public final class MapboxRouteLineUtils {
    method public java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteLineExpressionData> calculateRouteLineSegments(com.mapbox.api.directions.v5.models.DirectionsRoute route, java.util.List<java.lang.String> trafficBackfillRoadClasses, boolean isPrimaryRoute, com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources);
    method public static String? getBelowLayerIdToUse(String? belowLayerId, com.mapbox.maps.Style style);
    method @ColorInt public int getRouteColorForCongestion(String congestionValue, boolean isPrimaryRoute, com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources);
    method public kotlin.jvm.functions.Function0<java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteFeatureData>> getRouteFeatureDataProvider(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> directionsRoutes);
    method public kotlin.jvm.functions.Function0<java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteFeatureData>> getRouteLineFeatureDataProvider(java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteLine> directionsRoutes);
    field public static final com.mapbox.navigation.ui.maps.internal.route.line.MapboxRouteLineUtils INSTANCE;
  }

}

package com.mapbox.navigation.ui.maps.location {

  public final class NavigationLocationProvider implements com.mapbox.maps.plugin.locationcomponent.LocationProvider {
    ctor public NavigationLocationProvider();
    method public void changePosition(android.location.Location location, java.util.List<? extends android.location.Location> keyPoints = emptyList(), kotlin.jvm.functions.Function1<? super android.animation.ValueAnimator,kotlin.Unit>? latLngTransitionOptions = null, kotlin.jvm.functions.Function1<? super android.animation.ValueAnimator,kotlin.Unit>? bearingTransitionOptions = null);
    method public java.util.List<android.location.Location> getLastKeyPoints();
    method public android.location.Location? getLastLocation();
    method public void registerLocationConsumer(com.mapbox.maps.plugin.locationcomponent.LocationConsumer locationConsumer);
    method public void unRegisterLocationConsumer(com.mapbox.maps.plugin.locationcomponent.LocationConsumer locationConsumer);
    property public final java.util.List<android.location.Location> lastKeyPoints;
    property public final android.location.Location? lastLocation;
  }

}

package com.mapbox.navigation.ui.maps.route.arrow.api {

  public final class MapboxRouteArrowApi {
    ctor public MapboxRouteArrowApi();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowState.UpdateRouteArrowVisibilityState hideManeuverArrow();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowState.UpdateManeuverArrowState redraw();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowState.UpdateRouteArrowVisibilityState showManeuverArrow();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowState.UpdateManeuverArrowState updateUpcomingManeuverArrow(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
  }

  public final class MapboxRouteArrowView {
    ctor public MapboxRouteArrowView(com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions options);
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility(com.mapbox.maps.Style style);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowState.UpdateRouteArrowVisibilityState state);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowState.UpdateManeuverArrowState state);
  }

}

package com.mapbox.navigation.ui.maps.route.arrow.model {

  public final class RouteArrowOptions {
    method public String getAboveLayerId();
    method public int getArrowBorderColor();
    method public int getArrowColor();
    method public android.graphics.drawable.Drawable getArrowHeadIcon();
    method public android.graphics.drawable.Drawable getArrowHeadIconBorder();
    method public double getTolerance();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder toBuilder(android.content.Context context);
    property public final String aboveLayerId;
    property public final int arrowBorderColor;
    property public final int arrowColor;
    property public final android.graphics.drawable.Drawable arrowHeadIcon;
    property public final android.graphics.drawable.Drawable arrowHeadIconBorder;
    property public final double tolerance;
  }

  public static final class RouteArrowOptions.Builder {
    ctor public RouteArrowOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions build();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withAboveLayerId(String layerId);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowBorderColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowHeadIconCasingDrawable(@DrawableRes int drawable);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowHeadIconDrawable(@DrawableRes int drawable);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withTolerance(double tolerance);
  }

  public abstract sealed class RouteArrowState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public static final class RouteArrowState.UpdateManeuverArrowState extends com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowState {
    ctor public RouteArrowState.UpdateManeuverArrowState(java.util.List<? extends kotlin.Pair<java.lang.String,? extends com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> layerVisibilityModifications, com.mapbox.geojson.Feature? arrowShaftFeature, com.mapbox.geojson.Feature? arrowHeadFeature);
    method public com.mapbox.geojson.Feature? getArrowHeadFeature();
    method public com.mapbox.geojson.Feature? getArrowShaftFeature();
    method public java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> getVisibilityChanges();
  }

  public static final class RouteArrowState.UpdateRouteArrowVisibilityState extends com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowState {
    ctor public RouteArrowState.UpdateRouteArrowVisibilityState(java.util.List<? extends kotlin.Pair<java.lang.String,? extends com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> layerVisibilityModifications);
    method public java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> getVisibilityChanges();
  }

}

package com.mapbox.navigation.ui.maps.route.line.api {

  public final class MapboxRouteLineApi {
    ctor public MapboxRouteLineApi(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions routeLineOptions);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.ClearRouteLineState clearRouteLine();
    method public void findClosestRoute(com.mapbox.geojson.Point target, com.mapbox.maps.MapboxMap mapboxMap, float padding, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.ClosestRouteState> resultConsumer);
    method public suspend Object? findClosestRoute(com.mapbox.geojson.Point target, com.mapbox.maps.MapboxMap mapboxMap, float padding, kotlin.coroutines.Continuation<? super com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.ClosestRouteState> p);
    method public com.mapbox.api.directions.v5.models.DirectionsRoute? getPrimaryRoute();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.RouteSetState getRouteDrawData();
    method public java.util.List<com.mapbox.api.directions.v5.models.DirectionsRoute> getRoutes();
    method public double getVanishPointOffset();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.UpdateLayerVisibilityState hideAlternativeRoutes();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.UpdateLayerVisibilityState hidePrimaryRoute();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.RouteSetState setRoutes(java.util.List<com.mapbox.navigation.ui.maps.route.line.model.RouteLine> newRoutes);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.VanishingRouteLineUpdateState? setVanishingOffset(double offset);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.UpdateLayerVisibilityState showAlternativeRoutes();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.UpdateLayerVisibilityState showPrimaryRoute();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.RouteSetState updateToPrimaryRoute(com.mapbox.api.directions.v5.models.DirectionsRoute route);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.VanishingRouteLineUpdateState? updateTraveledRouteLine(com.mapbox.geojson.Point point);
    method public void updateWithRouteProgress(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
  }

  public final class MapboxRouteLineView {
    ctor public MapboxRouteLineView(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions options);
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getAlternativeRoutesVisibility(com.mapbox.maps.Style style);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions getOptions();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getPrimaryRouteVisibility(com.mapbox.maps.Style style);
    method @Deprecated public void hideOriginAndDestinationPoints(com.mapbox.maps.Style style);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.RouteSetState routeDrawData);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.VanishingRouteLineUpdateState vanishingRouteLineState);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.ClearRouteLineState clearRouteLineData);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.line.model.RouteLineState.UpdateLayerVisibilityState state);
    method public void setOptions(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions p);
    method @Deprecated public void showOriginAndDestinationPoints(com.mapbox.maps.Style style);
    property public final com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions options;
  }

}

package com.mapbox.navigation.ui.maps.route.line.model {

  public final class MapboxRouteLineOptions {
    method public android.graphics.drawable.Drawable getDestinationIcon();
    method public android.graphics.drawable.Drawable getOriginIcon();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources getResourceProvider();
    method public String? getRouteLineBelowLayerId();
    method public double getTolerance();
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder toBuilder(android.content.Context context);
    property public final android.graphics.drawable.Drawable destinationIcon;
    property public final android.graphics.drawable.Drawable originIcon;
    property public final com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources resourceProvider;
    property public final String? routeLineBelowLayerId;
    property public final double tolerance;
  }

  public static final class MapboxRouteLineOptions.Builder {
    ctor public MapboxRouteLineOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions build();
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder withRouteLineBelowLayerId(String layerId);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder withRouteLineResources(com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources resourceProvider);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder withTolerance(double tolerance);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions.Builder withVanishingRouteLineEnabled(boolean isEnabled);
  }

  public final class RouteFeatureData {
    ctor public RouteFeatureData(com.mapbox.api.directions.v5.models.DirectionsRoute route, com.mapbox.geojson.FeatureCollection featureCollection, com.mapbox.geojson.LineString lineString);
    method public com.mapbox.api.directions.v5.models.DirectionsRoute component1();
    method public com.mapbox.geojson.FeatureCollection component2();
    method public com.mapbox.geojson.LineString component3();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteFeatureData copy(com.mapbox.api.directions.v5.models.DirectionsRoute route, com.mapbox.geojson.FeatureCollection featureCollection, com.mapbox.geojson.LineString lineString);
    method public com.mapbox.geojson.FeatureCollection getFeatureCollection();
    method public com.mapbox.geojson.LineString getLineString();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute getRoute();
    property public final com.mapbox.geojson.FeatureCollection featureCollection;
    property public final com.mapbox.geojson.LineString lineString;
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute route;
  }

  public final class RouteLine {
    ctor public RouteLine(com.mapbox.api.directions.v5.models.DirectionsRoute route, String? identifier);
    method public com.mapbox.api.directions.v5.models.DirectionsRoute component1();
    method public String? component2();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLine copy(com.mapbox.api.directions.v5.models.DirectionsRoute route, String? identifier);
    method public String? getIdentifier();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute getRoute();
    property public final String? identifier;
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute route;
  }

  public final class RouteLineColorResources {
    method public int getAlternativeRouteCasingColor();
    method public int getAlternativeRouteDefaultColor();
    method public int getAlternativeRouteHeavyColor();
    method public int getAlternativeRouteLowColor();
    method public int getAlternativeRouteModerateColor();
    method public int getAlternativeRouteSevereColor();
    method public int getAlternativeRouteUnknownTrafficColor();
    method public int getRouteCasingColor();
    method public int getRouteDefaultColor();
    method public int getRouteHeavyColor();
    method public int getRouteLineTraveledCasingColor();
    method public int getRouteLineTraveledColor();
    method public int getRouteLowCongestionColor();
    method public int getRouteModerateColor();
    method public int getRouteSevereColor();
    method public int getRouteUnknownTrafficColor();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder toBuilder();
    property public final int alternativeRouteCasingColor;
    property public final int alternativeRouteDefaultColor;
    property public final int alternativeRouteHeavyColor;
    property public final int alternativeRouteLowColor;
    property public final int alternativeRouteModerateColor;
    property public final int alternativeRouteSevereColor;
    property public final int alternativeRouteUnknownTrafficColor;
    property public final int routeCasingColor;
    property public final int routeDefaultColor;
    property public final int routeHeavyColor;
    property public final int routeLineTraveledCasingColor;
    property public final int routeLineTraveledColor;
    property public final int routeLowCongestionColor;
    property public final int routeModerateColor;
    property public final int routeSevereColor;
    property public final int routeUnknownTrafficColor;
  }

  public static final class RouteLineColorResources.Builder {
    ctor public RouteLineColorResources.Builder();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteDefaultColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteHeavyColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteLowColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteModerateColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteSevereColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteUnknownTrafficColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources build();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeDefaultColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeHeavyColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeLineTraveledCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeLineTraveledColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeLowCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeModerateColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeSevereColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeUnknownTrafficColor(@ColorInt int color);
  }

  public final class RouteLineDistancesIndex {
    ctor public RouteLineDistancesIndex(com.mapbox.geojson.Point point, double distanceRemaining);
    method public com.mapbox.geojson.Point component1();
    method public double component2();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex copy(com.mapbox.geojson.Point point, double distanceRemaining);
    method public double getDistanceRemaining();
    method public com.mapbox.geojson.Point getPoint();
    property public final double distanceRemaining;
    property public final com.mapbox.geojson.Point point;
  }

  public final class RouteLineExpressionData {
    ctor public RouteLineExpressionData(double offset, @ColorInt int segmentColor);
    method public double component1();
    method public int component2();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineExpressionData copy(double offset, int segmentColor);
    method public double getOffset();
    method public int getSegmentColor();
    property public final double offset;
    property public final int segmentColor;
  }

  public final class RouteLineGranularDistances {
    ctor public RouteLineGranularDistances(double distance, android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> distancesArray);
    method public double component1();
    method public android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> component2();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineGranularDistances copy(double distance, android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> distancesArray);
    method public double getDistance();
    method public android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> getDistancesArray();
    property public final double distance;
    property public final android.util.SparseArray<com.mapbox.navigation.ui.maps.route.line.model.RouteLineDistancesIndex> distancesArray;
  }

  public final class RouteLineResources {
    method public int getDestinationWaypointIcon();
    method public int getOriginWaypointIcon();
    method public boolean getRoundedLineCap();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteCasingLineScaleExpression();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources getRouteLineColorResources();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteLineScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteTrafficLineScaleExpression();
    method public java.util.List<java.lang.String> getTrafficBackfillRoadClasses();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder toBuilder();
    property public final int destinationWaypointIcon;
    property public final int originWaypointIcon;
    property public final boolean roundedLineCap;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeCasingLineScaleExpression;
    property public final com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeLineScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeTrafficLineScaleExpression;
    property public final java.util.List<java.lang.String> trafficBackfillRoadClasses;
  }

  public static final class RouteLineResources.Builder {
    ctor public RouteLineResources.Builder();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources build();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder destinationWaypointIcon(@DrawableRes int resource);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder originWaypointIcon(@DrawableRes int resource);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder roundedLineCap(boolean roundLineCap);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder routeCasingLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder routeLineColorResources(com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder routeLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder routeTrafficLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineResources.Builder trafficBackfillRoadClasses(java.util.List<java.lang.String> roadClasses);
  }

  public final class RouteLineScaleValue {
    ctor public RouteLineScaleValue(float scaleStop, float scaleMultiplier, float scale);
    method public float component1();
    method public float component2();
    method public float component3();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleValue copy(float scaleStop, float scaleMultiplier, float scale);
    method public float getScale();
    method public float getScaleMultiplier();
    method public float getScaleStop();
    property public final float scale;
    property public final float scaleMultiplier;
    property public final float scaleStop;
  }

  public abstract sealed class RouteLineState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public static final class RouteLineState.ClearRouteLineState extends com.mapbox.navigation.ui.maps.route.line.model.RouteLineState {
    ctor public RouteLineState.ClearRouteLineState(com.mapbox.geojson.FeatureCollection primaryRouteSource, com.mapbox.geojson.FeatureCollection altRoute1Source, com.mapbox.geojson.FeatureCollection altRoute2Source, com.mapbox.geojson.FeatureCollection waypointsSource);
    method public com.mapbox.geojson.FeatureCollection getAlternativeRoute1Source();
    method public com.mapbox.geojson.FeatureCollection getAlternativeRoute2Source();
    method public com.mapbox.geojson.FeatureCollection getOriginAndDestinationPointsSource();
    method public com.mapbox.geojson.FeatureCollection getPrimaryRouteSource();
  }

  public static final class RouteLineState.ClosestRouteState extends com.mapbox.navigation.ui.maps.route.line.model.RouteLineState {
    ctor public RouteLineState.ClosestRouteState(int routeIndex);
    method public int getRouteIndex();
  }

  public static final class RouteLineState.RouteSetState extends com.mapbox.navigation.ui.maps.route.line.model.RouteLineState {
    ctor public RouteLineState.RouteSetState(com.mapbox.geojson.FeatureCollection primaryRouteSource, com.mapbox.maps.extension.style.expressions.generated.Expression trafficLineExpression, com.mapbox.maps.extension.style.expressions.generated.Expression routeLineExpression, com.mapbox.maps.extension.style.expressions.generated.Expression casingLineExpression, com.mapbox.maps.extension.style.expressions.generated.Expression altRoute1TrafficExpression, com.mapbox.maps.extension.style.expressions.generated.Expression altRoute2TrafficExpression, com.mapbox.geojson.FeatureCollection altRoute1Source, com.mapbox.geojson.FeatureCollection altRoute2Source, com.mapbox.geojson.FeatureCollection waypointsSource);
    method public com.mapbox.geojson.FeatureCollection getAlternativeRoute1Source();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getAlternativeRoute1TrafficExpression();
    method public com.mapbox.geojson.FeatureCollection getAlternativeRoute2Source();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getAlternativeRoute2TrafficExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getCasingLineExpression();
    method public com.mapbox.geojson.FeatureCollection getOriginAndDestinationPointsSource();
    method public com.mapbox.geojson.FeatureCollection getPrimaryRouteSource();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteLineExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getTrafficLineExpression();
  }

  public static final class RouteLineState.UpdateLayerVisibilityState extends com.mapbox.navigation.ui.maps.route.line.model.RouteLineState {
    ctor public RouteLineState.UpdateLayerVisibilityState(java.util.List<? extends kotlin.Pair<java.lang.String,? extends com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> layerVisibilityModifications);
    method public java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> getLayerVisibilityChanges();
  }

  public static final class RouteLineState.VanishingRouteLineUpdateState extends com.mapbox.navigation.ui.maps.route.line.model.RouteLineState {
    ctor public RouteLineState.VanishingRouteLineUpdateState(com.mapbox.maps.extension.style.expressions.generated.Expression trafficLineExpression, com.mapbox.maps.extension.style.expressions.generated.Expression routeLineExpression, com.mapbox.maps.extension.style.expressions.generated.Expression casingLineExpression);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getCasingLineExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteLineExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getTrafficLineExpression();
  }

  public final class RoutePoints {
    ctor public RoutePoints(java.util.List<? extends java.util.List<? extends java.util.List<com.mapbox.geojson.Point>>> nestedList, java.util.List<com.mapbox.geojson.Point> flatList);
    method public java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>> component1();
    method public java.util.List<com.mapbox.geojson.Point> component2();
    method public com.mapbox.navigation.ui.maps.route.line.model.RoutePoints copy(java.util.List<? extends java.util.List<? extends java.util.List<com.mapbox.geojson.Point>>> nestedList, java.util.List<com.mapbox.geojson.Point> flatList);
    method public java.util.List<com.mapbox.geojson.Point> getFlatList();
    method public java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>> getNestedList();
    property public final java.util.List<com.mapbox.geojson.Point> flatList;
    property public final java.util.List<java.util.List<java.util.List<com.mapbox.geojson.Point>>> nestedList;
  }

  public final class RouteStyleDescriptor {
    ctor public RouteStyleDescriptor(String routeIdentifier, int lineColorResourceId, int lineCasingColorResourceId);
    method public String component1();
    method public int component2();
    method public int component3();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteStyleDescriptor copy(String routeIdentifier, int lineColorResourceId, int lineCasingColorResourceId);
    method public int getLineCasingColorResourceId();
    method public int getLineColorResourceId();
    method public String getRouteIdentifier();
    property public final int lineCasingColorResourceId;
    property public final int lineColorResourceId;
    property public final String routeIdentifier;
  }

  public enum VanishingPointState {
    enum_constant public static final com.mapbox.navigation.ui.maps.route.line.model.VanishingPointState DISABLED;
    enum_constant public static final com.mapbox.navigation.ui.maps.route.line.model.VanishingPointState ENABLED;
    enum_constant public static final com.mapbox.navigation.ui.maps.route.line.model.VanishingPointState ONLY_INCREASE_PROGRESS;
  }

}

package com.mapbox.navigation.ui.maps.signboard.api {

  public final class MapboxSignboardApi implements com.mapbox.navigation.ui.base.api.signboard.SignboardApi {
    ctor public MapboxSignboardApi(String accessToken);
    method public void cancelAll();
    method public void generateSignboard(com.mapbox.api.directions.v5.models.BannerInstructions instructions, com.mapbox.navigation.ui.base.api.signboard.SignboardReadyCallback callback);
    field public static final com.mapbox.navigation.ui.maps.signboard.api.MapboxSignboardApi.Companion Companion;
  }

  public static final class MapboxSignboardApi.Companion {
  }

}

package com.mapbox.navigation.ui.maps.signboard.view {

  public final class MapboxSignboardView extends androidx.appcompat.widget.AppCompatImageView implements com.mapbox.navigation.ui.base.MapboxView<com.mapbox.navigation.ui.base.model.signboard.SignboardState> {
    ctor public MapboxSignboardView(android.content.Context context, android.util.AttributeSet? attrs = null, int defStyleAttr = 0);
    ctor public MapboxSignboardView(android.content.Context context, android.util.AttributeSet? attrs = null);
    ctor public MapboxSignboardView(android.content.Context context);
    method public void render(com.mapbox.navigation.ui.base.model.signboard.SignboardState state);
  }

}

package com.mapbox.navigation.ui.maps.snapshotter.api {

  public final class MapboxSnapshotterApi implements com.mapbox.navigation.ui.base.api.snapshotter.SnapshotterApi {
    ctor public MapboxSnapshotterApi(android.content.Context context, com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions options, com.mapbox.maps.MapView mapView);
    method public void cancel();
    method public void generateSnapshot(com.mapbox.navigation.base.trip.model.RouteProgress progress, com.mapbox.navigation.ui.base.api.snapshotter.SnapshotReadyCallback callback);
    method public android.content.Context getContext();
    property public final android.content.Context context;
  }

}

package com.mapbox.navigation.ui.maps.snapshotter.model {

  public final class MapboxSnapshotterOptions {
    method public android.graphics.Bitmap.Config getBitmapConfig();
    method public float getDensity();
    method public com.mapbox.maps.EdgeInsets getEdgeInsets();
    method public com.mapbox.maps.Size getSize();
    method public String getStyleUri();
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder toBuilder();
    property public final android.graphics.Bitmap.Config bitmapConfig;
    property public final float density;
    property public final com.mapbox.maps.EdgeInsets edgeInsets;
    property public final com.mapbox.maps.Size size;
    property public final String styleUri;
  }

  public static final class MapboxSnapshotterOptions.Builder {
    ctor public MapboxSnapshotterOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder bitmapConfig(android.graphics.Bitmap.Config bitmapConfig);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions build();
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder density(float density);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder edgeInsets(com.mapbox.maps.EdgeInsets edgeInsets);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder size(com.mapbox.maps.Size size);
    method public com.mapbox.navigation.ui.maps.snapshotter.model.MapboxSnapshotterOptions.Builder styleUri(String styleUri);
  }

}

package com.mapbox.navigation.ui.maps.snapshotter.view {

  public final class MapboxSnapshotView extends androidx.appcompat.widget.AppCompatImageView implements com.mapbox.navigation.ui.base.MapboxView<com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState> {
    ctor public MapboxSnapshotView(android.content.Context context, android.util.AttributeSet? attrs = null, int defStyleAttr = 0);
    ctor public MapboxSnapshotView(android.content.Context context, android.util.AttributeSet? attrs = null);
    ctor public MapboxSnapshotView(android.content.Context context);
    method public void render(com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState state);
  }

}

