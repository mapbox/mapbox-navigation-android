// Signature format: 3.0
package com.mapbox.navigation.ui.maps {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class BuildingHighlightConfig {
    method public com.mapbox.navigation.ui.maps.building.view.MapboxBuildingView? getBuildingView();
    method public com.mapbox.navigation.ui.maps.building.api.MapboxBuildingsApi? getBuildingsApi();
    method public com.mapbox.navigation.ui.maps.building.model.MapboxBuildingHighlightOptions getOptions();
    method public void setBuildingView(com.mapbox.navigation.ui.maps.building.view.MapboxBuildingView?);
    method public void setBuildingsApi(com.mapbox.navigation.ui.maps.building.api.MapboxBuildingsApi?);
    method public void setOptions(com.mapbox.navigation.ui.maps.building.model.MapboxBuildingHighlightOptions);
    property public final com.mapbox.navigation.ui.maps.building.view.MapboxBuildingView? buildingView;
    property public final com.mapbox.navigation.ui.maps.building.api.MapboxBuildingsApi? buildingsApi;
    property public final com.mapbox.navigation.ui.maps.building.model.MapboxBuildingHighlightOptions options;
  }

  public final class ComponentInstallerKt {
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public static com.mapbox.navigation.ui.base.installer.Installation buildingHighlight(com.mapbox.navigation.ui.base.installer.ComponentInstaller, com.mapbox.maps.MapView mapView, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.BuildingHighlightConfig,kotlin.Unit> config = {});
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public static com.mapbox.navigation.ui.base.installer.Installation locationPuck(com.mapbox.navigation.ui.base.installer.ComponentInstaller, com.mapbox.maps.MapView mapView, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.LocationPuckConfig,kotlin.Unit> config = {});
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public static com.mapbox.navigation.ui.base.installer.Installation navigationCamera(com.mapbox.navigation.ui.base.installer.ComponentInstaller, com.mapbox.maps.MapView mapView, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.NavigationCameraConfig,kotlin.Unit> config = {});
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public static com.mapbox.navigation.ui.base.installer.Installation routeArrow(com.mapbox.navigation.ui.base.installer.ComponentInstaller, com.mapbox.maps.MapView mapView, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.RouteArrowConfig,kotlin.Unit> config = {});
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public static com.mapbox.navigation.ui.base.installer.Installation routeLine(com.mapbox.navigation.ui.base.installer.ComponentInstaller, com.mapbox.maps.MapView mapView, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.RouteLineConfig,kotlin.Unit> config = {});
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class LocationPuckConfig {
    method public boolean getEnableLocationUpdates();
    method public com.mapbox.navigation.ui.maps.location.NavigationLocationProvider? getLocationProvider();
    method public com.mapbox.maps.plugin.LocationPuck? getLocationPuck();
    method public void setEnableLocationUpdates(boolean);
    method public void setLocationProvider(com.mapbox.navigation.ui.maps.location.NavigationLocationProvider?);
    method public void setLocationPuck(com.mapbox.maps.plugin.LocationPuck?);
    property public final boolean enableLocationUpdates;
    property public final com.mapbox.navigation.ui.maps.location.NavigationLocationProvider? locationProvider;
    property public final com.mapbox.maps.plugin.LocationPuck? locationPuck;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class NavigationCameraConfig {
    method public com.mapbox.navigation.ui.maps.camera.NavigationCamera? getNavigationCamera();
    method public boolean getSwitchToIdleOnMapGesture();
    method public com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSource? getViewportDataSource();
    method public void setNavigationCamera(com.mapbox.navigation.ui.maps.camera.NavigationCamera?);
    method public void setSwitchToIdleOnMapGesture(boolean);
    method public void setViewportDataSource(com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSource?);
    property public final com.mapbox.navigation.ui.maps.camera.NavigationCamera? navigationCamera;
    property public final boolean switchToIdleOnMapGesture;
    property public final com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSource? viewportDataSource;
  }

  public final class NavigationStyles {
    field public static final com.mapbox.navigation.ui.maps.NavigationStyles INSTANCE;
    field public static final String NAVIGATION_DAY_STYLE = "mapbox://styles/mapbox/navigation-day-v1";
    field public static final String NAVIGATION_DAY_STYLE_ID = "navigation-day-v1";
    field public static final String NAVIGATION_DAY_STYLE_USER_ID = "mapbox";
    field public static final String NAVIGATION_NIGHT_STYLE = "mapbox://styles/mapbox/navigation-night-v1";
    field public static final String NAVIGATION_NIGHT_STYLE_ID = "navigation-night-v1";
    field public static final String NAVIGATION_NIGHT_STYLE_USER_ID = "mapbox";
  }

  @UiThread public final class PredictiveCacheController {
    ctor public PredictiveCacheController(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation, com.mapbox.navigation.base.options.PredictiveCacheOptions predictiveCacheOptions);
    ctor @Deprecated public PredictiveCacheController(com.mapbox.navigation.base.options.PredictiveCacheOptions predictiveCacheOptions);
    method public void createStyleMapControllers(com.mapbox.maps.MapboxMap map, boolean cacheCurrentMapStyle = true, java.util.List<java.lang.String> styles = emptyList());
    method public void createStyleMapControllers(com.mapbox.maps.MapboxMap map, boolean cacheCurrentMapStyle = true);
    method public void createStyleMapControllers(com.mapbox.maps.MapboxMap map);
    method public com.mapbox.navigation.ui.maps.PredictiveCacheControllerErrorHandler? getPredictiveCacheControllerErrorHandler();
    method public void onDestroy();
    method public void removeMapControllers(com.mapbox.maps.MapboxMap map);
    method public void setPredictiveCacheControllerErrorHandler(com.mapbox.navigation.ui.maps.PredictiveCacheControllerErrorHandler?);
    property public final com.mapbox.navigation.ui.maps.PredictiveCacheControllerErrorHandler? predictiveCacheControllerErrorHandler;
  }

  public fun interface PredictiveCacheControllerErrorHandler {
    method public void onError(String? message);
  }

  public final class PredictiveCacheControllerKt {
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class RouteArrowConfig {
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions getOptions();
    method public void setOptions(com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions);
    property public final com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions options;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class RouteLineConfig {
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions getApiOptions();
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions getViewOptions();
    method public kotlinx.coroutines.flow.Flow<kotlin.jvm.functions.Function1<com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder,kotlin.Unit>> getViewOptionsUpdates();
    method public void setApiOptions(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions);
    method public void setViewOptions(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions);
    method public void setViewOptionsUpdates(kotlinx.coroutines.flow.Flow<? extends kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder,kotlin.Unit>>);
    property public final com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions apiOptions;
    property public final com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions viewOptions;
    property public final kotlinx.coroutines.flow.Flow<kotlin.jvm.functions.Function1<com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder,kotlin.Unit>> viewOptionsUpdates;
  }

}

package com.mapbox.navigation.ui.maps.building.api {

  public final class MapboxBuildingsApi {
    ctor public MapboxBuildingsApi(com.mapbox.maps.MapboxMap mapboxMap);
    method public void cancel();
    method public void queryBuildingOnFinalDestination(com.mapbox.navigation.base.trip.model.RouteProgress progress, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.building.model.BuildingError,com.mapbox.navigation.ui.maps.building.model.BuildingValue>> callback);
    method public void queryBuildingOnWaypoint(com.mapbox.navigation.base.trip.model.RouteProgress progress, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.building.model.BuildingError,com.mapbox.navigation.ui.maps.building.model.BuildingValue>> callback);
    method public void queryBuildingToHighlight(com.mapbox.geojson.Point point, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.building.model.BuildingError,com.mapbox.navigation.ui.maps.building.model.BuildingValue>> callback);
  }

}

package com.mapbox.navigation.ui.maps.building.model {

  public final class BuildingError extends java.lang.Error {
    method public String? getErrorMessage();
    property public final String? errorMessage;
  }

  public final class BuildingValue {
    method public java.util.List<com.mapbox.maps.QueriedRenderedFeature> getBuildings();
    property public final java.util.List<com.mapbox.maps.QueriedRenderedFeature> buildings;
  }

  public final class MapboxBuildingHighlightOptions {
    method public int getFillExtrusionColor();
    method public double getFillExtrusionOpacity();
    method public com.mapbox.navigation.ui.maps.building.model.MapboxBuildingHighlightOptions.Builder toBuilder();
    property public final int fillExtrusionColor;
    property public final double fillExtrusionOpacity;
  }

  public static final class MapboxBuildingHighlightOptions.Builder {
    ctor public MapboxBuildingHighlightOptions.Builder();
    method public com.mapbox.navigation.ui.maps.building.model.MapboxBuildingHighlightOptions build();
    method public com.mapbox.navigation.ui.maps.building.model.MapboxBuildingHighlightOptions.Builder fillExtrusionColor(@ColorInt int fillExtrusionColor);
    method public com.mapbox.navigation.ui.maps.building.model.MapboxBuildingHighlightOptions.Builder fillExtrusionOpacity(double fillExtrusionOpacity);
  }

}

package com.mapbox.navigation.ui.maps.building.view {

  @UiThread public final class MapboxBuildingView {
    ctor public MapboxBuildingView();
    method public void clear(com.mapbox.maps.Style style);
    method public void highlightBuilding(com.mapbox.maps.Style style, java.util.List<com.mapbox.maps.QueriedRenderedFeature> buildings, com.mapbox.navigation.ui.maps.building.model.MapboxBuildingHighlightOptions options = MapboxBuildingHighlightOptions.<init>().build());
    method public void highlightBuilding(com.mapbox.maps.Style style, java.util.List<com.mapbox.maps.QueriedRenderedFeature> buildings);
    method public void removeBuildingHighlight(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.building.model.MapboxBuildingHighlightOptions options = MapboxBuildingHighlightOptions.<init>().build());
    method public void removeBuildingHighlight(com.mapbox.maps.Style style);
  }

}

package com.mapbox.navigation.ui.maps.camera {

  @UiThread public final class NavigationCamera {
    ctor public NavigationCamera(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.animation.CameraAnimationsPlugin cameraPlugin, com.mapbox.navigation.ui.maps.camera.data.ViewportDataSource viewportDataSource, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraStateTransition stateTransition = com.mapbox.navigation.ui.maps.camera.transition.MapboxNavigationCameraStateTransition(mapboxMap, cameraPlugin));
    method public com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? getDebugger();
    method public com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState getState();
    method public void registerNavigationCameraStateChangeObserver(com.mapbox.navigation.ui.maps.camera.state.NavigationCameraStateChangedObserver navigationCameraStateChangedObserver);
    method public void requestNavigationCameraToFollowing(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> stateTransitionOptionsBlock, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> frameTransitionOptionsBlock, com.mapbox.navigation.ui.maps.camera.transition.TransitionEndListener? transitionEndListener = null);
    method public void requestNavigationCameraToFollowing(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> stateTransitionOptionsBlock, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> frameTransitionOptionsBlock);
    method public void requestNavigationCameraToFollowing(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions frameTransitionOptions = DEFAULT_FRAME_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.TransitionEndListener? transitionEndListener = null);
    method public void requestNavigationCameraToFollowing(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions frameTransitionOptions = DEFAULT_FRAME_TRANSITION_OPT);
    method public void requestNavigationCameraToFollowing(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT);
    method public void requestNavigationCameraToFollowing();
    method public void requestNavigationCameraToIdle();
    method public void requestNavigationCameraToOverview(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> stateTransitionOptionsBlock, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> frameTransitionOptionsBlock, com.mapbox.navigation.ui.maps.camera.transition.TransitionEndListener? transitionEndListener = null);
    method public void requestNavigationCameraToOverview(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> stateTransitionOptionsBlock, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder,kotlin.Unit> frameTransitionOptionsBlock);
    method public void requestNavigationCameraToOverview(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions frameTransitionOptions = DEFAULT_FRAME_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.TransitionEndListener? transitionEndListener = null);
    method public void requestNavigationCameraToOverview(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions frameTransitionOptions = DEFAULT_FRAME_TRANSITION_OPT);
    method public void requestNavigationCameraToOverview(com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions stateTransitionOptions = DEFAULT_STATE_TRANSITION_OPT);
    method public void requestNavigationCameraToOverview();
    method public void resetFrame();
    method public void setDebugger(com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger?);
    method public void unregisterNavigationCameraStateChangeObserver(com.mapbox.navigation.ui.maps.camera.state.NavigationCameraStateChangedObserver navigationCameraStateChangedObserver);
    property public final com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? debugger;
    property public final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState state;
    field public static final com.mapbox.navigation.ui.maps.camera.NavigationCamera.Companion Companion;
    field public static final String NAVIGATION_CAMERA_OWNER = "NAVIGATION_CAMERA_OWNER";
  }

  public static final class NavigationCamera.Companion {
  }

}

package com.mapbox.navigation.ui.maps.camera.data {

  public interface FollowingCameraFramingStrategy {
    method public java.util.List<com.mapbox.geojson.Point> getPointsToFrameAfterCurrentManeuver(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress, com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions followingFrameOptions, java.util.List<? extends java.util.List<? extends java.util.List<com.mapbox.geojson.Point>>> postManeuverFramingPoints);
    method public java.util.List<com.mapbox.geojson.Point> getPointsToFrameOnCurrentStep(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress, com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions followingFrameOptions, java.util.List<? extends java.util.List<java.lang.Double>> averageIntersectionDistancesOnRoute);
    field public static final com.mapbox.navigation.ui.maps.camera.data.FollowingCameraFramingStrategy.Companion Companion;
  }

  public static final class FollowingCameraFramingStrategy.Companion {
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingCameraFramingStrategy getDefault();
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingCameraFramingStrategy Default;
  }

  public final class FollowingFrameOptions {
    ctor public FollowingFrameOptions();
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.BearingSmoothing getBearingSmoothing();
    method public boolean getBearingUpdatesAllowed();
    method public boolean getCenterUpdatesAllowed();
    method public double getDefaultPitch();
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.FocalPoint getFocalPoint();
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.FrameGeometryAfterManeuver getFrameGeometryAfterManeuver();
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingCameraFramingStrategy getFramingStrategy();
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.IntersectionDensityCalculation getIntersectionDensityCalculation();
    method public double getMaxZoom();
    method public boolean getMaximizeViewableGeometryWhenPitchZero();
    method public double getMinZoom();
    method public boolean getPaddingUpdatesAllowed();
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.PitchNearManeuvers getPitchNearManeuvers();
    method public boolean getPitchUpdatesAllowed();
    method public boolean getZoomUpdatesAllowed();
    method public void setBearingUpdatesAllowed(boolean);
    method public void setCenterUpdatesAllowed(boolean);
    method public void setDefaultPitch(double);
    method public void setFocalPoint(com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.FocalPoint);
    method public void setFramingStrategy(com.mapbox.navigation.ui.maps.camera.data.FollowingCameraFramingStrategy);
    method public void setMaxZoom(double);
    method public void setMaximizeViewableGeometryWhenPitchZero(boolean);
    method public void setMinZoom(double);
    method public void setPaddingUpdatesAllowed(boolean);
    method public void setPitchUpdatesAllowed(boolean);
    method public void setZoomUpdatesAllowed(boolean);
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.BearingSmoothing bearingSmoothing;
    property public final boolean bearingUpdatesAllowed;
    property public final boolean centerUpdatesAllowed;
    property public final double defaultPitch;
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.FocalPoint focalPoint;
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.FrameGeometryAfterManeuver frameGeometryAfterManeuver;
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingCameraFramingStrategy framingStrategy;
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.IntersectionDensityCalculation intersectionDensityCalculation;
    property public final double maxZoom;
    property public final boolean maximizeViewableGeometryWhenPitchZero;
    property public final double minZoom;
    property public final boolean paddingUpdatesAllowed;
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions.PitchNearManeuvers pitchNearManeuvers;
    property public final boolean pitchUpdatesAllowed;
    property public final boolean zoomUpdatesAllowed;
  }

  public static final class FollowingFrameOptions.BearingSmoothing {
    ctor public FollowingFrameOptions.BearingSmoothing();
    method public boolean getEnabled();
    method public double getMaxBearingAngleDiff();
    method public void setEnabled(boolean);
    method public void setMaxBearingAngleDiff(double);
    property public final boolean enabled;
    property public final double maxBearingAngleDiff;
  }

  public static final class FollowingFrameOptions.FocalPoint {
    ctor public FollowingFrameOptions.FocalPoint(@FloatRange(from=0.0, to=1.0) double x, @FloatRange(from=0.0, to=1.0) double y);
    method public double getX();
    method public double getY();
    property public final double x;
    property public final double y;
  }

  public static final class FollowingFrameOptions.FrameGeometryAfterManeuver {
    ctor public FollowingFrameOptions.FrameGeometryAfterManeuver();
    method public double getDistanceToCoalesceCompoundManeuvers();
    method public double getDistanceToFrameAfterManeuver();
    method public boolean getEnabled();
    method public void setDistanceToCoalesceCompoundManeuvers(double);
    method public void setDistanceToFrameAfterManeuver(double);
    method public void setEnabled(boolean);
    property public final double distanceToCoalesceCompoundManeuvers;
    property public final double distanceToFrameAfterManeuver;
    property public final boolean enabled;
  }

  public static final class FollowingFrameOptions.IntersectionDensityCalculation {
    ctor public FollowingFrameOptions.IntersectionDensityCalculation();
    method public double getAverageDistanceMultiplier();
    method public boolean getEnabled();
    method public double getMinimumDistanceBetweenIntersections();
    method public void setAverageDistanceMultiplier(double);
    method public void setEnabled(boolean);
    method public void setMinimumDistanceBetweenIntersections(double);
    property public final double averageDistanceMultiplier;
    property public final boolean enabled;
    property public final double minimumDistanceBetweenIntersections;
  }

  public static final class FollowingFrameOptions.PitchNearManeuvers {
    ctor public FollowingFrameOptions.PitchNearManeuvers();
    method public boolean getEnabled();
    method public java.util.List<java.lang.String> getExcludedManeuvers();
    method public double getTriggerDistanceFromManeuver();
    method public void setEnabled(boolean);
    method public void setExcludedManeuvers(java.util.List<java.lang.String>);
    method public void setTriggerDistanceFromManeuver(double);
    property public final boolean enabled;
    property public final java.util.List<java.lang.String> excludedManeuvers;
    property public final double triggerDistanceFromManeuver;
  }

  @UiThread public final class MapboxNavigationViewportDataSource implements com.mapbox.navigation.ui.maps.camera.data.ViewportDataSource {
    ctor public MapboxNavigationViewportDataSource(com.mapbox.maps.MapboxMap mapboxMap);
    method public void additionalPointsToFrameForFollowing(java.util.List<com.mapbox.geojson.Point> points);
    method public void additionalPointsToFrameForOverview(java.util.List<com.mapbox.geojson.Point> points);
    method public void clearFollowingOverrides();
    method public void clearOverviewOverrides();
    method public void clearRouteData();
    method public void evaluate();
    method public void followingBearingPropertyOverride(Double? value);
    method public void followingCenterPropertyOverride(com.mapbox.geojson.Point? value);
    method public void followingPitchPropertyOverride(Double? value);
    method public void followingZoomPropertyOverride(Double? value);
    method public com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? getDebugger();
    method public com.mapbox.maps.EdgeInsets getFollowingPadding();
    method public com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions getOptions();
    method public com.mapbox.maps.EdgeInsets getOverviewPadding();
    method public com.mapbox.navigation.ui.maps.camera.data.ViewportData getViewportData();
    method public void onLocationChanged(com.mapbox.common.location.Location location);
    method public void onRouteChanged(com.mapbox.navigation.base.route.NavigationRoute route);
    method public void onRouteProgressChanged(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public void overviewBearingPropertyOverride(Double? value);
    method public void overviewCenterPropertyOverride(com.mapbox.geojson.Point? value);
    method public void overviewPitchPropertyOverride(Double? value);
    method public void overviewZoomPropertyOverride(Double? value);
    method public void registerUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
    method public void setDebugger(com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger?);
    method public void setFollowingPadding(com.mapbox.maps.EdgeInsets);
    method public void setOverviewPadding(com.mapbox.maps.EdgeInsets);
    method public void unregisterUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
    property public final com.mapbox.navigation.ui.maps.camera.data.debugger.MapboxNavigationViewportDataSourceDebugger? debugger;
    property public final com.mapbox.maps.EdgeInsets followingPadding;
    property public final com.mapbox.navigation.ui.maps.camera.data.MapboxNavigationViewportDataSourceOptions options;
    property public final com.mapbox.maps.EdgeInsets overviewPadding;
  }

  public final class MapboxNavigationViewportDataSourceOptions {
    method public com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions getFollowingFrameOptions();
    method public com.mapbox.navigation.ui.maps.camera.data.OverviewFrameOptions getOverviewFrameOptions();
    method public void setFollowingFrameOptions(com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions);
    method public void setOverviewFrameOptions(com.mapbox.navigation.ui.maps.camera.data.OverviewFrameOptions);
    property public final com.mapbox.navigation.ui.maps.camera.data.FollowingFrameOptions followingFrameOptions;
    property public final com.mapbox.navigation.ui.maps.camera.data.OverviewFrameOptions overviewFrameOptions;
  }

  public final class OverviewFrameOptions {
    ctor public OverviewFrameOptions();
    method public boolean getBearingUpdatesAllowed();
    method public boolean getCenterUpdatesAllowed();
    method public com.mapbox.navigation.ui.maps.camera.data.OverviewFrameOptions.GeometrySimplification getGeometrySimplification();
    method public double getMaxZoom();
    method public boolean getPaddingUpdatesAllowed();
    method public boolean getPitchUpdatesAllowed();
    method public boolean getZoomUpdatesAllowed();
    method public void setBearingUpdatesAllowed(boolean);
    method public void setCenterUpdatesAllowed(boolean);
    method public void setMaxZoom(double);
    method public void setPaddingUpdatesAllowed(boolean);
    method public void setPitchUpdatesAllowed(boolean);
    method public void setZoomUpdatesAllowed(boolean);
    property public final boolean bearingUpdatesAllowed;
    property public final boolean centerUpdatesAllowed;
    property public final com.mapbox.navigation.ui.maps.camera.data.OverviewFrameOptions.GeometrySimplification geometrySimplification;
    property public final double maxZoom;
    property public final boolean paddingUpdatesAllowed;
    property public final boolean pitchUpdatesAllowed;
    property public final boolean zoomUpdatesAllowed;
  }

  public static final class OverviewFrameOptions.GeometrySimplification {
    ctor public OverviewFrameOptions.GeometrySimplification();
    method public boolean getEnabled();
    method public int getSimplificationFactor();
    method public void setEnabled(boolean);
    method public void setSimplificationFactor(int);
    property public final boolean enabled;
    property public final int simplificationFactor;
  }

  public final class ViewportData {
    ctor public ViewportData(com.mapbox.maps.CameraOptions cameraForFollowing, com.mapbox.maps.CameraOptions cameraForOverview);
    method public com.mapbox.maps.CameraOptions getCameraForFollowing();
    method public com.mapbox.maps.CameraOptions getCameraForOverview();
    property public final com.mapbox.maps.CameraOptions cameraForFollowing;
    property public final com.mapbox.maps.CameraOptions cameraForOverview;
  }

  public interface ViewportDataSource {
    method public com.mapbox.navigation.ui.maps.camera.data.ViewportData getViewportData();
    method public void registerUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
    method public void unregisterUpdateObserver(com.mapbox.navigation.ui.maps.camera.data.ViewportDataSourceUpdateObserver viewportDataSourceUpdateObserver);
  }

  public final class ViewportDataSourceProcessorKt {
  }

  public fun interface ViewportDataSourceUpdateObserver {
    method @UiThread public void viewportDataSourceUpdated(com.mapbox.navigation.ui.maps.camera.data.ViewportData viewportData);
  }

}

package com.mapbox.navigation.ui.maps.camera.data.debugger {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class MapboxNavigationViewportDataSourceDebugger {
    ctor public MapboxNavigationViewportDataSourceDebugger(android.content.Context context, com.mapbox.maps.MapView mapView, String? layerAbove = null);
    ctor public MapboxNavigationViewportDataSourceDebugger(android.content.Context context, com.mapbox.maps.MapView mapView);
    method public boolean getEnabled();
    method public void setEnabled(boolean);
    property public final boolean enabled;
  }

}

package com.mapbox.navigation.ui.maps.camera.lifecycle {

  public final class NavigationBasicGesturesHandler implements com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener {
    ctor public NavigationBasicGesturesHandler(com.mapbox.navigation.ui.maps.camera.NavigationCamera navigationCamera);
    method public void onAnimatorCancelling(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorEnding(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorInterrupting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator runningAnimator, String? runningAnimatorOwner, android.animation.ValueAnimator newAnimator, String? newAnimatorOwner);
    method public void onAnimatorStarting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
  }

  public fun interface NavigationScaleGestureActionListener {
    method public void onNavigationScaleGestureAction();
  }

  public final class NavigationScaleGestureHandler implements com.mapbox.maps.plugin.animation.CameraAnimationsLifecycleListener {
    ctor public NavigationScaleGestureHandler(android.content.Context context, com.mapbox.navigation.ui.maps.camera.NavigationCamera navigationCamera, com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.gestures.GesturesPlugin gesturesPlugin, com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin locationPlugin, com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureActionListener? scaleActionListener = null, com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions options = NavigationScaleGestureHandlerOptions.<init>(context).build());
    method @UiThread public void cleanup();
    method public com.mapbox.android.gestures.AndroidGesturesManager getCustomGesturesManager();
    method public com.mapbox.android.gestures.AndroidGesturesManager getInitialGesturesManager();
    method @UiThread public void initialize();
    method public boolean isInitialized();
    method public void onAnimatorCancelling(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorEnding(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    method public void onAnimatorInterrupting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator runningAnimator, String? runningAnimatorOwner, android.animation.ValueAnimator newAnimator, String? newAnimatorOwner);
    method public void onAnimatorStarting(com.mapbox.maps.plugin.animation.CameraAnimatorType type, android.animation.ValueAnimator animator, String? owner);
    property public final com.mapbox.android.gestures.AndroidGesturesManager customGesturesManager;
    property public final com.mapbox.android.gestures.AndroidGesturesManager initialGesturesManager;
    property public final boolean isInitialized;
  }

  public final class NavigationScaleGestureHandlerOptions {
    method public float getFollowingInitialMoveThreshold();
    method public float getFollowingMultiFingerMoveThreshold();
    method public android.graphics.RectF? getFollowingMultiFingerProtectedMoveArea();
    method public float getFollowingRotationAngleThreshold();
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder toBuilder();
    property public final float followingInitialMoveThreshold;
    property public final float followingMultiFingerMoveThreshold;
    property public final android.graphics.RectF? followingMultiFingerProtectedMoveArea;
    property public final float followingRotationAngleThreshold;
  }

  public static final class NavigationScaleGestureHandlerOptions.Builder {
    ctor public NavigationScaleGestureHandlerOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions build();
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingInitialMoveThreshold(float followingInitialMoveThreshold);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingMultiFingerMoveThreshold(float followingMultiFingerMoveThreshold);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingMultiFingerProtectedMoveArea(android.graphics.RectF? followingMultiFingerProtectedMoveArea);
    method public com.mapbox.navigation.ui.maps.camera.lifecycle.NavigationScaleGestureHandlerOptions.Builder followingRotationAngleThreshold(float followingRotationAngleThreshold);
  }

}

package com.mapbox.navigation.ui.maps.camera.state {

  public enum NavigationCameraState {
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState FOLLOWING;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState IDLE;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState OVERVIEW;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState TRANSITION_TO_FOLLOWING;
    enum_constant public static final com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState TRANSITION_TO_OVERVIEW;
  }

  public fun interface NavigationCameraStateChangedObserver {
    method @UiThread public void onNavigationCameraStateChanged(com.mapbox.navigation.ui.maps.camera.state.NavigationCameraState navigationCameraState);
  }

}

package com.mapbox.navigation.ui.maps.camera.transition {

  public final class MapboxNavigationCameraStateTransition implements com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraStateTransition {
    ctor public MapboxNavigationCameraStateTransition(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.animation.CameraAnimationsPlugin cameraPlugin, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransition navigationCameraTransition = com.mapbox.navigation.ui.maps.camera.transition.MapboxNavigationCameraTransition(mapboxMap, cameraPlugin));
    method public android.animation.AnimatorSet transitionToFollowing(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionToOverview(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet updateFrameForFollowing(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet updateFrameForOverview(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
  }

  public final class MapboxNavigationCameraTransition implements com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransition {
    ctor public MapboxNavigationCameraTransition(com.mapbox.maps.MapboxMap mapboxMap, com.mapbox.maps.plugin.animation.CameraAnimationsPlugin cameraPlugin);
    method public android.animation.AnimatorSet transitionFromHighZoomToLowZoom(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionFromLowZoomToHighZoom(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionLinear(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
  }

  public final class MapboxNavigationCameraTransitionKt {
  }

  @UiThread public interface NavigationCameraStateTransition {
    method public android.animation.AnimatorSet transitionToFollowing(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionToOverview(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet updateFrameForFollowing(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet updateFrameForOverview(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
  }

  @UiThread public interface NavigationCameraTransition {
    method public android.animation.AnimatorSet transitionFromHighZoomToLowZoom(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionFromLowZoomToHighZoom(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
    method public android.animation.AnimatorSet transitionLinear(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions transitionOptions);
  }

  public final class NavigationCameraTransitionOptions {
    method public long getMaxDuration();
    method public com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder toBuilder();
    property public final long maxDuration;
  }

  public static final class NavigationCameraTransitionOptions.Builder {
    ctor public NavigationCameraTransitionOptions.Builder();
    method public com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions build();
    method public com.mapbox.navigation.ui.maps.camera.transition.NavigationCameraTransitionOptions.Builder maxDuration(long maxDuration);
  }

  public fun interface TransitionEndListener {
    method @UiThread public void onTransitionEnd(boolean isCanceled);
  }

}

package com.mapbox.navigation.ui.maps.camera.utils {

  public final class MapboxNavigationCameraUtilsKt {
  }

}

package com.mapbox.navigation.ui.maps.guidance.junction.api {

  @UiThread public final class MapboxJunctionApi {
    ctor public MapboxJunctionApi();
    method public void cancelAll();
    method public void generateJunction(com.mapbox.api.directions.v5.models.BannerInstructions instructions, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionError,com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionValue>> consumer);
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public void generateJunction(com.mapbox.api.directions.v5.models.BannerInstructions instructions, @com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewFormat String format, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionError,com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewData>> consumer);
  }

}

package com.mapbox.navigation.ui.maps.guidance.junction.model {

  public final class JunctionError {
    method public String? getErrorMessage();
    method public Throwable? getThrowable();
    property public final String? errorMessage;
    property public final Throwable? throwable;
  }

  public final class JunctionValue {
    method public android.graphics.Bitmap getBitmap();
    property public final android.graphics.Bitmap bitmap;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class JunctionViewData {
    method public byte[] getData();
    method public com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewData.PngData? getPngData();
    method public String getResponseFormat();
    method public com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewData.SvgData? getSvgData();
    method public boolean isPngData();
    method public boolean isSvgData();
    property public final byte[] data;
    property public final boolean isPngData;
    property public final boolean isSvgData;
    property public final String responseFormat;
  }

  public static final class JunctionViewData.PngData {
    ctor public JunctionViewData.PngData(byte[] data);
    method public android.graphics.Bitmap? getAsBitmap(android.graphics.BitmapFactory.Options options = DEFAULT_DECODE_OPTIONS);
    method public byte[] getData();
    property public final byte[] data;
  }

  @StringDef({com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewData.ResponseFormat.Companion.PNG, com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewData.ResponseFormat.Companion.SVG, com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewData.ResponseFormat.Companion.UNKNOWN}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public static @interface JunctionViewData.ResponseFormat {
    field public static final com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewData.ResponseFormat.Companion Companion;
    field public static final String PNG = "png";
    field public static final String SVG = "svg";
    field public static final String UNKNOWN = "unknown";
  }

  public static final class JunctionViewData.ResponseFormat.Companion {
    field public static final String PNG = "png";
    field public static final String SVG = "svg";
    field public static final String UNKNOWN = "unknown";
  }

  public static final class JunctionViewData.SvgData {
    ctor public JunctionViewData.SvgData(byte[] data);
    method public android.graphics.Bitmap? getAsBitmap(int width, int height);
    method public android.graphics.Bitmap? getAsBitmap(int width);
    method public byte[] getData();
    property public final byte[] data;
  }

  @StringDef({com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewFormat.Companion.PNG, com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewFormat.Companion.SVG}) @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface JunctionViewFormat {
    field public static final com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionViewFormat.Companion Companion;
    field public static final String PNG = "png";
    field public static final String SVG = "svg";
  }

  public static final class JunctionViewFormat.Companion {
    field public static final String PNG = "png";
    field public static final String SVG = "svg";
  }

}

package com.mapbox.navigation.ui.maps.guidance.junction.view {

  @UiThread public final class MapboxJunctionView extends androidx.appcompat.widget.AppCompatImageView {
    ctor public MapboxJunctionView(android.content.Context context);
    ctor public MapboxJunctionView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public MapboxJunctionView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    method public void render(com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionError,com.mapbox.navigation.ui.maps.guidance.junction.model.JunctionValue> result);
  }

}

package com.mapbox.navigation.ui.maps.guidance.restarea.api {

  public final class MapboxRestAreaApi {
    ctor public MapboxRestAreaApi(com.mapbox.navigation.ui.maps.guidance.restarea.model.MapboxRestAreaOptions options = MapboxRestAreaOptions.<init>().build());
    ctor public MapboxRestAreaApi();
    method public void cancelAll();
    method public void generateRestAreaGuideMap(com.mapbox.api.directions.v5.models.BannerInstructions instructions, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.restarea.model.RestAreaGuideMapError,com.mapbox.navigation.ui.maps.guidance.restarea.model.RestAreaGuideMapValue>> consumer);
    method public void generateUpcomingRestAreaGuideMap(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.restarea.model.RestAreaGuideMapError,com.mapbox.navigation.ui.maps.guidance.restarea.model.RestAreaGuideMapValue>> consumer);
    method public com.mapbox.navigation.ui.maps.guidance.restarea.model.MapboxRestAreaOptions getOptions();
    property public final com.mapbox.navigation.ui.maps.guidance.restarea.model.MapboxRestAreaOptions options;
  }

}

package com.mapbox.navigation.ui.maps.guidance.restarea.model {

  public final class MapboxRestAreaOptions {
    method public int getDesiredGuideMapWidth();
    method public com.mapbox.navigation.ui.maps.guidance.restarea.model.MapboxRestAreaOptions.Builder toBuilder();
    property public final int desiredGuideMapWidth;
  }

  public static final class MapboxRestAreaOptions.Builder {
    ctor public MapboxRestAreaOptions.Builder();
    method public com.mapbox.navigation.ui.maps.guidance.restarea.model.MapboxRestAreaOptions build();
    method public com.mapbox.navigation.ui.maps.guidance.restarea.model.MapboxRestAreaOptions.Builder desiredGuideMapWidth(int desiredGuideMapWidth);
  }

  public final class RestAreaGuideMapError {
    method public String? getMessage();
    method public Throwable? getThrowable();
    property public final String? message;
    property public final Throwable? throwable;
  }

  public final class RestAreaGuideMapValue {
    method public android.graphics.Bitmap getBitmap();
    property public final android.graphics.Bitmap bitmap;
  }

}

package com.mapbox.navigation.ui.maps.guidance.restarea.view {

  public final class MapboxRestAreaGuideMapView extends androidx.appcompat.widget.AppCompatImageView {
    ctor public MapboxRestAreaGuideMapView(android.content.Context context);
    ctor public MapboxRestAreaGuideMapView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public MapboxRestAreaGuideMapView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    method public void render(com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.restarea.model.RestAreaGuideMapError,com.mapbox.navigation.ui.maps.guidance.restarea.model.RestAreaGuideMapValue> result);
  }

}

package com.mapbox.navigation.ui.maps.guidance.signboard.api {

  public class MapboxExternalFileResolver extends com.caverock.androidsvg.SVGExternalFileResolver {
    ctor public MapboxExternalFileResolver(android.content.res.AssetManager assetManager);
  }

  public final class MapboxSignboardApi {
    ctor public MapboxSignboardApi(com.mapbox.navigation.ui.maps.guidance.signboard.api.SvgToBitmapParser parser, com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions options = MapboxSignboardOptions.<init>().build());
    ctor public MapboxSignboardApi(com.mapbox.navigation.ui.maps.guidance.signboard.api.SvgToBitmapParser parser);
    ctor public MapboxSignboardApi(android.content.Context applicationContext, com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions options = MapboxSignboardOptions.<init>().build());
    method public void cancelAll();
    method public void generateSignboard(com.mapbox.api.directions.v5.models.BannerInstructions instructions, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.signboard.model.SignboardError,com.mapbox.navigation.ui.maps.guidance.signboard.model.SignboardValue>> consumer);
  }

  public final class MapboxSvgToBitmapParser implements com.mapbox.navigation.ui.maps.guidance.signboard.api.SvgToBitmapParser {
    ctor public MapboxSvgToBitmapParser(com.caverock.androidsvg.SVGExternalFileResolver externalFileResolver);
    method public com.mapbox.bindgen.Expected<java.lang.String,android.graphics.Bitmap> parse(java.nio.ByteBuffer svg, com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions options);
  }

  public fun interface SvgToBitmapParser {
    method public com.mapbox.bindgen.Expected<java.lang.String,android.graphics.Bitmap> parse(java.nio.ByteBuffer svg, com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions options);
  }

}

package com.mapbox.navigation.ui.maps.guidance.signboard.model {

  public final class MapboxSignboardOptions {
    method public String getCssStyles();
    method public int getDesiredSignboardWidth();
    method public com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions.Builder toBuilder();
    property public final String cssStyles;
    property public final int desiredSignboardWidth;
  }

  public static final class MapboxSignboardOptions.Builder {
    ctor public MapboxSignboardOptions.Builder();
    method public com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions build();
    method public com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions.Builder cssStyles(String cssStyles);
    method public com.mapbox.navigation.ui.maps.guidance.signboard.model.MapboxSignboardOptions.Builder desiredSignboardWidth(int desiredSignboardWidth);
  }

  public final class SignboardError {
    method public String? getErrorMessage();
    method public Throwable? getThrowable();
    property public final String? errorMessage;
    property public final Throwable? throwable;
  }

  public final class SignboardValue {
    method public android.graphics.Bitmap getBitmap();
    property public final android.graphics.Bitmap bitmap;
  }

}

package com.mapbox.navigation.ui.maps.guidance.signboard.view {

  @UiThread public final class MapboxSignboardView extends androidx.appcompat.widget.AppCompatImageView {
    ctor public MapboxSignboardView(android.content.Context context);
    ctor public MapboxSignboardView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public MapboxSignboardView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    method public void render(com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.guidance.signboard.model.SignboardError,com.mapbox.navigation.ui.maps.guidance.signboard.model.SignboardValue> result);
  }

}

package com.mapbox.navigation.ui.maps.location {

  public final class NavigationLocationProvider implements com.mapbox.maps.plugin.locationcomponent.LocationProvider {
    ctor public NavigationLocationProvider();
    method public void changePosition(com.mapbox.common.location.Location location, java.util.List<? extends com.mapbox.common.location.Location> keyPoints = emptyList(), kotlin.jvm.functions.Function1<? super android.animation.ValueAnimator,kotlin.Unit>? latLngTransitionOptions = null, kotlin.jvm.functions.Function1<? super android.animation.ValueAnimator,kotlin.Unit>? bearingTransitionOptions = null);
    method public java.util.List<com.mapbox.common.location.Location> getLastKeyPoints();
    method public com.mapbox.common.location.Location? getLastLocation();
    method public void registerLocationConsumer(com.mapbox.maps.plugin.locationcomponent.LocationConsumer locationConsumer);
    method public void unRegisterLocationConsumer(com.mapbox.maps.plugin.locationcomponent.LocationConsumer locationConsumer);
    property public final java.util.List<com.mapbox.common.location.Location> lastKeyPoints;
    property public final com.mapbox.common.location.Location? lastLocation;
  }

}

package com.mapbox.navigation.ui.maps.puck {

  public final class LocationPuckOptions {
    method public com.mapbox.maps.plugin.LocationPuck getActiveNavigationPuck();
    method public com.mapbox.maps.plugin.LocationPuck getArrivalPuck();
    method public android.content.Context getContext();
    method public com.mapbox.maps.plugin.LocationPuck getDestinationPreviewPuck();
    method public com.mapbox.maps.plugin.LocationPuck getFreeDrivePuck();
    method public com.mapbox.maps.plugin.LocationPuck getIdlePuck();
    method public com.mapbox.maps.plugin.LocationPuck getRoutePreviewPuck();
    method public com.mapbox.navigation.ui.maps.puck.LocationPuckOptions.Builder toBuilder();
    property public final com.mapbox.maps.plugin.LocationPuck activeNavigationPuck;
    property public final com.mapbox.maps.plugin.LocationPuck arrivalPuck;
    property public final android.content.Context context;
    property public final com.mapbox.maps.plugin.LocationPuck destinationPreviewPuck;
    property public final com.mapbox.maps.plugin.LocationPuck freeDrivePuck;
    property public final com.mapbox.maps.plugin.LocationPuck idlePuck;
    property public final com.mapbox.maps.plugin.LocationPuck routePreviewPuck;
  }

  public static final class LocationPuckOptions.Builder {
    ctor public LocationPuckOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.puck.LocationPuckOptions.Builder activeNavigationPuck(com.mapbox.maps.plugin.LocationPuck activeNavigationPuck);
    method public com.mapbox.navigation.ui.maps.puck.LocationPuckOptions.Builder arrivalPuck(com.mapbox.maps.plugin.LocationPuck arrivalPuck);
    method public com.mapbox.navigation.ui.maps.puck.LocationPuckOptions build();
    method public com.mapbox.navigation.ui.maps.puck.LocationPuckOptions.Builder defaultPuck(com.mapbox.maps.plugin.LocationPuck defaultPuck);
    method public com.mapbox.navigation.ui.maps.puck.LocationPuckOptions.Builder destinationPreviewPuck(com.mapbox.maps.plugin.LocationPuck destinationPreviewPuck);
    method public com.mapbox.navigation.ui.maps.puck.LocationPuckOptions.Builder freeDrivePuck(com.mapbox.maps.plugin.LocationPuck freeDrivePuck);
    method public com.mapbox.navigation.ui.maps.puck.LocationPuckOptions.Builder idlePuck(com.mapbox.maps.plugin.LocationPuck idlePuck);
    method public com.mapbox.navigation.ui.maps.puck.LocationPuckOptions.Builder routePreviewPuck(com.mapbox.maps.plugin.LocationPuck routePreviewPuck);
    field public static final com.mapbox.navigation.ui.maps.puck.LocationPuckOptions.Builder.Companion Companion;
  }

  public static final class LocationPuckOptions.Builder.Companion {
    method public com.mapbox.maps.plugin.LocationPuck navigationPuck(android.content.Context context);
    method public com.mapbox.maps.plugin.LocationPuck regularPuck();
  }

}

package com.mapbox.navigation.ui.maps.route {

  public final class RouteLayerConstants {
    field public static final String BOTTOM_LEVEL_ROUTE_LINE_LAYER_ID = "mapbox-bottom-level-route-layer";
    field public static final String DEFAULT_ROUTE_LINE_SLOT = "middle";
    field public static final com.mapbox.navigation.ui.maps.route.RouteLayerConstants INSTANCE;
    field public static final String TOP_LEVEL_ROUTE_LINE_LAYER_ID = "mapbox-top-level-route-layer";
  }

}

package com.mapbox.navigation.ui.maps.route.arrow.api {

  public final class MapboxRouteArrowApi {
    ctor public MapboxRouteArrowApi();
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.arrow.model.InvalidPointError,com.mapbox.navigation.ui.maps.route.arrow.model.ArrowAddedValue> addArrow(com.mapbox.navigation.ui.maps.route.arrow.model.ManeuverArrow arrow);
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.arrow.model.InvalidPointError,com.mapbox.navigation.ui.maps.route.arrow.model.UpdateManeuverArrowValue> addUpcomingManeuverArrow(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.ClearArrowsValue clearArrows();
    method public java.util.List<com.mapbox.navigation.ui.maps.route.arrow.model.ManeuverArrow> getArrows();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.ArrowVisibilityChangeValue hideManeuverArrow();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.ArrowAddedValue redraw();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RemoveArrowValue removeArrow(com.mapbox.navigation.ui.maps.route.arrow.model.ManeuverArrow arrow);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.ArrowVisibilityChangeValue showManeuverArrow();
  }

  @UiThread public final class MapboxRouteArrowView {
    ctor public MapboxRouteArrowView(com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions options);
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility(com.mapbox.maps.Style style);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.ArrowVisibilityChangeValue visibilityChange);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.ArrowAddedValue arrowAdded);
    method public void render(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.arrow.model.InvalidPointError,com.mapbox.navigation.ui.maps.route.arrow.model.ArrowAddedValue> expectedValue);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.RemoveArrowValue state);
    method public void render(com.mapbox.maps.Style style, com.mapbox.navigation.ui.maps.route.arrow.model.ClearArrowsValue state);
    method public void renderManeuverUpdate(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.arrow.model.InvalidPointError,com.mapbox.navigation.ui.maps.route.arrow.model.UpdateManeuverArrowValue> expectedValue);
  }

}

package com.mapbox.navigation.ui.maps.route.arrow.model {

  public final class ArrowAddedValue {
    method public com.mapbox.geojson.FeatureCollection getArrowHeadFeatureCollection();
    method public com.mapbox.geojson.FeatureCollection getArrowShaftFeatureCollection();
    property public final com.mapbox.geojson.FeatureCollection arrowHeadFeatureCollection;
    property public final com.mapbox.geojson.FeatureCollection arrowShaftFeatureCollection;
  }

  public final class ArrowVisibilityChangeValue {
    method public java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> getLayerVisibilityModifications();
    property public final java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> layerVisibilityModifications;
  }

  public final class ClearArrowsValue {
    method public com.mapbox.geojson.FeatureCollection getArrowHeadFeatureCollection();
    method public com.mapbox.geojson.FeatureCollection getArrowShaftFeatureCollection();
    property public final com.mapbox.geojson.FeatureCollection arrowHeadFeatureCollection;
    property public final com.mapbox.geojson.FeatureCollection arrowShaftFeatureCollection;
  }

  public final class InvalidPointError {
    ctor public InvalidPointError(String errorMessage, Throwable? throwable);
    method public String getErrorMessage();
    method public Throwable? getThrowable();
    property public final String errorMessage;
    property public final Throwable? throwable;
  }

  public final class ManeuverArrow {
    ctor public ManeuverArrow(java.util.List<com.mapbox.geojson.Point> points);
    method public java.util.List<com.mapbox.geojson.Point> getPoints();
    property public final java.util.List<com.mapbox.geojson.Point> points;
  }

  public final class RemoveArrowValue {
    method public com.mapbox.geojson.FeatureCollection getArrowHeadFeatureCollection();
    method public com.mapbox.geojson.FeatureCollection getArrowShaftFeatureCollection();
    property public final com.mapbox.geojson.FeatureCollection arrowHeadFeatureCollection;
    property public final com.mapbox.geojson.FeatureCollection arrowShaftFeatureCollection;
  }

  public final class RouteArrowOptions {
    method @Deprecated public String getAboveLayerId();
    method public int getArrowCasingColor();
    method public int getArrowColor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getArrowHeadCasingScaleExpression();
    method public android.graphics.drawable.Drawable getArrowHeadIcon();
    method public android.graphics.drawable.Drawable getArrowHeadIconCasing();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getArrowHeadScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getArrowShaftCasingScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getArrowShaftScaleExpression();
    method public com.mapbox.navigation.ui.maps.route.model.FadingConfig? getFadeOnHighZoomsConfig();
    method public String getSlotName();
    method public double getTolerance();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder toBuilder(android.content.Context context);
    property @Deprecated public final String aboveLayerId;
    property public final int arrowCasingColor;
    property public final int arrowColor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression arrowHeadCasingScaleExpression;
    property public final android.graphics.drawable.Drawable arrowHeadIcon;
    property public final android.graphics.drawable.Drawable arrowHeadIconCasing;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression arrowHeadScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression arrowShaftCasingScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression arrowShaftScaleExpression;
    property public final com.mapbox.navigation.ui.maps.route.model.FadingConfig? fadeOnHighZoomsConfig;
    property public final String slotName;
    property public final double tolerance;
  }

  public static final class RouteArrowOptions.Builder {
    ctor public RouteArrowOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions build();
    method @Deprecated public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withAboveLayerId(String layerId);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowHeadIconCasingDrawable(@DrawableRes int drawable);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowHeadIconDrawable(@DrawableRes int drawable);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowShaftCasingScalingExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowShaftScalingExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowheadCasingScalingExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withArrowheadScalingExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withFadeOnHighZoomsConfig(com.mapbox.navigation.ui.maps.route.model.FadingConfig? config);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withSlotName(String name);
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions.Builder withTolerance(double tolerance);
  }

  public final class UpdateManeuverArrowValue {
    method public com.mapbox.geojson.Feature? getArrowHeadFeature();
    method public com.mapbox.geojson.Feature? getArrowShaftFeature();
    method public java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> getLayerVisibilityModifications();
    property public final com.mapbox.geojson.Feature? arrowHeadFeature;
    property public final com.mapbox.geojson.Feature? arrowShaftFeature;
    property public final java.util.List<kotlin.Pair<java.lang.String,com.mapbox.maps.extension.style.layers.properties.generated.Visibility>> layerVisibilityModifications;
  }

}

package com.mapbox.navigation.ui.maps.route.callout.api {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX}) public final class DurationKtxKt {
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class MapboxRouteCalloutApi {
    ctor public MapboxRouteCalloutApi(com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutApiOptions apiOptions = MapboxRouteCalloutApiOptions.<init>().build());
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutApiOptions getOptions();
    method public com.mapbox.navigation.ui.maps.route.callout.model.RouteCalloutData setNavigationRoutes(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes);
    method public com.mapbox.navigation.ui.maps.route.callout.model.RouteCalloutData setNavigationRoutes(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes, java.util.List<com.mapbox.navigation.core.routealternatives.AlternativeRouteMetadata> alternativeRoutesMetadata);
    method public com.mapbox.navigation.ui.maps.route.callout.model.RouteCalloutData updateOptions(com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutApiOptions options);
    property public final com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutApiOptions options;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class MapboxRouteCalloutView {
    ctor public MapboxRouteCalloutView(com.mapbox.maps.MapView mapView, com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions options = MapboxRouteCalloutViewOptions.<init>().build());
    method public void renderCallouts(com.mapbox.navigation.ui.maps.route.callout.model.RouteCalloutData routeCalloutResult);
    method public void setRouteCalloutClickListener(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.base.route.NavigationRoute,kotlin.Unit>? listener);
    method public void updateRouteCalloutViewOptions(com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions options);
  }

}

package com.mapbox.navigation.ui.maps.route.callout.model {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class MapboxRouteCalloutApiOptions {
    method public com.mapbox.navigation.ui.maps.route.callout.model.RouteCalloutType getRouteCalloutType();
    method public long getSimilarDurationDelta();
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutApiOptions.Builder toBuilder();
    property public final com.mapbox.navigation.ui.maps.route.callout.model.RouteCalloutType routeCalloutType;
    property public final long similarDurationDelta;
  }

  public static final class MapboxRouteCalloutApiOptions.Builder {
    ctor public MapboxRouteCalloutApiOptions.Builder();
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutApiOptions build();
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutApiOptions.Builder routeCalloutType(com.mapbox.navigation.ui.maps.route.callout.model.RouteCalloutType type);
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutApiOptions.Builder similarDurationDelta(long value);
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class MapboxRouteCalloutViewOptions {
    method public int getBackgroundColor();
    method public int getDurationTextAppearance();
    method public int getFasterTextColor();
    method public int getSelectedBackgroundColor();
    method public int getSelectedTextColor();
    method public int getSlowerTextColor();
    method public int getTextColor();
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions.Builder toBuilder();
    property public final int backgroundColor;
    property public final int durationTextAppearance;
    property public final int fasterTextColor;
    property public final int selectedBackgroundColor;
    property public final int selectedTextColor;
    property public final int slowerTextColor;
    property public final int textColor;
  }

  public static final class MapboxRouteCalloutViewOptions.Builder {
    ctor public MapboxRouteCalloutViewOptions.Builder();
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions.Builder backgroundColor(@ColorRes int value);
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions build();
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions.Builder durationTextAppearance(@StyleRes int value);
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions.Builder fasterTextColor(@ColorRes int value);
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions.Builder selectedBackgroundColor(@ColorRes int value);
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions.Builder selectedTextColor(@ColorRes int value);
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions.Builder slowerTextColor(@ColorRes int value);
    method public com.mapbox.navigation.ui.maps.route.callout.model.MapboxRouteCalloutViewOptions.Builder textColor(@ColorRes int value);
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class RouteCalloutData {
  }

  public enum RouteCalloutType {
    enum_constant public static final com.mapbox.navigation.ui.maps.route.callout.model.RouteCalloutType RelativeDurationsOnAlternative;
    enum_constant public static final com.mapbox.navigation.ui.maps.route.callout.model.RouteCalloutType RouteDurations;
  }

}

package com.mapbox.navigation.ui.maps.route.line {

  public final class MapboxRouteLineApiExtensions {
    method public suspend Object? clearRouteLine(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineClearValue>>);
    method public suspend Object? findClosestRoute(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, com.mapbox.geojson.Point target, com.mapbox.maps.MapboxMap mapboxMap, float padding, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteNotFound,com.mapbox.navigation.ui.maps.route.line.model.ClosestRouteValue>>);
    method public suspend Object? getRouteDrawData(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>>);
    method public suspend Object? setNavigationRouteLines(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, java.util.List<com.mapbox.navigation.ui.maps.route.line.model.NavigationRouteLine> newRoutes, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>>);
    method public suspend Object? setNavigationRouteLines(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, java.util.List<com.mapbox.navigation.ui.maps.route.line.model.NavigationRouteLine> newRoutes, int activeLegIndex, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>>);
    method public suspend Object? setNavigationRouteLines(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, java.util.List<com.mapbox.navigation.ui.maps.route.line.model.NavigationRouteLine> newRoutes, java.util.List<com.mapbox.navigation.core.routealternatives.AlternativeRouteMetadata> alternativeRoutesMetadata, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>>);
    method public suspend Object? setNavigationRouteLines(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, java.util.List<com.mapbox.navigation.ui.maps.route.line.model.NavigationRouteLine> newRoutes, int activeLegIndex, java.util.List<com.mapbox.navigation.core.routealternatives.AlternativeRouteMetadata> alternativeRoutesMetadata, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>>);
    method public suspend Object? setNavigationRoutes(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>>);
    method public suspend Object? setNavigationRoutes(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes, int activeLegIndex, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>>);
    method public suspend Object? setNavigationRoutes(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes, java.util.List<com.mapbox.navigation.core.routealternatives.AlternativeRouteMetadata> alternativeRoutesMetadata, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>>);
    method public suspend Object? setNavigationRoutes(com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi, java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes, int activeLegIndex, java.util.List<com.mapbox.navigation.core.routealternatives.AlternativeRouteMetadata> alternativeRoutesMetadata, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>>);
    field public static final com.mapbox.navigation.ui.maps.route.line.MapboxRouteLineApiExtensions INSTANCE;
  }

  public final class RouteLineHistoryRecordingPusherKt {
  }

}

package com.mapbox.navigation.ui.maps.route.line.api {

  public final class MapboxRouteLineApi {
    ctor public MapboxRouteLineApi(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions options);
    method public void cancel();
    method public void clearRouteLine(com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineClearValue>> consumer);
    method public void findClosestRoute(com.mapbox.geojson.Point target, com.mapbox.maps.MapboxMap mapboxMap, float padding, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteNotFound,com.mapbox.navigation.ui.maps.route.line.model.ClosestRouteValue>> resultConsumer);
    method public java.util.List<com.mapbox.navigation.base.route.NavigationRoute> getNavigationRoutes();
    method public com.mapbox.navigation.base.route.NavigationRoute? getPrimaryNavigationRoute();
    method public void getRouteDrawData(com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public double getVanishPointOffset();
    method public void setNavigationRouteLines(java.util.List<com.mapbox.navigation.ui.maps.route.line.model.NavigationRouteLine> newRoutes, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public void setNavigationRouteLines(java.util.List<com.mapbox.navigation.ui.maps.route.line.model.NavigationRouteLine> newRoutes, java.util.List<com.mapbox.navigation.core.routealternatives.AlternativeRouteMetadata> alternativeRoutesMetadata, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public void setNavigationRouteLines(java.util.List<com.mapbox.navigation.ui.maps.route.line.model.NavigationRouteLine> newRoutes, int activeLegIndex, java.util.List<com.mapbox.navigation.core.routealternatives.AlternativeRouteMetadata> alternativeRoutesMetadata, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public void setNavigationRoutes(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public void setNavigationRoutes(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes, int activeLegIndex, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public void setNavigationRoutes(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes, java.util.List<com.mapbox.navigation.core.routealternatives.AlternativeRouteMetadata> alternativeRoutesMetadata, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public void setNavigationRoutes(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> newRoutes, int activeLegIndex, java.util.List<com.mapbox.navigation.core.routealternatives.AlternativeRouteMetadata> alternativeRoutesMetadata, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue>> consumer);
    method public void setRoadClasses(java.util.List<java.lang.String> roadClasses);
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue> setVanishingOffset(double offset);
    method public com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue> updateTraveledRouteLine(com.mapbox.geojson.Point point);
    method public void updateWithRouteProgress(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress, com.mapbox.navigation.ui.base.util.MapboxNavigationConsumer<com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue>> consumer);
    field public static final com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi.Companion Companion;
  }

  public static final class MapboxRouteLineApi.Companion {
  }

  @UiThread public final class MapboxRouteLineView {
    ctor public MapboxRouteLineView(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions options);
    method public void cancel();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getAlternativeRoutesVisibility(com.mapbox.maps.Style style);
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getPrimaryRouteVisibility(com.mapbox.maps.Style style);
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getTrafficVisibility(com.mapbox.maps.Style style);
    method public void hideAlternativeRoutes(com.mapbox.maps.Style style);
    method public void hideOriginAndDestinationPoints(com.mapbox.maps.Style style);
    method public void hidePrimaryRoute(com.mapbox.maps.Style style);
    method public void hideTraffic(com.mapbox.maps.Style style);
    method public void initializeLayers(com.mapbox.maps.Style style);
    method public void renderClearRouteLineValue(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineClearValue> clearRouteLineValue);
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public void renderClearRouteLineValue(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineClearValue> clearRouteLineValue, com.mapbox.maps.MapboxMap map, com.mapbox.navigation.ui.maps.route.line.api.RoutesRenderedCallback callback);
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public void renderRouteDrawData(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue> routeDrawData, com.mapbox.maps.MapboxMap map, com.mapbox.navigation.ui.maps.route.line.api.RoutesRenderedCallback callback);
    method public void renderRouteDrawData(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteSetValue> routeDrawData);
    method public void renderRouteLineUpdate(com.mapbox.maps.Style style, com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maps.route.line.model.RouteLineError,com.mapbox.navigation.ui.maps.route.line.model.RouteLineUpdateValue> update);
    method public void showAlternativeRoutes(com.mapbox.maps.Style style);
    method public void showOriginAndDestinationPoints(com.mapbox.maps.Style style);
    method public void showPrimaryRoute(com.mapbox.maps.Style style);
    method public void showTraffic(com.mapbox.maps.Style style);
    method public void updateDynamicOptions(com.mapbox.maps.Style style, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder,kotlin.Unit> dynamicOptionsBlock);
  }

  public final class RouteLineExpressionCommandHolderKt {
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public interface RoutesRenderedCallback {
    method public void onRoutesRendered(com.mapbox.navigation.ui.maps.route.line.api.RoutesRenderedResult result);
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class RoutesRenderedResult {
    method public java.util.Set<java.lang.String> getClearingCancelledRouteIds();
    method public java.util.Set<java.lang.String> getRenderingCancelledRouteIds();
    method public java.util.Set<java.lang.String> getSuccessfullyClearedRouteIds();
    method public java.util.Set<java.lang.String> getSuccessfullyRenderedRouteIds();
    property public final java.util.Set<java.lang.String> clearingCancelledRouteIds;
    property public final java.util.Set<java.lang.String> renderingCancelledRouteIds;
    property public final java.util.Set<java.lang.String> successfullyClearedRouteIds;
    property public final java.util.Set<java.lang.String> successfullyRenderedRouteIds;
  }

}

package com.mapbox.navigation.ui.maps.route.line.model {

  public final class ClosestRouteValue {
    method public com.mapbox.navigation.base.route.NavigationRoute getNavigationRoute();
    property public final com.mapbox.navigation.base.route.NavigationRoute navigationRoute;
  }

  @Keep public final class MapboxRouteLineApiOptions {
    method public boolean getCalculateRestrictedRoadSections();
    method public kotlin.ranges.IntRange getHeavyCongestionRange();
    method public kotlin.ranges.IntRange getLowCongestionRange();
    method public kotlin.ranges.IntRange getModerateCongestionRange();
    method public kotlin.ranges.IntRange getSevereCongestionRange();
    method public boolean getStyleInactiveRouteLegsIndependently();
    method public java.util.List<java.lang.String> getTrafficBackfillRoadClasses();
    method public boolean getVanishingRouteLineEnabled();
    method public long getVanishingRouteLineUpdateIntervalNano();
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder toBuilder();
    property public final boolean calculateRestrictedRoadSections;
    property public final kotlin.ranges.IntRange heavyCongestionRange;
    property public final kotlin.ranges.IntRange lowCongestionRange;
    property public final kotlin.ranges.IntRange moderateCongestionRange;
    property public final kotlin.ranges.IntRange severeCongestionRange;
    property public final boolean styleInactiveRouteLegsIndependently;
    property public final java.util.List<java.lang.String> trafficBackfillRoadClasses;
    property public final boolean vanishingRouteLineEnabled;
    property public final long vanishingRouteLineUpdateIntervalNano;
  }

  public static final class MapboxRouteLineApiOptions.Builder {
    ctor public MapboxRouteLineApiOptions.Builder();
    method @kotlin.jvm.Throws(exceptionClasses=IllegalStateException::class) public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions build() throws java.lang.IllegalStateException;
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder calculateRestrictedRoadSections(boolean calculateRestrictedRoadSections);
    method @kotlin.jvm.Throws(exceptionClasses=IllegalArgumentException::class) public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder heavyCongestionRange(kotlin.ranges.IntRange range) throws java.lang.IllegalArgumentException;
    method @kotlin.jvm.Throws(exceptionClasses=IllegalArgumentException::class) public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder lowCongestionRange(kotlin.ranges.IntRange range) throws java.lang.IllegalArgumentException;
    method @kotlin.jvm.Throws(exceptionClasses=IllegalArgumentException::class) public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder moderateCongestionRange(kotlin.ranges.IntRange range) throws java.lang.IllegalArgumentException;
    method @kotlin.jvm.Throws(exceptionClasses=IllegalArgumentException::class) public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder severeCongestionRange(kotlin.ranges.IntRange range) throws java.lang.IllegalArgumentException;
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder styleInactiveRouteLegsIndependently(boolean enable);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder trafficBackfillRoadClasses(java.util.List<java.lang.String> roadClasses);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder vanishingRouteLineEnabled(boolean isEnabled);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions.Builder vanishingRouteLineUpdateIntervalNano(long interval);
  }

  public final class MapboxRouteLineViewDynamicOptionsBuilder {
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder displaySoftGradientForTraffic(boolean displaySoftGradientForTraffic);
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder fadingConfig(com.mapbox.navigation.ui.maps.route.model.FadingConfig? fadingConfig);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder lineDepthOcclusionFactor(@FloatRange(from=0.0, to=1.0) double lineDepthOcclusionFactor);
    method @Deprecated public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder routeLineBelowLayerId(String? layerId);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder routeLineColorResources(com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder scaleExpressions(com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions scaleExpressions);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder slotName(String name);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewDynamicOptionsBuilder softGradientTransition(double softGradientTransition);
  }

  public final class MapboxRouteLineViewDynamicOptionsBuilderKt {
  }

  public final class MapboxRouteLineViewOptions {
    method public android.graphics.drawable.Drawable getDestinationWaypointIcon();
    method public boolean getDisplayRestrictedRoadSections();
    method public boolean getDisplaySoftGradientForTraffic();
    method public com.mapbox.navigation.ui.maps.route.model.FadingConfig? getFadeOnHighZoomsConfig();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment getIconPitchAlignment();
    method public double getLineDepthOcclusionFactor();
    method public android.graphics.drawable.Drawable getOriginWaypointIcon();
    method public java.util.List<java.lang.Double> getRestrictedRoadDashArray();
    method public double getRestrictedRoadLineWidth();
    method public double getRestrictedRoadOpacity();
    method @Deprecated public String? getRouteLineBelowLayerId();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources getRouteLineColorResources();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions getScaleExpressions();
    method public boolean getShareLineGeometrySources();
    method public String getSlotName();
    method public double getSoftGradientTransition();
    method public double getTolerance();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor getWaypointLayerIconAnchor();
    method public java.util.List<java.lang.Double> getWaypointLayerIconOffset();
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder toBuilder();
    property public final android.graphics.drawable.Drawable destinationWaypointIcon;
    property public final boolean displayRestrictedRoadSections;
    property public final boolean displaySoftGradientForTraffic;
    property public final com.mapbox.navigation.ui.maps.route.model.FadingConfig? fadeOnHighZoomsConfig;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment iconPitchAlignment;
    property public final double lineDepthOcclusionFactor;
    property public final android.graphics.drawable.Drawable originWaypointIcon;
    property public final java.util.List<java.lang.Double> restrictedRoadDashArray;
    property public final double restrictedRoadLineWidth;
    property public final double restrictedRoadOpacity;
    property @Deprecated public final String? routeLineBelowLayerId;
    property public final com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources;
    property public final com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions scaleExpressions;
    property public final boolean shareLineGeometrySources;
    property public final String slotName;
    property public final double softGradientTransition;
    property public final double tolerance;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor waypointLayerIconAnchor;
    property public final java.util.List<java.lang.Double> waypointLayerIconOffset;
  }

  public static final class MapboxRouteLineViewOptions.Builder {
    ctor public MapboxRouteLineViewOptions.Builder(android.content.Context context);
    method @kotlin.jvm.Throws(exceptionClasses=IllegalArgumentException::class) public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions build() throws java.lang.IllegalArgumentException;
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder destinationWaypointIcon(@DrawableRes int destinationWaypointIcon);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder displayRestrictedRoadSections(boolean displayRestrictedRoadSections);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder displaySoftGradientForTraffic(boolean displaySoftGradientForTraffic);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder fadeOnHighZoomsConfig(com.mapbox.navigation.ui.maps.route.model.FadingConfig? config);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder iconPitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment iconPitchAlignment);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder lineDepthOcclusionFactor(@FloatRange(from=0.0, to=1.0) double lineDepthOcclusionFactor);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder originWaypointIcon(@DrawableRes int originWaypointIcon);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder restrictedRoadDashArray(java.util.List<java.lang.Double> restrictedRoadDashArray);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder restrictedRoadLineWidth(double restrictedRoadLineWidth);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder restrictedRoadOpacity(double restrictedRoadOpacity);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder routeLineBelowLayerId(String? layerId);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder routeLineColorResources(com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources routeLineColorResources);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder scaleExpressions(com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions scaleExpressions);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder shareLineGeometrySources(boolean shareLineGeometrySources);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder slotName(String name);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder softGradientTransition(double softGradientTransition);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder tolerance(double tolerance);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder waypointLayerIconAnchor(com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor waypointLayerIconAnchor);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions.Builder waypointLayerIconOffset(java.util.List<java.lang.Double> waypointLayerIconOffset);
  }

  @Keep public final class NavigationRouteLine {
    ctor public NavigationRouteLine(com.mapbox.navigation.base.route.NavigationRoute route, String? identifier);
    method public String? getIdentifier();
    method public com.mapbox.navigation.base.route.NavigationRoute getRoute();
    property public final String? identifier;
    property public final com.mapbox.navigation.base.route.NavigationRoute route;
  }

  @Keep public final class RouteLineClearValue {
  }

  @Keep public final class RouteLineColorResources {
    method public int getAlternativeRouteCasingColor();
    method public int getAlternativeRouteClosureColor();
    method public int getAlternativeRouteDefaultColor();
    method public int getAlternativeRouteHeavyCongestionColor();
    method public int getAlternativeRouteLowCongestionColor();
    method public int getAlternativeRouteModerateCongestionColor();
    method public int getAlternativeRouteRestrictedRoadColor();
    method public int getAlternativeRouteSevereCongestionColor();
    method public int getAlternativeRouteUnknownCongestionColor();
    method public int getInActiveRouteLegsColor();
    method public int getInactiveRouteLegCasingColor();
    method public int getInactiveRouteLegClosureColor();
    method public int getInactiveRouteLegHeavyCongestionColor();
    method public int getInactiveRouteLegLowCongestionColor();
    method public int getInactiveRouteLegModerateCongestionColor();
    method public int getInactiveRouteLegRestrictedRoadColor();
    method public int getInactiveRouteLegSevereCongestionColor();
    method public int getInactiveRouteLegUnknownCongestionColor();
    method public int getRestrictedRoadColor();
    method public int getRouteCasingColor();
    method public int getRouteClosureColor();
    method public int getRouteDefaultColor();
    method public int getRouteHeavyCongestionColor();
    method public int getRouteLineTraveledCasingColor();
    method public int getRouteLineTraveledColor();
    method public int getRouteLowCongestionColor();
    method public int getRouteModerateCongestionColor();
    method public int getRouteSevereCongestionColor();
    method public int getRouteUnknownCongestionColor();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder toBuilder();
    property public final int alternativeRouteCasingColor;
    property public final int alternativeRouteClosureColor;
    property public final int alternativeRouteDefaultColor;
    property public final int alternativeRouteHeavyCongestionColor;
    property public final int alternativeRouteLowCongestionColor;
    property public final int alternativeRouteModerateCongestionColor;
    property public final int alternativeRouteRestrictedRoadColor;
    property public final int alternativeRouteSevereCongestionColor;
    property public final int alternativeRouteUnknownCongestionColor;
    property public final int inActiveRouteLegsColor;
    property public final int inactiveRouteLegCasingColor;
    property public final int inactiveRouteLegClosureColor;
    property public final int inactiveRouteLegHeavyCongestionColor;
    property public final int inactiveRouteLegLowCongestionColor;
    property public final int inactiveRouteLegModerateCongestionColor;
    property public final int inactiveRouteLegRestrictedRoadColor;
    property public final int inactiveRouteLegSevereCongestionColor;
    property public final int inactiveRouteLegUnknownCongestionColor;
    property public final int restrictedRoadColor;
    property public final int routeCasingColor;
    property public final int routeClosureColor;
    property public final int routeDefaultColor;
    property public final int routeHeavyCongestionColor;
    property public final int routeLineTraveledCasingColor;
    property public final int routeLineTraveledColor;
    property public final int routeLowCongestionColor;
    property public final int routeModerateCongestionColor;
    property public final int routeSevereCongestionColor;
    property public final int routeUnknownCongestionColor;
  }

  public static final class RouteLineColorResources.Builder {
    ctor public RouteLineColorResources.Builder();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteClosureColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteDefaultColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteHeavyCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteLowCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteModerateCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteRestrictedRoadColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteSevereCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder alternativeRouteUnknownCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources build();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inActiveRouteLegsColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inactiveRouteLegCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inactiveRouteLegClosureColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inactiveRouteLegHeavyCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inactiveRouteLegLowCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inactiveRouteLegModerateCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inactiveRouteLegRestrictedRoadColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inactiveRouteLegSevereCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder inactiveRouteLegUnknownCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder restrictedRoadColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeClosureColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeDefaultColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeHeavyCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeLineTraveledCasingColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeLineTraveledColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeLowCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeModerateCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeSevereCongestionColor(@ColorInt int color);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources.Builder routeUnknownCongestionColor(@ColorInt int color);
  }

  public final class RouteLineDistancesIndex {
    ctor public RouteLineDistancesIndex(com.mapbox.geojson.Point point, double distanceRemaining);
    method public double getDistanceRemaining();
    method public com.mapbox.geojson.Point getPoint();
    property public final double distanceRemaining;
    property public final com.mapbox.geojson.Point point;
  }

  public final class RouteLineError {
    method public String getErrorMessage();
    method public Throwable? getThrowable();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineError.MutableRouteLineError toMutableValue();
    property public final String errorMessage;
    property public final Throwable? throwable;
  }

  public static final class RouteLineError.MutableRouteLineError {
    method public String getErrorMessage();
    method public Throwable? getThrowable();
    method public void setErrorMessage(String);
    method public void setThrowable(Throwable?);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineError toImmutableValue();
    property public final String errorMessage;
    property public final Throwable? throwable;
  }

  @Keep public final class RouteLineScaleExpressions {
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getAlternativeRouteCasingLineScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getAlternativeRouteLineScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getAlternativeRouteTrafficLineScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteCasingLineScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteLineScaleExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getRouteTrafficLineScaleExpression();
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression alternativeRouteCasingLineScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression alternativeRouteLineScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression alternativeRouteTrafficLineScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeCasingLineScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeLineScaleExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression routeTrafficLineScaleExpression;
  }

  public static final class RouteLineScaleExpressions.Builder {
    ctor public RouteLineScaleExpressions.Builder();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions.Builder alternativeRouteCasingLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions.Builder alternativeRouteLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions.Builder alternativeRouteTrafficLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions build();
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions.Builder routeCasingLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions.Builder routeLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.navigation.ui.maps.route.line.model.RouteLineScaleExpressions.Builder routeTrafficLineScaleExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
  }

  public final class RouteLineScaleValue {
    ctor public RouteLineScaleValue(float scaleStop, float scaleMultiplier, float scale);
    method public float getScale();
    method public float getScaleMultiplier();
    method public float getScaleStop();
    property public final float scale;
    property public final float scaleMultiplier;
    property public final float scaleStop;
  }

  @kotlin.jvm.JvmInline public final value class RouteLineTrimOffset {
    ctor public RouteLineTrimOffset(double offset);
    method public double getOffset();
    property public final double offset;
  }

  public final class RouteLineUpdateValue {
  }

  public final class RouteNotFound {
    method public String getErrorMessage();
    method public Throwable? getThrowable();
    property public final String errorMessage;
    property public final Throwable? throwable;
  }

  public final class RouteSetValue {
  }

  public enum VanishingPointState {
    enum_constant public static final com.mapbox.navigation.ui.maps.route.line.model.VanishingPointState DISABLED;
    enum_constant public static final com.mapbox.navigation.ui.maps.route.line.model.VanishingPointState ENABLED;
    enum_constant public static final com.mapbox.navigation.ui.maps.route.line.model.VanishingPointState ONLY_INCREASE_PROGRESS;
  }

}

package com.mapbox.navigation.ui.maps.route.model {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class FadingConfig {
    method public double getFinishFadingZoom();
    method public double getStartFadingZoom();
    property public final double finishFadingZoom;
    property public final double startFadingZoom;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public static final class FadingConfig.Builder {
    ctor public FadingConfig.Builder(double startFadingZoom, double finishFadingZoom);
    method public com.mapbox.navigation.ui.maps.route.model.FadingConfig build();
  }

}

package com.mapbox.navigation.ui.maps.util {

  public fun interface OnViewScreenshotReady {
    method public void onViewCaptureReady(android.graphics.Bitmap screenshot);
  }

  public final class RoutesRenderedCallbackExtensionsKt {
  }

  public final class ViewUtils {
    method @UiThread public static void capture(android.view.View, com.mapbox.navigation.ui.maps.util.OnViewScreenshotReady callback);
    field public static final com.mapbox.navigation.ui.maps.util.ViewUtils INSTANCE;
  }

}

