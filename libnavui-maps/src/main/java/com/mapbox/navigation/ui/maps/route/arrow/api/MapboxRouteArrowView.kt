package com.mapbox.navigation.ui.maps.route.arrow.api

import com.mapbox.geojson.Feature
import com.mapbox.maps.Style
import com.mapbox.maps.extension.style.layers.getLayer
import com.mapbox.maps.extension.style.layers.properties.generated.Visibility
import com.mapbox.maps.extension.style.sources.generated.GeoJsonSource
import com.mapbox.maps.extension.style.sources.getSource
import com.mapbox.navigation.ui.base.internal.model.route.RouteConstants
import com.mapbox.navigation.ui.base.model.route.RouteLayerConstants
import com.mapbox.navigation.ui.maps.internal.route.line.MapboxRouteLineUtils
import com.mapbox.navigation.ui.maps.route.arrow.RouteArrowUtils.initializeLayers
import com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions
import com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowState

/**
 * Responsible for rendering state data generated by the MapboxRouteArrowApi class. The
 * state data will alter the appearance of the maneuver arrow on the map. Generally the arrow should
 * be updated with every route progress event that is received.
 *
 * @param options the options used for determining the rendering appearance and/or behavior.
 */
class MapboxRouteArrowView(private val options: RouteArrowOptions) {

    /**
     * Renders a UpdateRouteArrowVisibilityState applying view side effects based on the data
     * it contains.
     *
     * @param style a valid map style object
     * @param state a state containing data for applying the view side effects.
     */
    fun render(style: Style, state: RouteArrowState.UpdateRouteArrowVisibilityState) {
        initializeLayers(style, options)

        state.getVisibilityChanges().forEach {
            updateLayerVisibility(style, it.first, it.second)
        }
    }

    /**
     * Renders a UpdateManeuverArrowState applying view side effects based on the data
     * it contains.
     *
     * @param style a valid map style object
     * @param state a state containing data for applying the view side effects.
     */
    fun render(style: Style, state: RouteArrowState.UpdateManeuverArrowState) {
        initializeLayers(style, options)

        state.getVisibilityChanges().forEach {
            updateLayerVisibility(style, it.first, it.second)
        }

        state.getArrowHeadFeature()?.apply {
            updateSource(style, RouteConstants.ARROW_HEAD_SOURCE_ID, this)
        }

        state.getArrowShaftFeature()?.apply {
            updateSource(style, RouteConstants.ARROW_SHAFT_SOURCE_ID, this)
        }
    }

    /**
     * Returns the maneuver arrow visibility.
     *
     * @param style a valid map style object
     *
     * @return the visibility of the map layers used for rendering the maneuver arrow
     */
    fun getVisibility(style: Style): Visibility? {
        return MapboxRouteLineUtils.getLayerVisibility(
            style,
            RouteLayerConstants.ARROW_SHAFT_LINE_LAYER_ID
        )
    }

    private fun updateLayerVisibility(style: Style, layerId: String, visibility: Visibility) {
        if (style.isFullyLoaded()) {
            style.getLayer(layerId)?.visibility(visibility)
        }
    }

    private fun updateSource(style: Style, sourceId: String, feature: Feature) {
        if (style.isFullyLoaded()) {
            style.getSource(sourceId)?.let {
                (it as GeoJsonSource).feature(feature)
            }
        }
    }
}
