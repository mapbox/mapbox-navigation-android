// Signature format: 3.0
package com.mapbox.navigation.dropin {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class ActionButtonDescription {
    ctor public ActionButtonDescription(android.view.View view, com.mapbox.navigation.dropin.ActionButtonDescription.Position position = com.mapbox.navigation.dropin.ActionButtonDescription.Position.END);
    method public com.mapbox.navigation.dropin.ActionButtonDescription.Position getPosition();
    method public android.view.View getView();
    property public final com.mapbox.navigation.dropin.ActionButtonDescription.Position position;
    property public final android.view.View view;
  }

  public enum ActionButtonDescription.Position {
    enum_constant public static final com.mapbox.navigation.dropin.ActionButtonDescription.Position END;
    enum_constant public static final com.mapbox.navigation.dropin.ActionButtonDescription.Position START;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public abstract class MapViewObserver {
    ctor public MapViewObserver();
    method public void onAttached(com.mapbox.maps.MapView mapView);
    method public void onDetached(com.mapbox.maps.MapView mapView);
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class NavigationView extends android.widget.FrameLayout implements androidx.lifecycle.LifecycleOwner {
    ctor public NavigationView(android.content.Context context, android.util.AttributeSet? attrs = null, String accessToken = attrs.navigationViewAccessToken(context), androidx.lifecycle.ViewModelStoreOwner viewModelStoreOwner = context.toViewModelStoreOwner());
    ctor public NavigationView(android.content.Context context, android.util.AttributeSet? attrs = null, String accessToken = attrs.navigationViewAccessToken(context));
    ctor public NavigationView(android.content.Context context, android.util.AttributeSet? attrs = null);
    ctor public NavigationView(android.content.Context context);
    method public void addListener(com.mapbox.navigation.dropin.NavigationViewListener listener);
    method public void customizeMapView(com.mapbox.maps.MapView? mapView);
    method public void customizeViewBinders(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.dropin.ViewBinderCustomization,kotlin.Unit> action);
    method public void customizeViewOptions(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.dropin.ViewOptionsCustomization,kotlin.Unit> action);
    method public void customizeViewStyles(kotlin.jvm.functions.Function1<? super com.mapbox.navigation.dropin.ViewStyleCustomization,kotlin.Unit> action);
    method public com.mapbox.navigation.dropin.NavigationViewApi getApi();
    method public androidx.lifecycle.Lifecycle getLifecycle();
    method public void registerMapObserver(com.mapbox.navigation.dropin.MapViewObserver observer);
    method public void removeListener(com.mapbox.navigation.dropin.NavigationViewListener listener);
    method public void unregisterMapObserver(com.mapbox.navigation.dropin.MapViewObserver observer);
    property public final com.mapbox.navigation.dropin.NavigationViewApi api;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public abstract class NavigationViewApi {
    ctor public NavigationViewApi();
    method public abstract boolean isReplayEnabled();
    method public abstract void routeReplayEnabled(boolean enabled);
    method public abstract com.mapbox.bindgen.Expected<com.mapbox.navigation.dropin.NavigationViewApiError,kotlin.Unit> startActiveGuidance();
    method public abstract com.mapbox.bindgen.Expected<com.mapbox.navigation.dropin.NavigationViewApiError,kotlin.Unit> startActiveGuidance(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> routes);
    method public abstract com.mapbox.bindgen.Expected<com.mapbox.navigation.dropin.NavigationViewApiError,kotlin.Unit> startArrival();
    method public abstract com.mapbox.bindgen.Expected<com.mapbox.navigation.dropin.NavigationViewApiError,kotlin.Unit> startArrival(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> routes);
    method public abstract void startDestinationPreview(com.mapbox.geojson.Point point);
    method public abstract void startFreeDrive();
    method public abstract com.mapbox.bindgen.Expected<com.mapbox.navigation.dropin.NavigationViewApiError,kotlin.Unit> startRoutePreview();
    method public abstract com.mapbox.bindgen.Expected<com.mapbox.navigation.dropin.NavigationViewApiError,kotlin.Unit> startRoutePreview(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> routes);
  }

  public abstract sealed class NavigationViewApiError extends java.lang.Throwable {
  }

  public static final class NavigationViewApiError.IncompleteRoutesInfo extends com.mapbox.navigation.dropin.NavigationViewApiError {
    field public static final com.mapbox.navigation.dropin.NavigationViewApiError.IncompleteRoutesInfo INSTANCE;
  }

  public static final class NavigationViewApiError.InvalidRoutesInfo extends com.mapbox.navigation.dropin.NavigationViewApiError {
    field public static final com.mapbox.navigation.dropin.NavigationViewApiError.InvalidRoutesInfo INSTANCE;
  }

  public static final class NavigationViewApiError.MissingDestinationInfo extends com.mapbox.navigation.dropin.NavigationViewApiError {
    field public static final com.mapbox.navigation.dropin.NavigationViewApiError.MissingDestinationInfo INSTANCE;
  }

  public static final class NavigationViewApiError.MissingPreviewRoutesInfo extends com.mapbox.navigation.dropin.NavigationViewApiError {
    field public static final com.mapbox.navigation.dropin.NavigationViewApiError.MissingPreviewRoutesInfo INSTANCE;
  }

  public static final class NavigationViewApiError.MissingRoutesInfo extends com.mapbox.navigation.dropin.NavigationViewApiError {
    field public static final com.mapbox.navigation.dropin.NavigationViewApiError.MissingRoutesInfo INSTANCE;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public abstract class NavigationViewListener {
    ctor public NavigationViewListener();
    method public void onActiveNavigation();
    method public void onArrival();
    method public void onAudioGuidanceStateChanged(boolean muted);
    method public void onCameraPaddingChanged(com.mapbox.maps.EdgeInsets padding);
    method public void onDestinationChanged(com.mapbox.geojson.Point? destination);
    method public void onDestinationPreview();
    method public void onFollowingCameraMode();
    method public void onFreeDrive();
    method public void onIdleCameraMode();
    method public void onInfoPanelCollapsed();
    method public void onInfoPanelExpanded();
    method public void onInfoPanelHidden();
    method public void onOverviewCameraMode();
    method public void onRouteFetchCanceled(com.mapbox.api.directions.v5.models.RouteOptions routeOptions, com.mapbox.navigation.base.route.RouterOrigin routerOrigin);
    method public void onRouteFetchFailed(java.util.List<com.mapbox.navigation.base.route.RouterFailure> reasons, com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
    method public void onRouteFetchSuccessful(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> routes);
    method public void onRouteFetching(long requestId);
    method public void onRoutePreview();
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class ViewBinderCustomization {
    ctor public ViewBinderCustomization();
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder? getActionButtonsBinder();
    method public java.util.List<com.mapbox.navigation.dropin.ActionButtonDescription>? getCustomActionButtons();
    method public com.mapbox.navigation.dropin.binder.infopanel.InfoPanelBinder? getInfoPanelBinder();
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder? getInfoPanelContentBinder();
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder? getInfoPanelHeaderBinder();
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder? getInfoPanelTripProgressBinder();
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder? getLeftFrameBinder();
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder? getManeuverBinder();
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder? getRightFrameBinder();
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder? getRoadNameBinder();
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder? getSpeedLimitBinder();
    method public void setActionButtonsBinder(com.mapbox.navigation.ui.base.lifecycle.UIBinder?);
    method public void setCustomActionButtons(java.util.List<com.mapbox.navigation.dropin.ActionButtonDescription>?);
    method public void setInfoPanelBinder(com.mapbox.navigation.dropin.binder.infopanel.InfoPanelBinder?);
    method public void setInfoPanelContentBinder(com.mapbox.navigation.ui.base.lifecycle.UIBinder?);
    method public void setInfoPanelHeaderBinder(com.mapbox.navigation.ui.base.lifecycle.UIBinder?);
    method public void setInfoPanelTripProgressBinder(com.mapbox.navigation.ui.base.lifecycle.UIBinder?);
    method public void setLeftFrameBinder(com.mapbox.navigation.ui.base.lifecycle.UIBinder?);
    method public void setManeuverBinder(com.mapbox.navigation.ui.base.lifecycle.UIBinder?);
    method public void setRightFrameBinder(com.mapbox.navigation.ui.base.lifecycle.UIBinder?);
    method public void setRoadNameBinder(com.mapbox.navigation.ui.base.lifecycle.UIBinder?);
    method public void setSpeedLimitBinder(com.mapbox.navigation.ui.base.lifecycle.UIBinder?);
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder? actionButtonsBinder;
    property public final java.util.List<com.mapbox.navigation.dropin.ActionButtonDescription>? customActionButtons;
    property public final com.mapbox.navigation.dropin.binder.infopanel.InfoPanelBinder? infoPanelBinder;
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder? infoPanelContentBinder;
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder? infoPanelHeaderBinder;
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder? infoPanelTripProgressBinder;
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder? leftFrameBinder;
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder? maneuverBinder;
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder? rightFrameBinder;
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder? roadNameBinder;
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder? speedLimitBinder;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class ViewOptionsCustomization {
    ctor public ViewOptionsCustomization();
    method public Boolean? getEnableMapLongClickIntercept();
    method public Integer? getInfoPanelForcedState();
    method public String? getMapStyleUriDay();
    method public String? getMapStyleUriNight();
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions? getRouteArrowOptions();
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions? getRouteLineOptions();
    method public Boolean? getShowInfoPanelInFreeDrive();
    method public Boolean? isInfoPanelHideable();
    method public void setEnableMapLongClickIntercept(Boolean?);
    method public void setInfoPanelForcedState(Integer?);
    method public void setInfoPanelHideable(Boolean?);
    method public void setMapStyleUriDay(String?);
    method public void setMapStyleUriNight(String?);
    method public void setRouteArrowOptions(com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions?);
    method public void setRouteLineOptions(com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions?);
    method public void setShowInfoPanelInFreeDrive(Boolean?);
    property public final Boolean? enableMapLongClickIntercept;
    property public final Integer? infoPanelForcedState;
    property public final Boolean? isInfoPanelHideable;
    property public final String? mapStyleUriDay;
    property public final String? mapStyleUriNight;
    property public final com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions? routeArrowOptions;
    property public final com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions? routeLineOptions;
    property public final Boolean? showInfoPanelInFreeDrive;
    field public static final com.mapbox.navigation.dropin.ViewOptionsCustomization.Companion Companion;
  }

  public static final class ViewOptionsCustomization.Companion {
    method public com.mapbox.navigation.ui.maps.route.arrow.model.RouteArrowOptions defaultRouteArrowOptions(android.content.Context context);
    method public com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineOptions defaultRouteLineOptions(android.content.Context context);
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class ViewStyleCustomization {
    ctor public ViewStyleCustomization();
    method public Integer? getAudioGuidanceButtonStyle();
    method public Integer? getCameraModeButtonStyle();
    method public Integer? getDestinationMarker();
    method public Integer? getEndNavigationButtonStyle();
    method public Integer? getInfoPanelBackground();
    method public Integer? getInfoPanelMarginEnd();
    method public Integer? getInfoPanelMarginStart();
    method public Integer? getInfoPanelPeekHeight();
    method public com.mapbox.navigation.ui.maneuver.model.ManeuverViewOptions? getManeuverViewOptions();
    method public Integer? getRecenterButtonStyle();
    method public Integer? getRoadNameBackground();
    method public Integer? getRoadNameTextAppearance();
    method public Integer? getRoutePreviewButtonStyle();
    method public Integer? getSpeedLimitStyle();
    method public Integer? getSpeedLimitTextAppearance();
    method public Integer? getStartNavigationButtonStyle();
    method public Integer? getTripProgressStyle();
    method public void setAudioGuidanceButtonStyle(Integer?);
    method public void setCameraModeButtonStyle(Integer?);
    method public void setDestinationMarker(Integer?);
    method public void setEndNavigationButtonStyle(Integer?);
    method public void setInfoPanelBackground(Integer?);
    method public void setInfoPanelMarginEnd(Integer?);
    method public void setInfoPanelMarginStart(Integer?);
    method public void setInfoPanelPeekHeight(Integer?);
    method public void setManeuverViewOptions(com.mapbox.navigation.ui.maneuver.model.ManeuverViewOptions?);
    method public void setRecenterButtonStyle(Integer?);
    method public void setRoadNameBackground(Integer?);
    method public void setRoadNameTextAppearance(Integer?);
    method public void setRoutePreviewButtonStyle(Integer?);
    method public void setSpeedLimitStyle(Integer?);
    method public void setSpeedLimitTextAppearance(Integer?);
    method public void setStartNavigationButtonStyle(Integer?);
    method public void setTripProgressStyle(Integer?);
    property public final Integer? audioGuidanceButtonStyle;
    property public final Integer? cameraModeButtonStyle;
    property public final Integer? destinationMarker;
    property public final Integer? endNavigationButtonStyle;
    property public final Integer? infoPanelBackground;
    property public final Integer? infoPanelMarginEnd;
    property public final Integer? infoPanelMarginStart;
    property public final Integer? infoPanelPeekHeight;
    property public final com.mapbox.navigation.ui.maneuver.model.ManeuverViewOptions? maneuverViewOptions;
    property public final Integer? recenterButtonStyle;
    property public final Integer? roadNameBackground;
    property public final Integer? roadNameTextAppearance;
    property public final Integer? routePreviewButtonStyle;
    property public final Integer? speedLimitStyle;
    property public final Integer? speedLimitTextAppearance;
    property public final Integer? startNavigationButtonStyle;
    property public final Integer? tripProgressStyle;
    field public static final com.mapbox.navigation.dropin.ViewStyleCustomization.Companion Companion;
  }

  public static final class ViewStyleCustomization.Companion {
    method @StyleRes public int defaultAudioGuidanceButtonStyle();
    method @StyleRes public int defaultCameraModeButtonStyle();
    method @DrawableRes public int defaultDestinationMarker();
    method @StyleRes public int defaultEndNavigationButtonStyle();
    method @DrawableRes public int defaultInfoPanelBackground();
    method @Px public int defaultInfoPanelMarginEnd();
    method @Px public int defaultInfoPanelMarginStart();
    method @Px public int defaultInfoPanelPeekHeight(android.content.Context context);
    method public com.mapbox.navigation.ui.maneuver.model.ManeuverViewOptions defaultManeuverViewOptions();
    method @StyleRes public int defaultRecenterButtonStyle();
    method @DrawableRes public int defaultRoadNameBackground();
    method @StyleRes public int defaultRoadNameTextAppearance();
    method @StyleRes public int defaultRoutePreviewButtonStyle();
    method @StyleRes public int defaultSpeedLimitStyle();
    method @StyleRes public int defaultSpeedLimitTextAppearance();
    method @StyleRes public int defaultStartNavigationButtonStyle();
    method @StyleRes public int defaultTripProgressStyle();
  }

}

package com.mapbox.navigation.dropin.binder.infopanel {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public abstract class InfoPanelBinder implements com.mapbox.navigation.ui.base.lifecycle.UIBinder {
    ctor public InfoPanelBinder();
    method public void applySystemBarsInsets(android.view.ViewGroup layout, androidx.core.graphics.Insets insets);
    method public com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver bind(android.view.ViewGroup viewGroup);
    method public abstract android.view.ViewGroup? getContentLayout(android.view.ViewGroup layout);
    method public abstract android.view.ViewGroup? getHeaderLayout(android.view.ViewGroup layout);
    method public abstract android.view.ViewGroup onCreateLayout(android.view.LayoutInflater layoutInflater, android.view.ViewGroup root);
    field public static final com.mapbox.navigation.dropin.binder.infopanel.InfoPanelBinder.Companion Companion;
  }

  public static final class InfoPanelBinder.Companion {
    method public com.mapbox.navigation.dropin.binder.infopanel.InfoPanelBinder defaultBinder();
  }

}

