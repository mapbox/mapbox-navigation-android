// Signature format: 3.0
package com.mapbox.navigation.ui.base {

  public interface MapboxState {
  }

  public interface MapboxView<S extends com.mapbox.navigation.ui.base.MapboxState> {
    method public void render(S state);
  }

}

package com.mapbox.navigation.ui.base.api.maneuver {

  public interface ManeuverApi extends com.mapbox.navigation.ui.base.api.maneuver.UpcomingManeuverApi {
    method public void cancelManeuver();
    method public void cancelStepDistanceRemaining();
    method public void retrieveManeuver(com.mapbox.api.directions.v5.models.BannerInstructions bannerInstruction, com.mapbox.navigation.ui.base.api.maneuver.ManeuverCallback callback);
    method public void retrieveStepDistanceRemaining(com.mapbox.navigation.base.trip.model.RouteStepProgress routeStepProgress, com.mapbox.navigation.ui.base.api.maneuver.StepDistanceRemainingCallback callback);
  }

  public interface ManeuverCallback {
    method public void onManeuver(com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.CurrentManeuver currentManeuver);
  }

  public interface StepDistanceRemainingCallback {
    method public void onStepDistanceRemaining(com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.DistanceRemainingToFinishStep distanceRemaining);
  }

  public interface UpcomingManeuverApi {
    method public void cancelUpcomingManeuver();
    method public void retrieveUpcomingManeuvers(com.mapbox.api.directions.v5.models.RouteLeg routeLeg, com.mapbox.navigation.ui.base.api.maneuver.UpcomingManeuversCallback callback);
  }

  public interface UpcomingManeuversCallback {
    method public void onUpcomingManeuvers(com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.UpcomingManeuvers.Upcoming state);
  }

}

package com.mapbox.navigation.ui.base.api.signboard {

  public interface SignboardApi {
    method public void cancelAll();
    method public void generateSignboard(com.mapbox.api.directions.v5.models.BannerInstructions instructions, com.mapbox.navigation.ui.base.api.signboard.SignboardReadyCallback callback);
  }

  public interface SignboardReadyCallback {
    method public void onAvailable(com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Available state);
    method public void onError(com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Error state);
    method public void onUnavailable(com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Empty state);
  }

}

package com.mapbox.navigation.ui.base.api.snapshotter {

  public interface SnapshotReadyCallback {
    method public void onFailure(com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure error);
    method public void onSnapshotReady(com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotReady bitmap);
  }

  public interface SnapshotterApi {
    method public void cancel();
    method public void generateSnapshot(com.mapbox.navigation.base.trip.model.RouteProgress progress, com.mapbox.navigation.ui.base.api.snapshotter.SnapshotReadyCallback callback);
  }

}

package com.mapbox.navigation.ui.base.api.tripprogress {

  public interface TripProgressApi {
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressState.Update getTripProgress(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
  }

}

package com.mapbox.navigation.ui.base.api.voice {

  public interface SpeechApi {
    method public void cancel();
    method public void clean(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public void generate(com.mapbox.api.directions.v5.models.VoiceInstructions voiceInstruction, com.mapbox.navigation.ui.base.api.voice.SpeechCallback callback);
  }

  public interface SpeechCallback {
    method public void onAvailable(com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech.Available state);
    method public void onError(com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech.Error error);
  }

  public interface VoiceInstructionsPlayer {
    method public void clear();
    method public void play(com.mapbox.navigation.ui.base.model.voice.SpeechState.ReadyToPlay state, com.mapbox.navigation.ui.base.api.voice.VoiceInstructionsPlayerCallback callback);
    method public void shutdown();
    method public void volume(com.mapbox.navigation.ui.base.model.voice.SpeechState.Volume state);
  }

  public interface VoiceInstructionsPlayerCallback {
    method public void onDone(com.mapbox.navigation.ui.base.model.voice.SpeechState.DonePlaying state);
  }

}

package com.mapbox.navigation.ui.base.formatter {

  public interface ValueFormatter<T, R> {
    method public R! format(T? t);
  }

}

package com.mapbox.navigation.ui.base.internal.model.route {

  public final class RouteConstants {
    method public int getALTERNATE_ROUTE_CASING_COLOR();
    method public int getALTERNATE_ROUTE_DEFAULT_COLOR();
    method public int getALTERNATE_ROUTE_HEAVY_TRAFFIC_COLOR();
    method public int getALTERNATE_ROUTE_LOW_TRAFFIC_COLOR();
    method public int getALTERNATE_ROUTE_MODERATE_TRAFFIC_COLOR();
    method public int getALTERNATE_ROUTE_SEVERE_TRAFFIC_COLOR();
    method public int getALTERNATE_ROUTE_UNKNOWN_TRAFFIC_COLOR();
    method public Double![] getARROW_HEAD_CASING_OFFSET();
    method public Double![] getARROW_HEAD_OFFSET();
    method public int getDESTINATION_WAYPOINT_ICON();
    method public int getMANEUVER_ARROWHEAD_ICON_CASING_DRAWABLE();
    method public int getMANEUVER_ARROWHEAD_ICON_DRAWABLE();
    method public int getMANEUVER_ARROW_BORDER_COLOR();
    method public int getMANEUVER_ARROW_COLOR();
    method public int getORIGIN_WAYPOINT_ICON();
    method public int getROUTE_CASING_COLOR();
    method public int getROUTE_DEFAULT_COLOR();
    method public int getROUTE_HEAVY_TRAFFIC_COLOR();
    method public int getROUTE_LINE_TRAVELED_CASING_COLOR();
    method public int getROUTE_LINE_TRAVELED_COLOR();
    method public int getROUTE_LOW_TRAFFIC_COLOR();
    method public int getROUTE_MODERATE_TRAFFIC_COLOR();
    method public int getROUTE_SEVERE_TRAFFIC_COLOR();
    method public int getROUTE_UNKNOWN_TRAFFIC_COLOR();
    method public java.util.List<java.lang.String> getTRAFFIC_BACKFILL_ROAD_CLASSES();
    property public final int ALTERNATE_ROUTE_CASING_COLOR;
    property public final int ALTERNATE_ROUTE_DEFAULT_COLOR;
    property public final int ALTERNATE_ROUTE_HEAVY_TRAFFIC_COLOR;
    property public final int ALTERNATE_ROUTE_LOW_TRAFFIC_COLOR;
    property public final int ALTERNATE_ROUTE_MODERATE_TRAFFIC_COLOR;
    property public final int ALTERNATE_ROUTE_SEVERE_TRAFFIC_COLOR;
    property public final int ALTERNATE_ROUTE_UNKNOWN_TRAFFIC_COLOR;
    property public final Double![] ARROW_HEAD_CASING_OFFSET;
    property public final Double![] ARROW_HEAD_OFFSET;
    property public final int DESTINATION_WAYPOINT_ICON;
    property public final int MANEUVER_ARROWHEAD_ICON_CASING_DRAWABLE;
    property public final int MANEUVER_ARROWHEAD_ICON_DRAWABLE;
    property public final int MANEUVER_ARROW_BORDER_COLOR;
    property public final int MANEUVER_ARROW_COLOR;
    property public final int ORIGIN_WAYPOINT_ICON;
    property public final int ROUTE_CASING_COLOR;
    property public final int ROUTE_DEFAULT_COLOR;
    property public final int ROUTE_HEAVY_TRAFFIC_COLOR;
    property public final int ROUTE_LINE_TRAVELED_CASING_COLOR;
    property public final int ROUTE_LINE_TRAVELED_COLOR;
    property public final int ROUTE_LOW_TRAFFIC_COLOR;
    property public final int ROUTE_MODERATE_TRAFFIC_COLOR;
    property public final int ROUTE_SEVERE_TRAFFIC_COLOR;
    property public final int ROUTE_UNKNOWN_TRAFFIC_COLOR;
    property public final java.util.List<java.lang.String> TRAFFIC_BACKFILL_ROAD_CLASSES;
    field public static final String ALTERNATIVE_ROUTE1_SOURCE_ID = "mapbox-navigation-alt-route1-source";
    field public static final String ALTERNATIVE_ROUTE2_SOURCE_ID = "mapbox-navigation-alt-route2-source";
    field public static final String ARROW_BEARING = "mapbox-navigation-arrow-bearing";
    field public static final String ARROW_HEAD_ICON = "mapbox-navigation-arrow-head-icon";
    field public static final String ARROW_HEAD_ICON_CASING = "mapbox-navigation-arrow-head-icon-casing";
    field public static final String ARROW_HEAD_SOURCE_ID = "mapbox-navigation-arrow-head-source";
    field public static final double ARROW_HIDDEN_ZOOM_LEVEL = 14.0;
    field public static final String ARROW_SHAFT_SOURCE_ID = "mapbox-navigation-arrow-shaft-source";
    field public static final String DEFAULT_ROUTE_DESCRIPTOR_PLACEHOLDER = "mapboxDescriptorPlaceHolderUnused";
    field public static final double DEFAULT_ROUTE_SOURCES_TOLERANCE = 0.375;
    field public static final String DESTINATION_MARKER_NAME = "destinationMarker";
    field public static final String HEAVY_CONGESTION_VALUE = "heavy";
    field public static final com.mapbox.navigation.ui.base.internal.model.route.RouteConstants! INSTANCE;
    field public static final String LOW_CONGESTION_VALUE = "low";
    field public static final double MAX_ARROW_ZOOM = 22.0;
    field public static final double MAX_DEGREES = 360.0;
    field public static final double MAX_ELAPSED_SINCE_INDEX_UPDATE_NANO = 1.5E9;
    field public static final double MAX_ZOOM_ARROW_HEAD_CASING_SCALE = 0.8;
    field public static final double MAX_ZOOM_ARROW_HEAD_SCALE = 0.8;
    field public static final double MAX_ZOOM_ARROW_SHAFT_CASING_SCALE = 17.0;
    field public static final double MAX_ZOOM_ARROW_SHAFT_SCALE = 13.0;
    field public static final double MIN_ARROW_ZOOM = 10.0;
    field public static final double MIN_ZOOM_ARROW_HEAD_CASING_SCALE = 0.2;
    field public static final double MIN_ZOOM_ARROW_HEAD_SCALE = 0.2;
    field public static final double MIN_ZOOM_ARROW_SHAFT_CASING_SCALE = 3.4;
    field public static final double MIN_ZOOM_ARROW_SHAFT_SCALE = 2.6;
    field public static final String MODERATE_CONGESTION_VALUE = "moderate";
    field public static final double OPAQUE = 0.0;
    field public static final String ORIGIN_MARKER_NAME = "originMarker";
    field public static final String PRIMARY_ROUTE_SOURCE_ID = "mapbox-navigation-route-source";
    field public static final boolean ROUNDED_LINE_CAP = true;
    field public static final double ROUTE_LINE_UPDATE_MAX_DISTANCE_THRESHOLD_IN_METERS = 1.0;
    field public static final String SEVERE_CONGESTION_VALUE = "severe";
    field public static final int THIRTY = 30; // 0x1e
    field public static final double TRANSPARENT = 1.0;
    field public static final int TWO_POINTS = 2; // 0x2
    field public static final String UNKNOWN_CONGESTION_VALUE = "unknown";
    field public static final String WAYPOINT_DESTINATION_VALUE = "destination";
    field public static final String WAYPOINT_ORIGIN_VALUE = "origin";
    field public static final String WAYPOINT_PROPERTY_KEY = "wayPoint";
    field public static final String WAYPOINT_SOURCE_ID = "mapbox-navigation-waypoint-source";
  }

}

package com.mapbox.navigation.ui.base.model.maneuver {

  public final class Component {
    ctor public Component(String type, com.mapbox.navigation.ui.base.model.maneuver.ComponentNode node);
    method public String component1();
    method public com.mapbox.navigation.ui.base.model.maneuver.ComponentNode component2();
    method public com.mapbox.navigation.ui.base.model.maneuver.Component copy(String type, com.mapbox.navigation.ui.base.model.maneuver.ComponentNode node);
    method public com.mapbox.navigation.ui.base.model.maneuver.ComponentNode getNode();
    method public String getType();
  }

  public interface ComponentNode {
  }

  public final class DelimiterComponentNode implements com.mapbox.navigation.ui.base.model.maneuver.ComponentNode {
    method public String getText();
    method public com.mapbox.navigation.ui.base.model.maneuver.DelimiterComponentNode.Builder toBuilder();
  }

  public static final class DelimiterComponentNode.Builder {
    ctor public DelimiterComponentNode.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.DelimiterComponentNode build();
    method public com.mapbox.navigation.ui.base.model.maneuver.DelimiterComponentNode.Builder text(String text);
  }

  public final class ExitComponentNode implements com.mapbox.navigation.ui.base.model.maneuver.ComponentNode {
    method public String getText();
    method public com.mapbox.navigation.ui.base.model.maneuver.ExitComponentNode.Builder toBuilder();
  }

  public static final class ExitComponentNode.Builder {
    ctor public ExitComponentNode.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.ExitComponentNode build();
    method public com.mapbox.navigation.ui.base.model.maneuver.ExitComponentNode.Builder text(String text);
  }

  public final class ExitNumberComponentNode implements com.mapbox.navigation.ui.base.model.maneuver.ComponentNode {
    method public String getText();
    method public com.mapbox.navigation.ui.base.model.maneuver.ExitNumberComponentNode.Builder toBuilder();
  }

  public static final class ExitNumberComponentNode.Builder {
    ctor public ExitNumberComponentNode.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.ExitNumberComponentNode build();
    method public com.mapbox.navigation.ui.base.model.maneuver.ExitNumberComponentNode.Builder text(String text);
  }

  public final class Lane {
    method public String? getActiveDirection();
    method public java.util.List<com.mapbox.navigation.ui.base.model.maneuver.LaneIndicator> getAllLanes();
    method public com.mapbox.navigation.ui.base.model.maneuver.Lane.Builder toBuilder();
  }

  public static final class Lane.Builder {
    ctor public Lane.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.Lane.Builder activeDirection(String? activeDirection);
    method public com.mapbox.navigation.ui.base.model.maneuver.Lane.Builder allLanes(java.util.List<com.mapbox.navigation.ui.base.model.maneuver.LaneIndicator> allLanes);
    method public com.mapbox.navigation.ui.base.model.maneuver.Lane build();
  }

  public final class LaneIndicator {
    method public java.util.List<java.lang.String> getDirections();
    method public boolean isActive();
    method public com.mapbox.navigation.ui.base.model.maneuver.LaneIndicator.Builder toBuilder();
  }

  public static final class LaneIndicator.Builder {
    ctor public LaneIndicator.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.LaneIndicator build();
    method public com.mapbox.navigation.ui.base.model.maneuver.LaneIndicator.Builder directions(java.util.List<java.lang.String> directions);
    method public com.mapbox.navigation.ui.base.model.maneuver.LaneIndicator.Builder isActive(boolean isActive);
  }

  public final class Maneuver {
    method public com.mapbox.navigation.ui.base.model.maneuver.Lane? getLaneGuidance();
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver getPrimary();
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver? getSecondary();
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver? getSub();
    method public com.mapbox.navigation.ui.base.model.maneuver.TotalManeuverDistance getTotalManeuverDistance();
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver.Builder toBuilder();
  }

  public static final class Maneuver.Builder {
    ctor public Maneuver.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver build();
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver.Builder laneGuidance(com.mapbox.navigation.ui.base.model.maneuver.Lane? laneGuidance);
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver.Builder primary(com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver primary);
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver.Builder secondary(com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver? secondary);
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver.Builder sub(com.mapbox.navigation.ui.base.model.maneuver.SubManeuver? sub);
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver.Builder totalManeuverDistance(com.mapbox.navigation.ui.base.model.maneuver.TotalManeuverDistance totalManeuverDistance);
  }

  public abstract sealed class ManeuverState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public static final class ManeuverState.CurrentManeuver extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState {
    ctor public ManeuverState.CurrentManeuver(com.mapbox.navigation.ui.base.model.maneuver.Maneuver maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver component1();
    method public com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.CurrentManeuver copy(com.mapbox.navigation.ui.base.model.maneuver.Maneuver maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver getManeuver();
    method public void setManeuver(com.mapbox.navigation.ui.base.model.maneuver.Maneuver p);
  }

  public static final class ManeuverState.DistanceRemainingToFinishStep extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState {
    ctor public ManeuverState.DistanceRemainingToFinishStep(com.mapbox.navigation.base.formatter.DistanceFormatter distanceFormatter, double distanceRemaining);
    method public com.mapbox.navigation.base.formatter.DistanceFormatter component1();
    method public double component2();
    method public com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.DistanceRemainingToFinishStep copy(com.mapbox.navigation.base.formatter.DistanceFormatter distanceFormatter, double distanceRemaining);
    method public com.mapbox.navigation.base.formatter.DistanceFormatter getDistanceFormatter();
    method public double getDistanceRemaining();
  }

  public abstract static sealed class ManeuverState.LaneGuidanceManeuver extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState {
  }

  public static final class ManeuverState.LaneGuidanceManeuver.AddLanes extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.LaneGuidanceManeuver {
    ctor public ManeuverState.LaneGuidanceManeuver.AddLanes(com.mapbox.navigation.ui.base.model.maneuver.Lane lane);
    method public com.mapbox.navigation.ui.base.model.maneuver.Lane component1();
    method public com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.LaneGuidanceManeuver.AddLanes copy(com.mapbox.navigation.ui.base.model.maneuver.Lane lane);
    method public com.mapbox.navigation.ui.base.model.maneuver.Lane getLane();
  }

  public static final class ManeuverState.LaneGuidanceManeuver.Hide extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.LaneGuidanceManeuver {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.LaneGuidanceManeuver.Hide! INSTANCE;
  }

  public static final class ManeuverState.LaneGuidanceManeuver.RemoveLanes extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.LaneGuidanceManeuver {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.LaneGuidanceManeuver.RemoveLanes! INSTANCE;
  }

  public static final class ManeuverState.LaneGuidanceManeuver.Show extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.LaneGuidanceManeuver {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.LaneGuidanceManeuver.Show! INSTANCE;
  }

  public abstract static sealed class ManeuverState.ManeuverPrimary extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState {
  }

  public static final class ManeuverState.ManeuverPrimary.Hide extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverPrimary {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverPrimary.Hide! INSTANCE;
  }

  public static final class ManeuverState.ManeuverPrimary.Instruction extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverPrimary {
    ctor public ManeuverState.ManeuverPrimary.Instruction(com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver component1();
    method public com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverPrimary.Instruction copy(com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver getManeuver();
    method public void setManeuver(com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver p);
  }

  public static final class ManeuverState.ManeuverPrimary.Show extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverPrimary {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverPrimary.Show! INSTANCE;
  }

  public abstract static sealed class ManeuverState.ManeuverSecondary extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState {
  }

  public static final class ManeuverState.ManeuverSecondary.Hide extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSecondary {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSecondary.Hide! INSTANCE;
  }

  public static final class ManeuverState.ManeuverSecondary.Instruction extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSecondary {
    ctor public ManeuverState.ManeuverSecondary.Instruction(com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver? maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver? component1();
    method public com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSecondary.Instruction copy(com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver? maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver? getManeuver();
    method public void setManeuver(com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver? p);
  }

  public static final class ManeuverState.ManeuverSecondary.Show extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSecondary {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSecondary.Show! INSTANCE;
  }

  public abstract static sealed class ManeuverState.ManeuverSub extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState {
  }

  public static final class ManeuverState.ManeuverSub.Hide extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSub {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSub.Hide! INSTANCE;
  }

  public static final class ManeuverState.ManeuverSub.Instruction extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSub {
    ctor public ManeuverState.ManeuverSub.Instruction(com.mapbox.navigation.ui.base.model.maneuver.SubManeuver? maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver? component1();
    method public com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSub.Instruction copy(com.mapbox.navigation.ui.base.model.maneuver.SubManeuver? maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver? getManeuver();
    method public void setManeuver(com.mapbox.navigation.ui.base.model.maneuver.SubManeuver? p);
  }

  public static final class ManeuverState.ManeuverSub.Show extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSub {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.ManeuverSub.Show! INSTANCE;
  }

  public static final class ManeuverState.TotalStepDistance extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState {
    ctor public ManeuverState.TotalStepDistance(com.mapbox.navigation.base.formatter.DistanceFormatter distanceFormatter, double totalStepDistance);
    method public com.mapbox.navigation.base.formatter.DistanceFormatter component1();
    method public double component2();
    method public com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.TotalStepDistance copy(com.mapbox.navigation.base.formatter.DistanceFormatter distanceFormatter, double totalStepDistance);
    method public com.mapbox.navigation.base.formatter.DistanceFormatter getDistanceFormatter();
    method public double getTotalStepDistance();
  }

  public abstract static sealed class ManeuverState.UpcomingManeuvers extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState {
  }

  public static final class ManeuverState.UpcomingManeuvers.Hide extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.UpcomingManeuvers {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.UpcomingManeuvers.Hide! INSTANCE;
  }

  public static final class ManeuverState.UpcomingManeuvers.RemoveUpcoming extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.UpcomingManeuvers {
    ctor public ManeuverState.UpcomingManeuvers.RemoveUpcoming(com.mapbox.navigation.ui.base.model.maneuver.Maneuver maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver component1();
    method public com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.UpcomingManeuvers.RemoveUpcoming copy(com.mapbox.navigation.ui.base.model.maneuver.Maneuver maneuver);
    method public com.mapbox.navigation.ui.base.model.maneuver.Maneuver getManeuver();
  }

  public static final class ManeuverState.UpcomingManeuvers.Show extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.UpcomingManeuvers {
    field public static final com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.UpcomingManeuvers.Show! INSTANCE;
  }

  public static final class ManeuverState.UpcomingManeuvers.Upcoming extends com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.UpcomingManeuvers {
    ctor public ManeuverState.UpcomingManeuvers.Upcoming(java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Maneuver> upcomingManeuverList);
    method public java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Maneuver> component1();
    method public com.mapbox.navigation.ui.base.model.maneuver.ManeuverState.UpcomingManeuvers.Upcoming copy(java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Maneuver> upcomingManeuverList);
    method public java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Maneuver> getUpcomingManeuverList();
  }

  public final class PrimaryManeuver {
    method public java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Component> getComponentList();
    method public Double? getDegrees();
    method public String? getDrivingSide();
    method public String? getModifier();
    method public String getText();
    method public String? getType();
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver.Builder toBuilder();
  }

  public static final class PrimaryManeuver.Builder {
    ctor public PrimaryManeuver.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver build();
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver.Builder componentList(java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Component> componentList);
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver.Builder degrees(Double? degrees);
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver.Builder drivingSide(String? drivingSide);
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver.Builder modifier(String? modifier);
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver.Builder text(String text);
    method public com.mapbox.navigation.ui.base.model.maneuver.PrimaryManeuver.Builder type(String? type);
  }

  public final class RoadShieldComponentNode implements com.mapbox.navigation.ui.base.model.maneuver.ComponentNode {
    method public byte[]? getShieldIcon();
    method public String getText();
    method public com.mapbox.navigation.ui.base.model.maneuver.RoadShieldComponentNode.Builder toBuilder();
  }

  public static final class RoadShieldComponentNode.Builder {
    ctor public RoadShieldComponentNode.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.RoadShieldComponentNode build();
    method public com.mapbox.navigation.ui.base.model.maneuver.RoadShieldComponentNode.Builder shieldIcon(byte[]? shieldIcon);
    method public com.mapbox.navigation.ui.base.model.maneuver.RoadShieldComponentNode.Builder text(String text);
  }

  public final class SecondaryManeuver {
    method public java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Component> getComponentList();
    method public Double? getDegrees();
    method public String? getDrivingSide();
    method public String? getModifier();
    method public String getText();
    method public String? getType();
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver.Builder toBuilder();
  }

  public static final class SecondaryManeuver.Builder {
    ctor public SecondaryManeuver.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver build();
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver.Builder componentList(java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Component> componentList);
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver.Builder degrees(Double? degrees);
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver.Builder drivingSide(String? drivingSide);
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver.Builder modifier(String? modifier);
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver.Builder text(String text);
    method public com.mapbox.navigation.ui.base.model.maneuver.SecondaryManeuver.Builder type(String? type);
  }

  public final class SubManeuver {
    method public java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Component> getComponentList();
    method public Double? getDegrees();
    method public String? getDrivingSide();
    method public String? getModifier();
    method public String getText();
    method public String? getType();
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver.Builder toBuilder();
  }

  public static final class SubManeuver.Builder {
    ctor public SubManeuver.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver build();
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver.Builder componentList(java.util.List<com.mapbox.navigation.ui.base.model.maneuver.Component> componentList);
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver.Builder degrees(Double? degrees);
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver.Builder drivingSide(String? drivingSide);
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver.Builder modifier(String? modifier);
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver.Builder text(String text);
    method public com.mapbox.navigation.ui.base.model.maneuver.SubManeuver.Builder type(String? type);
  }

  public final class TextComponentNode implements com.mapbox.navigation.ui.base.model.maneuver.ComponentNode {
    method public String? getAbbr();
    method public Integer? getAbbrPriority();
    method public String getText();
    method public com.mapbox.navigation.ui.base.model.maneuver.TextComponentNode.Builder toBuilder();
  }

  public static final class TextComponentNode.Builder {
    ctor public TextComponentNode.Builder();
    method public com.mapbox.navigation.ui.base.model.maneuver.TextComponentNode.Builder abbr(String? abbr);
    method public com.mapbox.navigation.ui.base.model.maneuver.TextComponentNode.Builder abbrPriority(Integer? abbrPriority);
    method public com.mapbox.navigation.ui.base.model.maneuver.TextComponentNode build();
    method public com.mapbox.navigation.ui.base.model.maneuver.TextComponentNode.Builder text(String text);
  }

  public final class TotalManeuverDistance {
    ctor public TotalManeuverDistance(double totalDistance);
    method public double component1();
    method public com.mapbox.navigation.ui.base.model.maneuver.TotalManeuverDistance copy(double totalDistance);
    method public double getTotalDistance();
  }

}

package com.mapbox.navigation.ui.base.model.route {

  public final class RouteLayerConstants {
    field public static final String ALTERNATIVE_ROUTE1_CASING_LAYER_ID = "mapbox-navigation-alt-route1-casing-layer";
    field public static final String ALTERNATIVE_ROUTE1_LAYER_ID = "mapbox-navigation-alt-route1-layer";
    field public static final String ALTERNATIVE_ROUTE1_TRAFFIC_LAYER_ID = "mapbox-navigation-alt-route1-traffic-layer";
    field public static final String ALTERNATIVE_ROUTE2_CASING_LAYER_ID = "mapbox-navigation-alt-route2-casing-layer";
    field public static final String ALTERNATIVE_ROUTE2_LAYER_ID = "mapbox-navigation-alt-route2-layer";
    field public static final String ALTERNATIVE_ROUTE2_TRAFFIC_LAYER_ID = "mapbox-navigation-alt-route2-traffic-layer";
    field public static final String ARROW_HEAD_CASING_LAYER_ID = "mapbox-navigation-arrow-head-casing-layer";
    field public static final String ARROW_HEAD_LAYER_ID = "mapbox-navigation-arrow-head-layer";
    field public static final String ARROW_SHAFT_CASING_LINE_LAYER_ID = "mapbox-navigation-arrow-shaft-casing-layer";
    field public static final String ARROW_SHAFT_LINE_LAYER_ID = "mapbox-navigation-arrow-shaft-layer";
    field public static final com.mapbox.navigation.ui.base.model.route.RouteLayerConstants! INSTANCE;
    field public static final String PRIMARY_ROUTE_CASING_LAYER_ID = "mapbox-navigation-route-casing-layer";
    field public static final String PRIMARY_ROUTE_LAYER_ID = "mapbox-navigation-route-layer";
    field public static final String PRIMARY_ROUTE_TRAFFIC_LAYER_ID = "mapbox-navigation-route-traffic-layer";
    field public static final String WAYPOINT_LAYER_ID = "mapbox-navigation-waypoint-layer";
  }

}

package com.mapbox.navigation.ui.base.model.signboard {

  public abstract sealed class SignboardState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public static final class SignboardState.Hide extends com.mapbox.navigation.ui.base.model.signboard.SignboardState {
    field public static final com.mapbox.navigation.ui.base.model.signboard.SignboardState.Hide! INSTANCE;
  }

  public static final class SignboardState.Show extends com.mapbox.navigation.ui.base.model.signboard.SignboardState {
    field public static final com.mapbox.navigation.ui.base.model.signboard.SignboardState.Show! INSTANCE;
  }

  public abstract static sealed class SignboardState.Signboard extends com.mapbox.navigation.ui.base.model.signboard.SignboardState {
  }

  public static final class SignboardState.Signboard.Available extends com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard {
    ctor public SignboardState.Signboard.Available(int desiredSignboardWidth, byte[] bytes);
    ctor public SignboardState.Signboard.Available(byte[] bytes);
    method public int component1();
    method public byte[] component2();
    method public com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Available copy(int desiredSignboardWidth, byte[] bytes);
    method public byte[] getBytes();
    method public int getDesiredSignboardWidth();
  }

  public static final class SignboardState.Signboard.Empty extends com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard {
    field public static final com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Empty! INSTANCE;
  }

  public static final class SignboardState.Signboard.Error extends com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard {
    ctor public SignboardState.Signboard.Error(String? exception);
    method public String? component1();
    method public com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Error copy(String? exception);
    method public String? getException();
  }

}

package com.mapbox.navigation.ui.base.model.snapshotter {

  public abstract sealed class SnapshotState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public abstract static sealed class SnapshotState.SnapshotFailure extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState {
  }

  public static final class SnapshotState.SnapshotFailure.SnapshotEmpty extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure {
    ctor public SnapshotState.SnapshotFailure.SnapshotEmpty(String? exception);
    method public String? component1();
    method public com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure.SnapshotEmpty copy(String? exception);
    method public String? getException();
  }

  public static final class SnapshotState.SnapshotFailure.SnapshotError extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure {
    ctor public SnapshotState.SnapshotFailure.SnapshotError(String? exception);
    method public String? component1();
    method public com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure.SnapshotError copy(String? exception);
    method public String? getException();
  }

  public static final class SnapshotState.SnapshotFailure.SnapshotUnavailable extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure {
    field public static final com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure.SnapshotUnavailable! INSTANCE;
  }

  public static final class SnapshotState.SnapshotReady extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState {
    ctor public SnapshotState.SnapshotReady(android.graphics.Bitmap bitmap);
    method public android.graphics.Bitmap component1();
    method public com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotReady copy(android.graphics.Bitmap bitmap);
    method public android.graphics.Bitmap getBitmap();
  }

}

package com.mapbox.navigation.ui.base.model.tripprogress {

  public final class DistanceRemainingFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate,android.text.SpannableString> {
    ctor public DistanceRemainingFormatter(com.mapbox.navigation.base.formatter.DistanceFormatterOptions distanceFormatterOptions);
    method public android.text.SpannableString format(com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate t);
  }

  public final class EstimatedTimeToArrivalFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate,android.text.SpannableString> {
    ctor public EstimatedTimeToArrivalFormatter(android.content.Context context, @com.mapbox.navigation.base.TimeFormat.Type int timeFormatType);
    method public android.text.SpannableString format(com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate update);
  }

  public final class PercentDistanceTraveledFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate,android.text.SpannableString> {
    ctor public PercentDistanceTraveledFormatter();
    method public android.text.SpannableString format(com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate update);
  }

  public class TimeRemainingFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate,android.text.SpannableString> {
    ctor public TimeRemainingFormatter(android.content.Context context, java.util.Locale? locale);
    method public android.text.SpannableString format(com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate update);
    method public final java.util.Locale? getLocale();
    method public final void setLocale(java.util.Locale? p);
  }

  public abstract sealed class TripProgressState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public static final class TripProgressState.Update extends com.mapbox.navigation.ui.base.model.tripprogress.TripProgressState {
    ctor public TripProgressState.Update(com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate tripProgressUpdate, com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter formatter);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter getFormatter();
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate getTripProgressUpdate();
  }

  public final class TripProgressUpdate {
    ctor public TripProgressUpdate(long estimatedTimeToArrival, double distanceRemaining, double currentLegTimeRemaining, double totalTimeRemaining, double percentRouteTraveled, @ColorInt int trafficCongestionColor);
    method public double getCurrentLegTimeRemaining();
    method public double getDistanceRemaining();
    method public long getEstimatedTimeToArrival();
    method public double getPercentRouteTraveled();
    method public double getTotalTimeRemaining();
    method public int getTrafficCongestionColor();
  }

  public final class TripProgressUpdateFormatter {
    method public android.text.SpannableString getDistanceRemaining(com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate update);
    method public android.text.SpannableString getEstimatedTimeToArrival(com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate update);
    method public android.text.SpannableString getPercentRouteTraveled(com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate update);
    method public android.text.SpannableString getTimeRemaining(com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate update);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder toBuilder(android.content.Context context);
  }

  public static final class TripProgressUpdateFormatter.Builder {
    ctor public TripProgressUpdateFormatter.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter build();
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder distanceRemainingFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate,android.text.SpannableString> formatter);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder estimatedTimeToArrivalFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate,android.text.SpannableString> formatter);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder percentRouteTraveledFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate,android.text.SpannableString> formatter);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder timeRemainingFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdate,android.text.SpannableString> formatter);
  }

}

package com.mapbox.navigation.ui.base.model.voice {

  public final class Announcement {
    ctor public Announcement(String announcement, String? ssmlAnnouncement, java.io.File? file);
    method public String component1();
    method public String? component2();
    method public java.io.File? component3();
    method public com.mapbox.navigation.ui.base.model.voice.Announcement copy(String announcement, String? ssmlAnnouncement, java.io.File? file);
    method public String getAnnouncement();
    method public java.io.File? getFile();
    method public String? getSsmlAnnouncement();
  }

  public abstract sealed class SpeechState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public static final class SpeechState.DonePlaying extends com.mapbox.navigation.ui.base.model.voice.SpeechState {
    ctor public SpeechState.DonePlaying(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.DonePlaying copy(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement getAnnouncement();
  }

  public static final class SpeechState.ReadyToPlay extends com.mapbox.navigation.ui.base.model.voice.SpeechState {
    ctor public SpeechState.ReadyToPlay(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.ReadyToPlay copy(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement getAnnouncement();
  }

  public abstract static sealed class SpeechState.Speech extends com.mapbox.navigation.ui.base.model.voice.SpeechState {
  }

  public static final class SpeechState.Speech.Available extends com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech {
    ctor public SpeechState.Speech.Available(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech.Available copy(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement getAnnouncement();
  }

  public static final class SpeechState.Speech.Error extends com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech {
    ctor public SpeechState.Speech.Error(String exception);
    method public String component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech.Error copy(String exception);
    method public String getException();
  }

  public static final class SpeechState.Volume extends com.mapbox.navigation.ui.base.model.voice.SpeechState {
    ctor public SpeechState.Volume(@FloatRange(from=null, to=null) float level);
    method public float component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.Volume copy(float level);
    method public float getLevel();
  }

}

package com.mapbox.navigation.ui.base.util {

  @java.lang.FunctionalInterface public interface MapboxNavigationConsumer<T> {
    method public default void accept(T? t);
  }

}

