// Signature format: 3.0
package com.mapbox.navigation.ui.base.formatter {

  public fun interface ValueFormatter<T, R> {
    method public R! format(T? update);
  }

}

package com.mapbox.navigation.ui.base.installer {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public sealed interface ComponentInstaller {
    method public com.mapbox.navigation.ui.base.installer.Installation component(com.mapbox.navigation.ui.base.lifecycle.UIComponent component);
  }

  public final class ComponentInstallerKt {
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public static void installComponents(com.mapbox.navigation.core.lifecycle.MapboxNavigationApp, androidx.lifecycle.LifecycleOwner lifecycleOwner, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.base.installer.ComponentInstaller,kotlin.Unit> config);
    method @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public static void installComponents(com.mapbox.navigation.core.MapboxNavigation, androidx.lifecycle.LifecycleOwner lifecycleOwner, kotlin.jvm.functions.Function1<? super com.mapbox.navigation.ui.base.installer.ComponentInstaller,kotlin.Unit> config);
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public fun interface Installation {
    method public void uninstall();
  }

}

package com.mapbox.navigation.ui.base.lifecycle {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public interface Binder<T> {
    method public com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver bind(T? viewGroup);
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public fun interface UIBinder extends com.mapbox.navigation.ui.base.lifecycle.Binder<android.view.ViewGroup> {
    field public static final com.mapbox.navigation.ui.base.lifecycle.UIBinder.Companion Companion;
  }

  public static final class UIBinder.Companion {
    method public com.mapbox.navigation.ui.base.lifecycle.UIBinder getUSE_DEFAULT();
    property public final com.mapbox.navigation.ui.base.lifecycle.UIBinder USE_DEFAULT;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public class UIComponent implements com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver {
    ctor public UIComponent();
    method public final kotlinx.coroutines.CoroutineScope getCoroutineScope();
    method protected final inline <T> void observe(kotlinx.coroutines.flow.Flow<? extends T>, kotlin.jvm.functions.Function2<? super T,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> action);
    method @CallSuper public void onAttached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method @CallSuper public void onDetached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public final void setCoroutineScope(kotlinx.coroutines.CoroutineScope);
    property public final kotlinx.coroutines.CoroutineScope coroutineScope;
    field public kotlinx.coroutines.CoroutineScope coroutineScope;
  }

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public abstract class UICoordinator<T extends android.view.ViewGroup> implements com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver {
    ctor public UICoordinator(T viewGroup);
    method public abstract kotlinx.coroutines.flow.Flow<com.mapbox.navigation.ui.base.lifecycle.Binder<T>> flowViewBinders(com.mapbox.navigation.core.MapboxNavigation);
    method public final kotlinx.coroutines.CoroutineScope getCoroutineScope();
    method @CallSuper public void onAttached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method @CallSuper public void onDetached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public final void setCoroutineScope(kotlinx.coroutines.CoroutineScope);
    property public final kotlinx.coroutines.CoroutineScope coroutineScope;
    field public kotlinx.coroutines.CoroutineScope coroutineScope;
  }

}

package com.mapbox.navigation.ui.base.util {

  public fun interface MapboxNavigationConsumer<T> {
    method public void accept(T? value);
  }

}

package com.mapbox.navigation.ui.base.view {

  @com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI public final class MapboxExtendableButton extends android.widget.FrameLayout {
    ctor public MapboxExtendableButton(android.content.Context context);
    ctor public MapboxExtendableButton(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public MapboxExtendableButton(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    ctor public MapboxExtendableButton(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr, int defStyleRes);
    method public androidx.constraintlayout.widget.ConstraintLayout getContainerView();
    method public androidx.appcompat.widget.AppCompatImageView getIconImage();
    method public androidx.appcompat.widget.AppCompatTextView getTextView();
    method public void setState(com.mapbox.navigation.ui.base.view.MapboxExtendableButton.State state);
    method public void updateStyle(@StyleRes int style);
    property public final androidx.constraintlayout.widget.ConstraintLayout containerView;
    property public final androidx.appcompat.widget.AppCompatImageView iconImage;
    property public final androidx.appcompat.widget.AppCompatTextView textView;
  }

  public static final class MapboxExtendableButton.State {
    ctor public MapboxExtendableButton.State(@DrawableRes int icon, String? text = null, long duration = 0);
    method public int component1();
    method public String? component2();
    method public long component3();
    method public com.mapbox.navigation.ui.base.view.MapboxExtendableButton.State copy(@DrawableRes int icon, String? text, long duration);
    method public long getDuration();
    method public int getIcon();
    method public String? getText();
    property public final long duration;
    property public final int icon;
    property public final String? text;
  }

}

