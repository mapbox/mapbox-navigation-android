// Signature format: 3.0
package com.mapbox.navigation.ui.base {

  public interface MapboxState {
  }

  public interface MapboxView<S extends com.mapbox.navigation.ui.base.MapboxState> {
    method public void render(S state);
  }

}

package com.mapbox.navigation.ui.base.api.signboard {

  public interface SignboardApi {
    method public void cancelAll();
    method public void generateSignboard(com.mapbox.api.directions.v5.models.BannerInstructions instructions, com.mapbox.navigation.ui.base.api.signboard.SignboardReadyCallback callback);
  }

  public interface SignboardReadyCallback {
    method public void onAvailable(com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Available state);
    method public void onError(com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Error state);
    method public void onUnavailable(com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Empty state);
  }

}

package com.mapbox.navigation.ui.base.api.snapshotter {

  public interface SnapshotReadyCallback {
    method public void onFailure(com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure error);
    method public void onSnapshotReady(com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotReady bitmap);
  }

  public interface SnapshotterApi {
    method public void cancel();
    method public void generateSnapshot(com.mapbox.navigation.base.trip.model.RouteProgress progress, com.mapbox.navigation.ui.base.api.snapshotter.SnapshotReadyCallback callback);
  }

}

package com.mapbox.navigation.ui.base.api.voice {

  public interface SpeechApi {
    method public void cancel();
    method public void clean(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public void generate(com.mapbox.api.directions.v5.models.VoiceInstructions voiceInstruction, com.mapbox.navigation.ui.base.api.voice.SpeechCallback callback);
  }

  public interface SpeechCallback {
    method public void onAvailable(com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech.Available state);
    method public void onError(com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech.Error error, com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech.Available fallback);
  }

  public interface VoiceInstructionsPlayer {
    method public void clear();
    method public void play(com.mapbox.navigation.ui.base.model.voice.SpeechState.ReadyToPlay state, com.mapbox.navigation.ui.base.api.voice.VoiceInstructionsPlayerCallback callback);
    method public void shutdown();
    method public void volume(com.mapbox.navigation.ui.base.model.voice.SpeechState.Volume state);
  }

  public interface VoiceInstructionsPlayerCallback {
    method public void onDone(com.mapbox.navigation.ui.base.model.voice.SpeechState.DonePlaying state);
  }

}

package com.mapbox.navigation.ui.base.formatter {

  public interface ValueFormatter<T, R> {
    method public R! format(T? update);
  }

}

package com.mapbox.navigation.ui.base.internal.model.route {

  public final class RouteConstants {
    method public int getALTERNATE_ROUTE_CASING_COLOR();
    method public int getALTERNATE_ROUTE_DEFAULT_COLOR();
    method public int getALTERNATE_ROUTE_HEAVY_TRAFFIC_COLOR();
    method public int getALTERNATE_ROUTE_LOW_TRAFFIC_COLOR();
    method public int getALTERNATE_ROUTE_MODERATE_TRAFFIC_COLOR();
    method public int getALTERNATE_ROUTE_SEVERE_TRAFFIC_COLOR();
    method public int getALTERNATE_ROUTE_UNKNOWN_TRAFFIC_COLOR();
    method public Double![] getARROW_HEAD_CASING_OFFSET();
    method public Double![] getARROW_HEAD_OFFSET();
    method public int getDESTINATION_WAYPOINT_ICON();
    method public int getMANEUVER_ARROWHEAD_ICON_CASING_DRAWABLE();
    method public int getMANEUVER_ARROWHEAD_ICON_DRAWABLE();
    method public int getMANEUVER_ARROW_BORDER_COLOR();
    method public int getMANEUVER_ARROW_COLOR();
    method public int getORIGIN_WAYPOINT_ICON();
    method public int getROUTE_CASING_COLOR();
    method public int getROUTE_DEFAULT_COLOR();
    method public int getROUTE_HEAVY_TRAFFIC_COLOR();
    method public int getROUTE_LINE_TRAVELED_CASING_COLOR();
    method public int getROUTE_LINE_TRAVELED_COLOR();
    method public int getROUTE_LOW_TRAFFIC_COLOR();
    method public int getROUTE_MODERATE_TRAFFIC_COLOR();
    method public int getROUTE_SEVERE_TRAFFIC_COLOR();
    method public int getROUTE_UNKNOWN_TRAFFIC_COLOR();
    method public java.util.List<java.lang.String> getTRAFFIC_BACKFILL_ROAD_CLASSES();
    property public final int ALTERNATE_ROUTE_CASING_COLOR;
    property public final int ALTERNATE_ROUTE_DEFAULT_COLOR;
    property public final int ALTERNATE_ROUTE_HEAVY_TRAFFIC_COLOR;
    property public final int ALTERNATE_ROUTE_LOW_TRAFFIC_COLOR;
    property public final int ALTERNATE_ROUTE_MODERATE_TRAFFIC_COLOR;
    property public final int ALTERNATE_ROUTE_SEVERE_TRAFFIC_COLOR;
    property public final int ALTERNATE_ROUTE_UNKNOWN_TRAFFIC_COLOR;
    property public final Double![] ARROW_HEAD_CASING_OFFSET;
    property public final Double![] ARROW_HEAD_OFFSET;
    property public final int DESTINATION_WAYPOINT_ICON;
    property public final int MANEUVER_ARROWHEAD_ICON_CASING_DRAWABLE;
    property public final int MANEUVER_ARROWHEAD_ICON_DRAWABLE;
    property public final int MANEUVER_ARROW_BORDER_COLOR;
    property public final int MANEUVER_ARROW_COLOR;
    property public final int ORIGIN_WAYPOINT_ICON;
    property public final int ROUTE_CASING_COLOR;
    property public final int ROUTE_DEFAULT_COLOR;
    property public final int ROUTE_HEAVY_TRAFFIC_COLOR;
    property public final int ROUTE_LINE_TRAVELED_CASING_COLOR;
    property public final int ROUTE_LINE_TRAVELED_COLOR;
    property public final int ROUTE_LOW_TRAFFIC_COLOR;
    property public final int ROUTE_MODERATE_TRAFFIC_COLOR;
    property public final int ROUTE_SEVERE_TRAFFIC_COLOR;
    property public final int ROUTE_UNKNOWN_TRAFFIC_COLOR;
    property public final java.util.List<java.lang.String> TRAFFIC_BACKFILL_ROAD_CLASSES;
    field public static final String ALTERNATIVE_ROUTE1_SOURCE_ID = "mapbox-navigation-alt-route1-source";
    field public static final String ALTERNATIVE_ROUTE2_SOURCE_ID = "mapbox-navigation-alt-route2-source";
    field public static final String ARROW_BEARING = "mapbox-navigation-arrow-bearing";
    field public static final String ARROW_HEAD_ICON = "mapbox-navigation-arrow-head-icon";
    field public static final String ARROW_HEAD_ICON_CASING = "mapbox-navigation-arrow-head-icon-casing";
    field public static final String ARROW_HEAD_SOURCE_ID = "mapbox-navigation-arrow-head-source";
    field public static final double ARROW_HIDDEN_ZOOM_LEVEL = 14.0;
    field public static final String ARROW_SHAFT_SOURCE_ID = "mapbox-navigation-arrow-shaft-source";
    field public static final String DEFAULT_ROUTE_DESCRIPTOR_PLACEHOLDER = "mapboxDescriptorPlaceHolderUnused";
    field public static final double DEFAULT_ROUTE_SOURCES_TOLERANCE = 0.375;
    field public static final String DESTINATION_MARKER_NAME = "destinationMarker";
    field public static final String HEAVY_CONGESTION_VALUE = "heavy";
    field public static final com.mapbox.navigation.ui.base.internal.model.route.RouteConstants INSTANCE;
    field public static final String LOW_CONGESTION_VALUE = "low";
    field public static final double MAX_ARROW_ZOOM = 22.0;
    field public static final double MAX_DEGREES = 360.0;
    field public static final double MAX_ELAPSED_SINCE_INDEX_UPDATE_NANO = 1.5E9;
    field public static final double MAX_ZOOM_ARROW_HEAD_CASING_SCALE = 0.8;
    field public static final double MAX_ZOOM_ARROW_HEAD_SCALE = 0.8;
    field public static final double MAX_ZOOM_ARROW_SHAFT_CASING_SCALE = 17.0;
    field public static final double MAX_ZOOM_ARROW_SHAFT_SCALE = 13.0;
    field public static final double MIN_ARROW_ZOOM = 10.0;
    field public static final double MIN_ZOOM_ARROW_HEAD_CASING_SCALE = 0.2;
    field public static final double MIN_ZOOM_ARROW_HEAD_SCALE = 0.2;
    field public static final double MIN_ZOOM_ARROW_SHAFT_CASING_SCALE = 3.4;
    field public static final double MIN_ZOOM_ARROW_SHAFT_SCALE = 2.6;
    field public static final String MODERATE_CONGESTION_VALUE = "moderate";
    field public static final double OPAQUE = 0.0;
    field public static final String ORIGIN_MARKER_NAME = "originMarker";
    field public static final String PRIMARY_ROUTE_SOURCE_ID = "mapbox-navigation-route-source";
    field public static final boolean ROUNDED_LINE_CAP = true;
    field public static final double ROUTE_LINE_UPDATE_MAX_DISTANCE_THRESHOLD_IN_METERS = 1.0;
    field public static final String SEVERE_CONGESTION_VALUE = "severe";
    field public static final int THIRTY = 30; // 0x1e
    field public static final double TRANSPARENT = 1.0;
    field public static final int TWO_POINTS = 2; // 0x2
    field public static final String UNKNOWN_CONGESTION_VALUE = "unknown";
    field public static final String WAYPOINT_DESTINATION_VALUE = "destination";
    field public static final String WAYPOINT_ORIGIN_VALUE = "origin";
    field public static final String WAYPOINT_PROPERTY_KEY = "wayPoint";
    field public static final String WAYPOINT_SOURCE_ID = "mapbox-navigation-waypoint-source";
  }

}

package com.mapbox.navigation.ui.base.model {

  public abstract sealed class Expected<V, E> {
  }

  public static final class Expected.Failure<E> extends com.mapbox.navigation.ui.base.model.Expected {
    ctor public Expected.Failure(E? error);
    method public E! component1();
    method public com.mapbox.navigation.ui.base.model.Expected.Failure<E> copy(E! error);
    method public E! getError();
    property public final E! error;
  }

  public static final class Expected.Success<V> extends com.mapbox.navigation.ui.base.model.Expected {
    ctor public Expected.Success(V? value);
    method public V! component1();
    method public com.mapbox.navigation.ui.base.model.Expected.Success<V> copy(V! value);
    method public V! getValue();
    property public final V! value;
  }

}

package com.mapbox.navigation.ui.base.model.route {

  public final class RouteLayerConstants {
    field public static final String ALTERNATIVE_ROUTE1_CASING_LAYER_ID = "mapbox-navigation-alt-route1-casing-layer";
    field public static final String ALTERNATIVE_ROUTE1_LAYER_ID = "mapbox-navigation-alt-route1-layer";
    field public static final String ALTERNATIVE_ROUTE1_TRAFFIC_LAYER_ID = "mapbox-navigation-alt-route1-traffic-layer";
    field public static final String ALTERNATIVE_ROUTE2_CASING_LAYER_ID = "mapbox-navigation-alt-route2-casing-layer";
    field public static final String ALTERNATIVE_ROUTE2_LAYER_ID = "mapbox-navigation-alt-route2-layer";
    field public static final String ALTERNATIVE_ROUTE2_TRAFFIC_LAYER_ID = "mapbox-navigation-alt-route2-traffic-layer";
    field public static final String ARROW_HEAD_CASING_LAYER_ID = "mapbox-navigation-arrow-head-casing-layer";
    field public static final String ARROW_HEAD_LAYER_ID = "mapbox-navigation-arrow-head-layer";
    field public static final String ARROW_SHAFT_CASING_LINE_LAYER_ID = "mapbox-navigation-arrow-shaft-casing-layer";
    field public static final String ARROW_SHAFT_LINE_LAYER_ID = "mapbox-navigation-arrow-shaft-layer";
    field public static final com.mapbox.navigation.ui.base.model.route.RouteLayerConstants INSTANCE;
    field public static final String PRIMARY_ROUTE_CASING_LAYER_ID = "mapbox-navigation-route-casing-layer";
    field public static final String PRIMARY_ROUTE_LAYER_ID = "mapbox-navigation-route-layer";
    field public static final String PRIMARY_ROUTE_TRAFFIC_LAYER_ID = "mapbox-navigation-route-traffic-layer";
    field public static final String WAYPOINT_LAYER_ID = "mapbox-navigation-waypoint-layer";
  }

}

package com.mapbox.navigation.ui.base.model.signboard {

  public abstract sealed class SignboardState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public static final class SignboardState.Hide extends com.mapbox.navigation.ui.base.model.signboard.SignboardState {
    field public static final com.mapbox.navigation.ui.base.model.signboard.SignboardState.Hide INSTANCE;
  }

  public static final class SignboardState.Show extends com.mapbox.navigation.ui.base.model.signboard.SignboardState {
    field public static final com.mapbox.navigation.ui.base.model.signboard.SignboardState.Show INSTANCE;
  }

  public abstract static sealed class SignboardState.Signboard extends com.mapbox.navigation.ui.base.model.signboard.SignboardState {
  }

  public static final class SignboardState.Signboard.Available extends com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard {
    ctor public SignboardState.Signboard.Available(int desiredSignboardWidth, byte[] bytes);
    ctor public SignboardState.Signboard.Available(byte[] bytes);
    method public int component1();
    method public byte[] component2();
    method public com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Available copy(int desiredSignboardWidth, byte[] bytes);
    method public byte[] getBytes();
    method public int getDesiredSignboardWidth();
    property public final byte[] bytes;
    property public final int desiredSignboardWidth;
  }

  public static final class SignboardState.Signboard.Empty extends com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard {
    field public static final com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Empty INSTANCE;
  }

  public static final class SignboardState.Signboard.Error extends com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard {
    ctor public SignboardState.Signboard.Error(String? exception);
    method public String? component1();
    method public com.mapbox.navigation.ui.base.model.signboard.SignboardState.Signboard.Error copy(String? exception);
    method public String? getException();
    property public final String? exception;
  }

}

package com.mapbox.navigation.ui.base.model.snapshotter {

  public abstract sealed class SnapshotState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public abstract static sealed class SnapshotState.SnapshotFailure extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState {
  }

  public static final class SnapshotState.SnapshotFailure.SnapshotEmpty extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure {
    ctor public SnapshotState.SnapshotFailure.SnapshotEmpty(String? exception);
    method public String? component1();
    method public com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure.SnapshotEmpty copy(String? exception);
    method public String? getException();
    property public final String? exception;
  }

  public static final class SnapshotState.SnapshotFailure.SnapshotError extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure {
    ctor public SnapshotState.SnapshotFailure.SnapshotError(String? exception);
    method public String? component1();
    method public com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure.SnapshotError copy(String? exception);
    method public String? getException();
    property public final String? exception;
  }

  public static final class SnapshotState.SnapshotFailure.SnapshotUnavailable extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure {
    field public static final com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure.SnapshotUnavailable INSTANCE;
  }

  public static final class SnapshotState.SnapshotReady extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState {
    ctor public SnapshotState.SnapshotReady(android.graphics.Bitmap bitmap);
    method public android.graphics.Bitmap component1();
    method public com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotReady copy(android.graphics.Bitmap bitmap);
    method public android.graphics.Bitmap getBitmap();
    property public final android.graphics.Bitmap bitmap;
  }

}

package com.mapbox.navigation.ui.base.model.tripprogress {

  public final class DistanceRemainingFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<java.lang.Double,android.text.SpannableString> {
    ctor public DistanceRemainingFormatter(com.mapbox.navigation.base.formatter.DistanceFormatterOptions distanceFormatterOptions);
    method public android.text.SpannableString format(double value);
  }

  public final class EstimatedTimeToArrivalFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<java.lang.Long,android.text.SpannableString> {
    ctor public EstimatedTimeToArrivalFormatter(android.content.Context context, @com.mapbox.navigation.base.TimeFormat.Type int timeFormatType = -1);
    method public android.text.SpannableString format(long eta);
  }

  public final class PercentDistanceTraveledFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<java.lang.Double,android.text.SpannableString> {
    ctor public PercentDistanceTraveledFormatter();
    method public android.text.SpannableString format(double value);
  }

  public class TimeRemainingFormatter implements com.mapbox.navigation.ui.base.formatter.ValueFormatter<java.lang.Double,android.text.SpannableString> {
    ctor public TimeRemainingFormatter(android.content.Context context, java.util.Locale? locale = null);
    method public android.text.SpannableString format(double value);
    method public final java.util.Locale? getLocale();
    method public final void setLocale(java.util.Locale? p);
    property public final java.util.Locale? locale;
  }

  public final class TripProgressUpdateFormatter {
    method public android.text.SpannableString getDistanceRemaining(double value);
    method public android.text.SpannableString getEstimatedTimeToArrival(long value);
    method public android.text.SpannableString getPercentRouteTraveled(double value);
    method public android.text.SpannableString getTimeRemaining(double value);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder toBuilder(android.content.Context context);
  }

  public static final class TripProgressUpdateFormatter.Builder {
    ctor public TripProgressUpdateFormatter.Builder(android.content.Context context);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter build();
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder distanceRemainingFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super java.lang.Double,? extends android.text.SpannableString> formatter);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder estimatedTimeToArrivalFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super java.lang.Long,? extends android.text.SpannableString> formatter);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder percentRouteTraveledFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super java.lang.Double,? extends android.text.SpannableString> formatter);
    method public com.mapbox.navigation.ui.base.model.tripprogress.TripProgressUpdateFormatter.Builder timeRemainingFormatter(com.mapbox.navigation.ui.base.formatter.ValueFormatter<? super java.lang.Double,? extends android.text.SpannableString> formatter);
  }

}

package com.mapbox.navigation.ui.base.model.voice {

  public final class Announcement {
    ctor public Announcement(String announcement, String? ssmlAnnouncement, java.io.File? file);
    method public String component1();
    method public String? component2();
    method public java.io.File? component3();
    method public com.mapbox.navigation.ui.base.model.voice.Announcement copy(String announcement, String? ssmlAnnouncement, java.io.File? file);
    method public String getAnnouncement();
    method public java.io.File? getFile();
    method public String? getSsmlAnnouncement();
    property public final String announcement;
    property public final java.io.File? file;
    property public final String? ssmlAnnouncement;
  }

  public abstract sealed class SpeechState {
  }

  public static final class SpeechState.DonePlaying extends com.mapbox.navigation.ui.base.model.voice.SpeechState {
    ctor public SpeechState.DonePlaying(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.DonePlaying copy(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement getAnnouncement();
    property public final com.mapbox.navigation.ui.base.model.voice.Announcement announcement;
  }

  public static final class SpeechState.ReadyToPlay extends com.mapbox.navigation.ui.base.model.voice.SpeechState {
    ctor public SpeechState.ReadyToPlay(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.ReadyToPlay copy(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement getAnnouncement();
    property public final com.mapbox.navigation.ui.base.model.voice.Announcement announcement;
  }

  public abstract static sealed class SpeechState.Speech extends com.mapbox.navigation.ui.base.model.voice.SpeechState {
  }

  public static final class SpeechState.Speech.Available extends com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech {
    ctor public SpeechState.Speech.Available(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech.Available copy(com.mapbox.navigation.ui.base.model.voice.Announcement announcement);
    method public com.mapbox.navigation.ui.base.model.voice.Announcement getAnnouncement();
    property public final com.mapbox.navigation.ui.base.model.voice.Announcement announcement;
  }

  public static final class SpeechState.Speech.Error extends com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech {
    ctor public SpeechState.Speech.Error(String exception);
    method public String component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.Speech.Error copy(String exception);
    method public String getException();
    property public final String exception;
  }

  public static final class SpeechState.Volume extends com.mapbox.navigation.ui.base.model.voice.SpeechState {
    ctor public SpeechState.Volume(@FloatRange(from=0.0, to=1.0) float level);
    method public float component1();
    method public com.mapbox.navigation.ui.base.model.voice.SpeechState.Volume copy(float level);
    method public float getLevel();
    property public final float level;
  }

}

package com.mapbox.navigation.ui.base.util {

  @java.lang.FunctionalInterface public interface MapboxNavigationConsumer<T> {
    method public default void accept(T? t);
  }

}

