// Signature format: 3.0
package com.mapbox.navigation.base {

  public final class TimeFormat {
    field public static final com.mapbox.navigation.base.TimeFormat! INSTANCE;
    field public static final int NONE_SPECIFIED = -1; // 0xffffffff
    field public static final int TWELVE_HOURS = 0; // 0x0
    field public static final int TWENTY_FOUR_HOURS = 1; // 0x1
  }

  @IntDef({com.mapbox.navigation.base.TimeFormat.NONE_SPECIFIED, com.mapbox.navigation.base.TimeFormat.TWELVE_HOURS, com.mapbox.navigation.base.TimeFormat.TWENTY_FOUR_HOURS}) @kotlin.annotation.Retention(AnnotationRetention.SOURCE) public static @interface TimeFormat.Type {
  }

}

package com.mapbox.navigation.base.formatter {

  public interface DistanceFormatter {
    method public android.text.SpannableString formatDistance(double distance);
  }

}

package com.mapbox.navigation.base.metrics {

  public final class DirectionsMetrics {
    field public static final com.mapbox.navigation.base.metrics.DirectionsMetrics! INSTANCE;
    field public static final String ROUTE_RETRIEVAL = "route_retrieval_event";
  }

  public interface MetricEvent {
    method public String getMetricName();
    method public String toJson(com.google.gson.Gson gson);
    property public abstract String metricName;
  }

  @StringDef({com.mapbox.navigation.base.metrics.DirectionsMetrics.ROUTE_RETRIEVAL, com.mapbox.navigation.base.metrics.NavigationMetrics.ARRIVE, com.mapbox.navigation.base.metrics.NavigationMetrics.CANCEL_SESSION, com.mapbox.navigation.base.metrics.NavigationMetrics.DEPART, com.mapbox.navigation.base.metrics.NavigationMetrics.REROUTE, com.mapbox.navigation.base.metrics.NavigationMetrics.FEEDBACK, com.mapbox.navigation.base.metrics.NavigationMetrics.INITIAL_GPS, com.mapbox.navigation.base.metrics.NavigationMetrics.FASTER_ROUTE, com.mapbox.navigation.base.metrics.NavigationMetrics.APP_USER_TURNSTILE}) public static @interface MetricEvent.Metric {
  }

  public interface MetricsObserver {
    method public void onMetricUpdated(@com.mapbox.navigation.base.metrics.MetricEvent.Metric String metricName, String jsonStringData);
  }

  public interface MetricsReporter {
    method public void addEvent(com.mapbox.navigation.base.metrics.MetricEvent metricEvent);
    method public void removeObserver();
    method public void setMetricsObserver(com.mapbox.navigation.base.metrics.MetricsObserver metricsObserver);
  }

  public final class NavigationMetrics {
    field public static final String APP_USER_TURNSTILE = "appUserTurnstile";
    field public static final String ARRIVE = "navigation.arrive";
    field public static final String CANCEL_SESSION = "navigation.cancel";
    field public static final String DEPART = "navigation.depart";
    field public static final String FASTER_ROUTE = "navigation.fasterRoute";
    field public static final String FEEDBACK = "navigation.feedback";
    field public static final String INITIAL_GPS = "initial_gps_event";
    field public static final com.mapbox.navigation.base.metrics.NavigationMetrics! INSTANCE;
    field public static final String REROUTE = "navigation.reroute";
  }

}

package com.mapbox.navigation.base.options {

  public final class DeviceProfile {
    method public String getCustomConfig();
    method public com.mapbox.navigation.base.options.DeviceType getDeviceType();
  }

  public static final class DeviceProfile.Builder {
    ctor public DeviceProfile.Builder();
    method public com.mapbox.navigation.base.options.DeviceProfile build();
    method public com.mapbox.navigation.base.options.DeviceProfile.Builder customConfig(String customConfig);
    method public com.mapbox.navigation.base.options.DeviceProfile.Builder deviceType(com.mapbox.navigation.base.options.DeviceType deviceType);
  }

  public enum DeviceType {
    enum_constant public static final com.mapbox.navigation.base.options.DeviceType AUTOMOBILE;
    enum_constant public static final com.mapbox.navigation.base.options.DeviceType HANDHELD;
  }

  public final class NavigationOptions {
    method public String? getAccessToken();
    method public android.content.Context getApplicationContext();
    method public com.mapbox.navigation.base.options.DeviceProfile getDeviceProfile();
    method public com.mapbox.navigation.base.formatter.DistanceFormatter? getDistanceFormatter();
    method public com.mapbox.android.core.location.LocationEngine getLocationEngine();
    method public long getNavigatorPredictionMillis();
    method public com.mapbox.navigation.base.options.OnboardRouterOptions getOnboardRouterOptions();
    method public int getTimeFormatType();
    method public boolean isDebugLoggingEnabled();
    method public boolean isFromNavigationUi();
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder toBuilder();
  }

  public static final class NavigationOptions.Builder {
    ctor public NavigationOptions.Builder(android.content.Context context);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder accessToken(String? accessToken);
    method public com.mapbox.navigation.base.options.NavigationOptions build();
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder deviceProfile(com.mapbox.navigation.base.options.DeviceProfile deviceProfile);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder distanceFormatter(com.mapbox.navigation.base.formatter.DistanceFormatter? distanceFormatter);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder isDebugLoggingEnabled(boolean flag);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder isFromNavigationUi(boolean flag);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder locationEngine(com.mapbox.android.core.location.LocationEngine locationEngine);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder navigatorPredictionMillis(long predictionMillis);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder onboardRouterOptions(com.mapbox.navigation.base.options.OnboardRouterOptions onboardRouterOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder timeFormatType(int type);
  }

  public final class NavigationOptionsKt {
    field public static final long DEFAULT_NAVIGATOR_PREDICTION_MILLIS = 1100L; // 0x44cL
  }

  public final class OnboardRouterOptions {
    method public String? getFilePath();
    method public java.net.URI getTilesUri();
    method public String getTilesVersion();
    method public com.mapbox.navigation.base.options.OnboardRouterOptions.Builder toBuilder();
  }

  public static final class OnboardRouterOptions.Builder {
    ctor public OnboardRouterOptions.Builder();
    method public com.mapbox.navigation.base.options.OnboardRouterOptions build();
    method public com.mapbox.navigation.base.options.OnboardRouterOptions.Builder filePath(String? filePath);
    method public com.mapbox.navigation.base.options.OnboardRouterOptions.Builder tilesUri(String tilesUri);
    method public com.mapbox.navigation.base.options.OnboardRouterOptions.Builder tilesUri(java.net.URI tilesUri);
    method public com.mapbox.navigation.base.options.OnboardRouterOptions.Builder tilesVersion(String version);
  }

}

package com.mapbox.navigation.base.route {

  public interface RouteRefreshCallback {
    method public void onError(com.mapbox.navigation.base.route.RouteRefreshError error);
    method public void onRefresh(com.mapbox.api.directions.v5.models.DirectionsRoute directionsRoute);
  }

  public final class RouteRefreshError {
    ctor public RouteRefreshError(String? message, Throwable? throwable);
    ctor public RouteRefreshError();
    method public String? component1();
    method public Throwable? component2();
    method public com.mapbox.navigation.base.route.RouteRefreshError copy(String? message, Throwable? throwable);
    method public String? getMessage();
    method public Throwable? getThrowable();
  }

  public interface Router {
    method public void cancel();
    method public void getRoute(com.mapbox.api.directions.v5.models.RouteOptions routeOptions, com.mapbox.navigation.base.route.Router.Callback callback);
    method public void getRouteRefresh(com.mapbox.api.directions.v5.models.DirectionsRoute route, int legIndex, com.mapbox.navigation.base.route.RouteRefreshCallback callback);
    method public void shutdown();
  }

  public static interface Router.Callback {
    method public void onCanceled();
    method public void onFailure(Throwable throwable);
    method public void onResponse(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
  }

}

package com.mapbox.navigation.base.trip.model {

  public final class RouteLegProgress {
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress? getCurrentStepProgress();
    method public float getDistanceRemaining();
    method public float getDistanceTraveled();
    method public double getDurationRemaining();
    method public float getFractionTraveled();
    method public int getLegIndex();
    method public com.mapbox.api.directions.v5.models.RouteLeg? getRouteLeg();
    method public com.mapbox.api.directions.v5.models.LegStep? getUpcomingStep();
  }

  public static final class RouteLegProgress.Builder {
    ctor public RouteLegProgress.Builder();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress build();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder currentStepProgress(com.mapbox.navigation.base.trip.model.RouteStepProgress currentStepProgress);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder distanceRemaining(float distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder distanceTraveled(float distanceTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder durationRemaining(double durationRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder fractionTraveled(float fractionTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder legIndex(int legIndex);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder routeLeg(com.mapbox.api.directions.v5.models.RouteLeg routeLeg);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder upcomingStep(com.mapbox.api.directions.v5.models.LegStep upcomingStep);
  }

  public final class RouteProgress {
    method public com.mapbox.api.directions.v5.models.BannerInstructions? getBannerInstructions();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress? getCurrentLegProgress();
    method public com.mapbox.navigation.base.trip.model.RouteProgressState getCurrentState();
    method public float getDistanceRemaining();
    method public float getDistanceTraveled();
    method public double getDurationRemaining();
    method public float getFractionTraveled();
    method public boolean getInTunnel();
    method public int getRemainingWaypoints();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute getRoute();
    method public com.mapbox.geojson.Geometry? getRouteGeometryWithBuffer();
    method public java.util.List<com.mapbox.geojson.Point>? getUpcomingStepPoints();
    method public com.mapbox.api.directions.v5.models.VoiceInstructions? getVoiceInstructions();
  }

  public static final class RouteProgress.Builder {
    ctor public RouteProgress.Builder();
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder bannerInstructions(com.mapbox.api.directions.v5.models.BannerInstructions? bannerInstructions);
    method public com.mapbox.navigation.base.trip.model.RouteProgress build();
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder currentLegProgress(com.mapbox.navigation.base.trip.model.RouteLegProgress legProgress);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder currentState(com.mapbox.navigation.base.trip.model.RouteProgressState currentState);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder distanceRemaining(float distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder distanceTraveled(float distanceTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder durationRemaining(double durationRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder fractionTraveled(float fractionTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder inTunnel(boolean inTunnel);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder remainingWaypoints(int remainingWaypoints);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder route(com.mapbox.api.directions.v5.models.DirectionsRoute route);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder routeGeometryWithBuffer(com.mapbox.geojson.Geometry? routeGeometryWithBuffer);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder upcomingStepPoints(java.util.List<com.mapbox.geojson.Point>? upcomingStepPoints);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder voiceInstructions(com.mapbox.api.directions.v5.models.VoiceInstructions? voiceInstructions);
  }

  public enum RouteProgressState {
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState LOCATION_STALE;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState LOCATION_TRACKING;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState OFF_ROUTE;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState ROUTE_COMPLETE;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState ROUTE_INITIALIZED;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState ROUTE_INVALID;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState ROUTE_UNCERTAIN;
  }

  public final class RouteStepProgress {
    method public float getDistanceRemaining();
    method public float getDistanceTraveled();
    method public double getDurationRemaining();
    method public float getFractionTraveled();
    method public com.mapbox.api.directions.v5.models.LegStep? getStep();
    method public int getStepIndex();
    method public java.util.List<com.mapbox.geojson.Point>? getStepPoints();
  }

  public static final class RouteStepProgress.Builder {
    ctor public RouteStepProgress.Builder();
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress build();
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder distanceRemaining(float distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder distanceTraveled(float distanceTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder durationRemaining(double durationRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder fractionTraveled(float fractionTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder step(com.mapbox.api.directions.v5.models.LegStep step);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder stepIndex(int stepIndex);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder stepPoints(java.util.List<com.mapbox.geojson.Point> stepPoints);
  }

}

package com.mapbox.navigation.base.trip.notification {

  public enum NotificationAction {
    enum_constant public static final com.mapbox.navigation.base.trip.notification.NotificationAction END_NAVIGATION;
  }

  public interface TripNotification {
    method public android.app.Notification getNotification();
    method public int getNotificationId();
    method public void onTripSessionStarted();
    method public void onTripSessionStopped();
    method public void updateNotification(com.mapbox.navigation.base.trip.model.RouteProgress? routeProgress);
  }

}

package com.mapbox.navigation.base.utils {

  public final class NullUtilsKt {
  }

}

