// Signature format: 3.0
package com.mapbox.navigation.base {

  @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget, kotlin.annotation.AnnotationTarget, kotlin.annotation.AnnotationTarget}) public @interface ExperimentalMapboxNavigationAPI {
  }

  public final class TimeFormat {
    field public static final com.mapbox.navigation.base.TimeFormat INSTANCE;
    field public static final int NONE_SPECIFIED = -1; // 0xffffffff
    field public static final int TWELVE_HOURS = 0; // 0x0
    field public static final int TWENTY_FOUR_HOURS = 1; // 0x1
  }

  @IntDef({com.mapbox.navigation.base.TimeFormat.NONE_SPECIFIED, com.mapbox.navigation.base.TimeFormat.TWELVE_HOURS, com.mapbox.navigation.base.TimeFormat.TWENTY_FOUR_HOURS}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface TimeFormat.Type {
  }

}

package com.mapbox.navigation.base.extensions {

  public final class RouteOptionsExtensions {
    method public static com.mapbox.api.directions.v5.models.RouteOptions.Builder applyDefaultNavigationOptions(com.mapbox.api.directions.v5.models.RouteOptions.Builder);
    method public static com.mapbox.api.directions.v5.models.RouteOptions.Builder applyLanguageAndVoiceUnitOptions(com.mapbox.api.directions.v5.models.RouteOptions.Builder, android.content.Context context);
    method public static com.mapbox.api.directions.v5.models.RouteOptions.Builder coordinates(com.mapbox.api.directions.v5.models.RouteOptions.Builder, com.mapbox.geojson.Point origin, java.util.List<com.mapbox.geojson.Point>? waypoints = null, com.mapbox.geojson.Point destination);
    method public static com.mapbox.api.directions.v5.models.RouteOptions.Builder coordinates(com.mapbox.api.directions.v5.models.RouteOptions.Builder, com.mapbox.geojson.Point origin, com.mapbox.geojson.Point destination);
    method public static boolean supportsRouteRefresh(com.mapbox.api.directions.v5.models.RouteOptions?);
  }

}

package com.mapbox.navigation.base.formatter {

  public fun interface DistanceFormatter {
    method public android.text.SpannableString formatDistance(double distance);
  }

  public final class DistanceFormatterOptions {
    method public android.content.Context getApplicationContext();
    method public java.util.Locale getLocale();
    method public int getRoundingIncrement();
    method public com.mapbox.navigation.base.formatter.UnitType getUnitType();
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions.Builder toBuilder();
    property public final android.content.Context applicationContext;
    property public final java.util.Locale locale;
    property public final int roundingIncrement;
    property public final com.mapbox.navigation.base.formatter.UnitType unitType;
  }

  public static final class DistanceFormatterOptions.Builder {
    ctor public DistanceFormatterOptions.Builder(android.content.Context applicationContext);
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions build();
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions.Builder locale(java.util.Locale locale);
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions.Builder roundingIncrement(@com.mapbox.navigation.base.formatter.Rounding.Increment int roundingIncrement);
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions.Builder unitType(com.mapbox.navigation.base.formatter.UnitType? unitType);
  }

  public final class Rounding {
    field public static final int INCREMENT_FIFTY = 50; // 0x32
    field public static final int INCREMENT_FIVE = 5; // 0x5
    field public static final int INCREMENT_ONE_HUNDRED = 100; // 0x64
    field public static final int INCREMENT_TEN = 10; // 0xa
    field public static final int INCREMENT_TWENTY_FIVE = 25; // 0x19
    field public static final com.mapbox.navigation.base.formatter.Rounding INSTANCE;
  }

  @IntDef({com.mapbox.navigation.base.formatter.Rounding.INCREMENT_FIVE, com.mapbox.navigation.base.formatter.Rounding.INCREMENT_TEN, com.mapbox.navigation.base.formatter.Rounding.INCREMENT_TWENTY_FIVE, com.mapbox.navigation.base.formatter.Rounding.INCREMENT_FIFTY, com.mapbox.navigation.base.formatter.Rounding.INCREMENT_ONE_HUNDRED}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface Rounding.Increment {
  }

  public enum UnitType {
    method public final String getValue();
    property public final String value;
    enum_constant public static final com.mapbox.navigation.base.formatter.UnitType IMPERIAL;
    enum_constant public static final com.mapbox.navigation.base.formatter.UnitType METRIC;
  }

}

package com.mapbox.navigation.base.metrics {

  public final class DirectionsMetrics {
    field public static final com.mapbox.navigation.base.metrics.DirectionsMetrics INSTANCE;
    field public static final String ROUTE_RETRIEVAL = "route_retrieval_event";
  }

  public interface MetricEvent {
    method public String getMetricName();
    method public String toJson(com.google.gson.Gson gson);
    property public abstract String metricName;
  }

  @StringDef({com.mapbox.navigation.base.metrics.DirectionsMetrics.ROUTE_RETRIEVAL, com.mapbox.navigation.base.metrics.NavigationMetrics.ARRIVE, com.mapbox.navigation.base.metrics.NavigationMetrics.CANCEL_SESSION, com.mapbox.navigation.base.metrics.NavigationMetrics.DEPART, com.mapbox.navigation.base.metrics.NavigationMetrics.REROUTE, com.mapbox.navigation.base.metrics.NavigationMetrics.FEEDBACK, com.mapbox.navigation.base.metrics.NavigationMetrics.INITIAL_GPS, com.mapbox.navigation.base.metrics.NavigationMetrics.FASTER_ROUTE, com.mapbox.navigation.base.metrics.NavigationMetrics.APP_USER_TURNSTILE, com.mapbox.navigation.base.metrics.NavigationMetrics.FREE_DRIVE}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface MetricEvent.Metric {
  }

  public fun interface MetricsObserver {
    method public void onMetricUpdated(@com.mapbox.navigation.base.metrics.MetricEvent.Metric String metricName, String jsonStringData);
  }

  public interface MetricsReporter {
    method public void addEvent(com.mapbox.navigation.base.metrics.MetricEvent metricEvent);
    method public void removeObserver();
    method public void setMetricsObserver(com.mapbox.navigation.base.metrics.MetricsObserver metricsObserver);
  }

  public final class NavigationMetrics {
    field public static final String APP_USER_TURNSTILE = "appUserTurnstile";
    field public static final String ARRIVE = "navigation.arrive";
    field public static final String CANCEL_SESSION = "navigation.cancel";
    field public static final String DEPART = "navigation.depart";
    field public static final String FASTER_ROUTE = "navigation.fasterRoute";
    field public static final String FEEDBACK = "navigation.feedback";
    field public static final String FREE_DRIVE = "navigation.freeDrive";
    field public static final String INITIAL_GPS = "initial_gps_event";
    field public static final com.mapbox.navigation.base.metrics.NavigationMetrics INSTANCE;
    field public static final String REROUTE = "navigation.reroute";
  }

}

package com.mapbox.navigation.base.options {

  public final class DeviceProfile {
    method public String getCustomConfig();
    method public com.mapbox.navigation.base.options.DeviceType getDeviceType();
    method public com.mapbox.navigation.base.options.DeviceProfile.Builder toBuilder();
    property public final String customConfig;
    property public final com.mapbox.navigation.base.options.DeviceType deviceType;
  }

  public static final class DeviceProfile.Builder {
    ctor public DeviceProfile.Builder();
    method public com.mapbox.navigation.base.options.DeviceProfile build();
    method public com.mapbox.navigation.base.options.DeviceProfile.Builder customConfig(String customConfig);
    method public com.mapbox.navigation.base.options.DeviceProfile.Builder deviceType(com.mapbox.navigation.base.options.DeviceType deviceType);
  }

  public enum DeviceType {
    enum_constant public static final com.mapbox.navigation.base.options.DeviceType AUTOMOBILE;
    enum_constant public static final com.mapbox.navigation.base.options.DeviceType HANDHELD;
  }

  public final class EHorizonOptions {
    method public double getBranchLength();
    method public int getExpansion();
    method public double getLength();
    method public Double? getMinTimeDeltaBetweenUpdates();
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder toBuilder();
    property public final double branchLength;
    property public final int expansion;
    property public final double length;
    property public final Double? minTimeDeltaBetweenUpdates;
  }

  public static final class EHorizonOptions.Builder {
    ctor public EHorizonOptions.Builder();
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder branchLength(double branchLength);
    method public com.mapbox.navigation.base.options.EHorizonOptions build();
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder expansion(int expansion);
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder length(double length);
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder minTimeDeltaBetweenUpdates(Double? minTimeDeltaBetweenUpdates);
  }

  public final class HistoryRecorderOptions {
    method public boolean getEnabled();
    method public String? getFileDirectory();
    method public com.mapbox.navigation.base.options.HistoryRecorderOptions.Builder toBuilder();
    property public final boolean enabled;
    property public final String? fileDirectory;
  }

  public static final class HistoryRecorderOptions.Builder {
    ctor public HistoryRecorderOptions.Builder();
    method public com.mapbox.navigation.base.options.HistoryRecorderOptions build();
    method public com.mapbox.navigation.base.options.HistoryRecorderOptions.Builder enabled(boolean enabled);
    method public com.mapbox.navigation.base.options.HistoryRecorderOptions.Builder fileDirectory(String? filePath);
  }

  public final class IncidentsOptions {
    method public String getApiUrl();
    method public String getGraph();
    method public com.mapbox.navigation.base.options.IncidentsOptions.Builder toBuilder();
    property public final String apiUrl;
    property public final String graph;
  }

  public static final class IncidentsOptions.Builder {
    ctor public IncidentsOptions.Builder();
    method public com.mapbox.navigation.base.options.IncidentsOptions.Builder apiUrl(String apiUrl);
    method public com.mapbox.navigation.base.options.IncidentsOptions build();
    method public com.mapbox.navigation.base.options.IncidentsOptions.Builder graph(String graph);
  }

  public final class NavigationOptions {
    method public String? getAccessToken();
    method public android.content.Context getApplicationContext();
    method public com.mapbox.navigation.base.options.DeviceProfile getDeviceProfile();
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions getDistanceFormatterOptions();
    method public com.mapbox.navigation.base.options.EHorizonOptions getEHorizonOptions();
    method public com.mapbox.navigation.base.options.HistoryRecorderOptions getHistoryRecorderOptions();
    method public com.mapbox.navigation.base.options.IncidentsOptions getIncidentsOptions();
    method public com.mapbox.android.core.location.LocationEngine getLocationEngine();
    method public com.mapbox.android.core.location.LocationEngineRequest getLocationEngineRequest();
    method public long getNavigatorPredictionMillis();
    method public com.mapbox.navigation.base.route.RouteAlternativesOptions getRouteAlternativesOptions();
    method public com.mapbox.navigation.base.route.RouteRefreshOptions getRouteRefreshOptions();
    method public com.mapbox.navigation.base.options.RoutingTilesOptions getRoutingTilesOptions();
    method public int getTimeFormatType();
    method public boolean isDebugLoggingEnabled();
    method public boolean isFromNavigationUi();
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder toBuilder();
    property public final String? accessToken;
    property public final android.content.Context applicationContext;
    property public final com.mapbox.navigation.base.options.DeviceProfile deviceProfile;
    property public final com.mapbox.navigation.base.formatter.DistanceFormatterOptions distanceFormatterOptions;
    property public final com.mapbox.navigation.base.options.EHorizonOptions eHorizonOptions;
    property public final com.mapbox.navigation.base.options.HistoryRecorderOptions historyRecorderOptions;
    property public final com.mapbox.navigation.base.options.IncidentsOptions incidentsOptions;
    property public final boolean isDebugLoggingEnabled;
    property public final boolean isFromNavigationUi;
    property public final com.mapbox.android.core.location.LocationEngine locationEngine;
    property public final com.mapbox.android.core.location.LocationEngineRequest locationEngineRequest;
    property public final long navigatorPredictionMillis;
    property public final com.mapbox.navigation.base.route.RouteAlternativesOptions routeAlternativesOptions;
    property public final com.mapbox.navigation.base.route.RouteRefreshOptions routeRefreshOptions;
    property public final com.mapbox.navigation.base.options.RoutingTilesOptions routingTilesOptions;
    property public final int timeFormatType;
  }

  public static final class NavigationOptions.Builder {
    ctor public NavigationOptions.Builder(android.content.Context applicationContext);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder accessToken(String? accessToken);
    method public com.mapbox.navigation.base.options.NavigationOptions build();
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder deviceProfile(com.mapbox.navigation.base.options.DeviceProfile deviceProfile);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder distanceFormatterOptions(com.mapbox.navigation.base.formatter.DistanceFormatterOptions distanceFormatterOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder eHorizonOptions(com.mapbox.navigation.base.options.EHorizonOptions eHorizonOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder historyRecorderOptions(com.mapbox.navigation.base.options.HistoryRecorderOptions historyRecorderOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder incidentsOptions(com.mapbox.navigation.base.options.IncidentsOptions incidentsOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder isDebugLoggingEnabled(boolean flag);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder isFromNavigationUi(boolean flag);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder locationEngine(com.mapbox.android.core.location.LocationEngine locationEngine);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder locationEngineRequest(com.mapbox.android.core.location.LocationEngineRequest locationEngineRequest);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder navigatorPredictionMillis(long predictionMillis);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder routeAlternativesOptions(com.mapbox.navigation.base.route.RouteAlternativesOptions routeAlternativesOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder routeRefreshOptions(com.mapbox.navigation.base.route.RouteRefreshOptions routeRefreshOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder routingTilesOptions(com.mapbox.navigation.base.options.RoutingTilesOptions routingTilesOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder timeFormatType(int type);
  }

  public final class NavigationOptionsKt {
    field public static final long DEFAULT_NAVIGATOR_PREDICTION_MILLIS = 1000L; // 0x3e8L
  }

  public final class PredictiveCacheLocationOptions {
    method public int getCurrentLocationRadiusInMeters();
    method public int getDestinationLocationRadiusInMeters();
    method public int getRouteBufferRadiusInMeters();
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions.Builder toBuilder();
    property public final int currentLocationRadiusInMeters;
    property public final int destinationLocationRadiusInMeters;
    property public final int routeBufferRadiusInMeters;
  }

  public static final class PredictiveCacheLocationOptions.Builder {
    ctor public PredictiveCacheLocationOptions.Builder();
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions build();
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions.Builder currentLocationRadiusInMeters(int radiusInMeters);
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions.Builder destinationLocationRadiusInMeters(int radiusInMeters);
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions.Builder routeBufferRadiusInMeters(int radiusInMeters);
  }

  public final class RoutingTilesOptions {
    method public String? getFilePath();
    method public int getMinDaysBetweenServerAndLocalTilesVersion();
    method public com.mapbox.common.TileStore? getTileStore();
    method public java.net.URI getTilesBaseUri();
    method public String getTilesDataset();
    method public String getTilesProfile();
    method public String getTilesVersion();
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder toBuilder();
    property public final String? filePath;
    property public final int minDaysBetweenServerAndLocalTilesVersion;
    property public final com.mapbox.common.TileStore? tileStore;
    property public final java.net.URI tilesBaseUri;
    property public final String tilesDataset;
    property public final String tilesProfile;
    property public final String tilesVersion;
  }

  public static final class RoutingTilesOptions.Builder {
    ctor public RoutingTilesOptions.Builder();
    method public com.mapbox.navigation.base.options.RoutingTilesOptions build();
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder filePath(String? filePath);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder minDaysBetweenServerAndLocalTilesVersion(int minDaysBetweenServerAndLocalTilesVersion);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder tileStore(com.mapbox.common.TileStore? tileStore);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder tilesBaseUri(java.net.URI tilesBaseUri);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder tilesDataset(String tilesDataset);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder tilesProfile(String tilesProfile);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder tilesVersion(String version);
  }

}

package com.mapbox.navigation.base.route {

  public final class ExclusionViolation {
    ctor public ExclusionViolation(String type, com.mapbox.api.directions.v5.models.DirectionsRoute route, int legIndex, com.mapbox.api.directions.v5.models.RouteLeg leg, int stepIndex, com.mapbox.api.directions.v5.models.LegStep step, int intersectionIndex, com.mapbox.api.directions.v5.models.StepIntersection intersection);
    method public String component1();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute component2();
    method public int component3();
    method public com.mapbox.api.directions.v5.models.RouteLeg component4();
    method public int component5();
    method public com.mapbox.api.directions.v5.models.LegStep component6();
    method public int component7();
    method public com.mapbox.api.directions.v5.models.StepIntersection component8();
    method public com.mapbox.navigation.base.route.ExclusionViolation copy(String type, com.mapbox.api.directions.v5.models.DirectionsRoute route, int legIndex, com.mapbox.api.directions.v5.models.RouteLeg leg, int stepIndex, com.mapbox.api.directions.v5.models.LegStep step, int intersectionIndex, com.mapbox.api.directions.v5.models.StepIntersection intersection);
    method public com.mapbox.api.directions.v5.models.StepIntersection getIntersection();
    method public int getIntersectionIndex();
    method public com.mapbox.api.directions.v5.models.RouteLeg getLeg();
    method public int getLegIndex();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute getRoute();
    method public com.mapbox.api.directions.v5.models.LegStep getStep();
    method public int getStepIndex();
    method public String getType();
    property public final com.mapbox.api.directions.v5.models.StepIntersection intersection;
    property public final int intersectionIndex;
    property public final com.mapbox.api.directions.v5.models.RouteLeg leg;
    property public final int legIndex;
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute route;
    property public final com.mapbox.api.directions.v5.models.LegStep step;
    property public final int stepIndex;
    property public final String type;
  }

  public final class RouteAlternativesOptions {
    method public long getIntervalMillis();
    method public com.mapbox.navigation.base.route.RouteAlternativesOptions.Builder toBuilder();
    property public final long intervalMillis;
  }

  public static final class RouteAlternativesOptions.Builder {
    ctor public RouteAlternativesOptions.Builder();
    method public com.mapbox.navigation.base.route.RouteAlternativesOptions build();
    method public com.mapbox.navigation.base.route.RouteAlternativesOptions.Builder intervalMillis(long intervalMillis);
  }

  public final class RouteExclusions {
    method public static com.mapbox.api.directions.v5.models.RouteOptions.Builder exclude(com.mapbox.api.directions.v5.models.RouteOptions.Builder, java.lang.String... exclusionCriteria);
    method public static java.util.List<com.mapbox.navigation.base.route.ExclusionViolation> exclusionViolations(com.mapbox.api.directions.v5.models.DirectionsRoute);
  }

  public interface RouteRefreshCallback {
    method public void onError(com.mapbox.navigation.base.route.RouteRefreshError error);
    method public void onRefresh(com.mapbox.api.directions.v5.models.DirectionsRoute directionsRoute);
  }

  public final class RouteRefreshError {
    ctor public RouteRefreshError(String? message = null, Throwable? throwable = null);
    method public String? component1();
    method public Throwable? component2();
    method public com.mapbox.navigation.base.route.RouteRefreshError copy(String? message, Throwable? throwable);
    method public String? getMessage();
    method public Throwable? getThrowable();
    property public final String? message;
    property public final Throwable? throwable;
  }

  public final class RouteRefreshOptions {
    method public boolean getEnabled();
    method public long getIntervalMillis();
    method public com.mapbox.navigation.base.route.RouteRefreshOptions.Builder toBuilder();
    property public final boolean enabled;
    property public final long intervalMillis;
  }

  public static final class RouteRefreshOptions.Builder {
    ctor public RouteRefreshOptions.Builder();
    method public com.mapbox.navigation.base.route.RouteRefreshOptions build();
    method public com.mapbox.navigation.base.route.RouteRefreshOptions.Builder enabled(boolean enabled);
    method public com.mapbox.navigation.base.route.RouteRefreshOptions.Builder intervalMillis(long intervalMillis);
  }

  public interface Router {
    method public void cancelAll();
    method public void cancelRouteRefreshRequest(long requestId);
    method public void cancelRouteRequest(long requestId);
    method public long getRoute(com.mapbox.api.directions.v5.models.RouteOptions routeOptions, com.mapbox.navigation.base.route.RouterCallback callback);
    method public long getRouteRefresh(com.mapbox.api.directions.v5.models.DirectionsRoute route, int legIndex, com.mapbox.navigation.base.route.RouteRefreshCallback callback);
    method public void shutdown();
  }

  public interface RouterCallback {
    method public void onCanceled(com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
    method public void onFailure(java.util.List<com.mapbox.navigation.base.route.RouterFailure> reasons, com.mapbox.api.directions.v5.models.RouteOptions routeOptions);
    method public void onRoutesReady(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
  }

  public final class RouterFailure {
    ctor public RouterFailure(java.net.URL url, String message, Integer? code = null, Throwable? throwable = null);
    ctor public RouterFailure(java.net.URL url, String message, Integer? code = null);
    ctor public RouterFailure(java.net.URL url, String message);
    method public java.net.URL component1();
    method public String component2();
    method public Integer? component3();
    method public Throwable? component4();
    method public com.mapbox.navigation.base.route.RouterFailure copy(java.net.URL url, String message, Integer? code, Throwable? throwable);
    method public Integer? getCode();
    method public String getMessage();
    method public Throwable? getThrowable();
    method public java.net.URL getUrl();
    property public final Integer? code;
    property public final String message;
    property public final Throwable? throwable;
    property public final java.net.URL url;
  }

}

package com.mapbox.navigation.base.speed.model {

  public final class SpeedLimit {
    ctor public SpeedLimit(Integer? speedKmph, com.mapbox.navigation.base.speed.model.SpeedLimitUnit speedLimitUnit, com.mapbox.navigation.base.speed.model.SpeedLimitSign speedLimitSign);
    method public Integer? component1();
    method public com.mapbox.navigation.base.speed.model.SpeedLimitUnit component2();
    method public com.mapbox.navigation.base.speed.model.SpeedLimitSign component3();
    method public com.mapbox.navigation.base.speed.model.SpeedLimit copy(Integer? speedKmph, com.mapbox.navigation.base.speed.model.SpeedLimitUnit speedLimitUnit, com.mapbox.navigation.base.speed.model.SpeedLimitSign speedLimitSign);
    method public Integer? getSpeedKmph();
    method public com.mapbox.navigation.base.speed.model.SpeedLimitSign getSpeedLimitSign();
    method public com.mapbox.navigation.base.speed.model.SpeedLimitUnit getSpeedLimitUnit();
    property public final Integer? speedKmph;
    property public final com.mapbox.navigation.base.speed.model.SpeedLimitSign speedLimitSign;
    property public final com.mapbox.navigation.base.speed.model.SpeedLimitUnit speedLimitUnit;
  }

  public enum SpeedLimitSign {
    enum_constant public static final com.mapbox.navigation.base.speed.model.SpeedLimitSign MUTCD;
    enum_constant public static final com.mapbox.navigation.base.speed.model.SpeedLimitSign VIENNA;
  }

  public enum SpeedLimitUnit {
    enum_constant public static final com.mapbox.navigation.base.speed.model.SpeedLimitUnit KILOMETRES_PER_HOUR;
    enum_constant public static final com.mapbox.navigation.base.speed.model.SpeedLimitUnit MILES_PER_HOUR;
  }

}

package com.mapbox.navigation.base.time.span {

  public final class SpanExKt {
  }

}

package com.mapbox.navigation.base.trip.model {

  public final class RouteLegProgress {
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress? getCurrentStepProgress();
    method public float getDistanceRemaining();
    method public float getDistanceTraveled();
    method public double getDurationRemaining();
    method public float getFractionTraveled();
    method public int getLegIndex();
    method public com.mapbox.api.directions.v5.models.RouteLeg? getRouteLeg();
    method public com.mapbox.api.directions.v5.models.LegStep? getUpcomingStep();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder toBuilder();
    property public final com.mapbox.navigation.base.trip.model.RouteStepProgress? currentStepProgress;
    property public final float distanceRemaining;
    property public final float distanceTraveled;
    property public final double durationRemaining;
    property public final float fractionTraveled;
    property public final int legIndex;
    property public final com.mapbox.api.directions.v5.models.RouteLeg? routeLeg;
    property public final com.mapbox.api.directions.v5.models.LegStep? upcomingStep;
  }

  public static final class RouteLegProgress.Builder {
    ctor public RouteLegProgress.Builder();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress build();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder currentStepProgress(com.mapbox.navigation.base.trip.model.RouteStepProgress? currentStepProgress);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder distanceRemaining(float distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder distanceTraveled(float distanceTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder durationRemaining(double durationRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder fractionTraveled(float fractionTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder legIndex(int legIndex);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder routeLeg(com.mapbox.api.directions.v5.models.RouteLeg? routeLeg);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder upcomingStep(com.mapbox.api.directions.v5.models.LegStep? upcomingStep);
  }

  public final class RouteProgress {
    method public com.mapbox.api.directions.v5.models.BannerInstructions? getBannerInstructions();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress? getCurrentLegProgress();
    method public com.mapbox.navigation.base.trip.model.RouteProgressState getCurrentState();
    method public float getDistanceRemaining();
    method public float getDistanceTraveled();
    method public double getDurationRemaining();
    method public float getFractionTraveled();
    method public boolean getInTunnel();
    method public int getRemainingWaypoints();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute getRoute();
    method public boolean getStale();
    method public java.util.List<com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject> getUpcomingRoadObjects();
    method public java.util.List<com.mapbox.geojson.Point>? getUpcomingStepPoints();
    method public com.mapbox.api.directions.v5.models.VoiceInstructions? getVoiceInstructions();
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder toBuilder();
    property public final com.mapbox.api.directions.v5.models.BannerInstructions? bannerInstructions;
    property public final com.mapbox.navigation.base.trip.model.RouteLegProgress? currentLegProgress;
    property public final com.mapbox.navigation.base.trip.model.RouteProgressState currentState;
    property public final float distanceRemaining;
    property public final float distanceTraveled;
    property public final double durationRemaining;
    property public final float fractionTraveled;
    property public final boolean inTunnel;
    property public final int remainingWaypoints;
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute route;
    property public final boolean stale;
    property public final java.util.List<com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject> upcomingRoadObjects;
    property public final java.util.List<com.mapbox.geojson.Point>? upcomingStepPoints;
    property public final com.mapbox.api.directions.v5.models.VoiceInstructions? voiceInstructions;
  }

  public static final class RouteProgress.Builder {
    ctor public RouteProgress.Builder(com.mapbox.api.directions.v5.models.DirectionsRoute route);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder bannerInstructions(com.mapbox.api.directions.v5.models.BannerInstructions? bannerInstructions);
    method public com.mapbox.navigation.base.trip.model.RouteProgress build();
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder currentLegProgress(com.mapbox.navigation.base.trip.model.RouteLegProgress? legProgress);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder currentState(com.mapbox.navigation.base.trip.model.RouteProgressState currentState);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder distanceRemaining(float distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder distanceTraveled(float distanceTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder durationRemaining(double durationRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder fractionTraveled(float fractionTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder inTunnel(boolean inTunnel);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder remainingWaypoints(int remainingWaypoints);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder stale(boolean stale);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder upcomingRoadObjects(java.util.List<com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject> upcomingRoadObjects);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder upcomingStepPoints(java.util.List<com.mapbox.geojson.Point>? upcomingStepPoints);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder voiceInstructions(com.mapbox.api.directions.v5.models.VoiceInstructions? voiceInstructions);
  }

  public enum RouteProgressState {
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState COMPLETE;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState INITIALIZED;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState OFF_ROUTE;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState TRACKING;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState UNCERTAIN;
  }

  public final class RouteStepProgress {
    method public float getDistanceRemaining();
    method public float getDistanceTraveled();
    method public double getDurationRemaining();
    method public float getFractionTraveled();
    method public Integer? getInstructionIndex();
    method public int getIntersectionIndex();
    method public com.mapbox.api.directions.v5.models.LegStep? getStep();
    method public int getStepIndex();
    method public java.util.List<com.mapbox.geojson.Point>? getStepPoints();
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder toBuilder();
    property public final float distanceRemaining;
    property public final float distanceTraveled;
    property public final double durationRemaining;
    property public final float fractionTraveled;
    property public final Integer? instructionIndex;
    property public final int intersectionIndex;
    property public final com.mapbox.api.directions.v5.models.LegStep? step;
    property public final int stepIndex;
    property public final java.util.List<com.mapbox.geojson.Point>? stepPoints;
  }

  public static final class RouteStepProgress.Builder {
    ctor public RouteStepProgress.Builder();
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress build();
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder distanceRemaining(float distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder distanceTraveled(float distanceTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder durationRemaining(double durationRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder fractionTraveled(float fractionTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder instructionIndex(Integer? instructionIndex);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder intersectionIndex(int intersectionIndex);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder step(com.mapbox.api.directions.v5.models.LegStep? step);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder stepIndex(int stepIndex);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder stepPoints(java.util.List<com.mapbox.geojson.Point>? stepPoints);
  }

  public abstract sealed class TripNotificationState {
  }

  public static final class TripNotificationState.TripNotificationData extends com.mapbox.navigation.base.trip.model.TripNotificationState {
    method public com.mapbox.api.directions.v5.models.BannerInstructions? component1();
    method public Double? component2();
    method public Double? component3();
    method public String? component4();
    method public com.mapbox.navigation.base.trip.model.TripNotificationState.TripNotificationData copy(com.mapbox.api.directions.v5.models.BannerInstructions? bannerInstructions, Double? distanceRemaining, Double? durationRemaining, String? drivingSide);
    method public com.mapbox.api.directions.v5.models.BannerInstructions? getBannerInstructions();
    method public Double? getDistanceRemaining();
    method public String? getDrivingSide();
    method public Double? getDurationRemaining();
    property public final com.mapbox.api.directions.v5.models.BannerInstructions? bannerInstructions;
    property public final Double? distanceRemaining;
    property public final String? drivingSide;
    property public final Double? durationRemaining;
  }

  public static final class TripNotificationState.TripNotificationFreeState extends com.mapbox.navigation.base.trip.model.TripNotificationState {
  }

}

package com.mapbox.navigation.base.trip.model.eh {

  public final class EHorizon {
    method public com.mapbox.navigation.base.trip.model.eh.EHorizonEdge current(com.mapbox.navigation.base.trip.model.eh.EHorizonPosition position);
    method public com.mapbox.navigation.base.trip.model.eh.EHorizonEdge getStart();
    method public java.util.List<java.util.List<com.mapbox.navigation.base.trip.model.eh.EHorizonEdge>> mpp();
    method public java.util.List<java.util.List<com.mapbox.navigation.base.trip.model.eh.EHorizonEdge>> mpp(com.mapbox.navigation.base.trip.model.eh.EHorizonPosition position);
    property public final com.mapbox.navigation.base.trip.model.eh.EHorizonEdge start;
  }

  public final class EHorizonEdge {
    method public long getId();
    method public byte getLevel();
    method public java.util.List<com.mapbox.navigation.base.trip.model.eh.EHorizonEdge> getOut();
    method public double getProbability();
    method public boolean isMpp();
    property public final long id;
    property public final byte level;
    property public final java.util.List<com.mapbox.navigation.base.trip.model.eh.EHorizonEdge> out;
    property public final double probability;
  }

  public final class EHorizonEdgeMetadata {
    method public boolean getBridge();
    method public String? getCountryCodeIso2();
    method public String? getCountryCodeIso3();
    method public byte getCurvature();
    method public String getFunctionRoadClass();
    method public double getHeading();
    method public Byte? getLaneCount();
    method public double getLength();
    method public Double? getMeanElevation();
    method public boolean getMotorway();
    method public java.util.List<com.mapbox.navigation.base.trip.model.eh.RoadName> getNames();
    method public boolean getRamp();
    method public double getSpeed();
    method public Double? getSpeedLimit();
    method public String? getStateCode();
    method public boolean getToll();
    method public boolean getTunnel();
    method public boolean isOneWay();
    method public boolean isRightHandTraffic();
    property public final boolean bridge;
    property public final String? countryCodeIso2;
    property public final String? countryCodeIso3;
    property public final byte curvature;
    property public final String functionRoadClass;
    property public final double heading;
    property public final boolean isOneWay;
    property public final boolean isRightHandTraffic;
    property public final Byte? laneCount;
    property public final double length;
    property public final Double? meanElevation;
    property public final boolean motorway;
    property public final java.util.List<com.mapbox.navigation.base.trip.model.eh.RoadName> names;
    property public final boolean ramp;
    property public final double speed;
    property public final Double? speedLimit;
    property public final String? stateCode;
    property public final boolean toll;
    property public final boolean tunnel;
  }

  public final class EHorizonGraphPath {
    method public java.util.List<java.lang.Long> getEdges();
    method public double getLength();
    method public double getPercentAlongBegin();
    method public double getPercentAlongEnd();
    property public final java.util.List<java.lang.Long> edges;
    property public final double length;
    property public final double percentAlongBegin;
    property public final double percentAlongEnd;
  }

  public final class EHorizonGraphPosition {
    method public long getEdgeId();
    method public double getPercentAlong();
    property public final long edgeId;
    property public final double percentAlong;
  }

  public final class EHorizonMapperKt {
  }

  public final class EHorizonPosition {
    method public com.mapbox.navigation.base.trip.model.eh.EHorizon getEHorizon();
    method public com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPosition getEHorizonGraphPosition();
    method public String getEHorizonResultType();
    property public final com.mapbox.navigation.base.trip.model.eh.EHorizon eHorizon;
    property public final com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPosition eHorizonGraphPosition;
    property public final String eHorizonResultType;
  }

  public final class EHorizonResultType {
    field public static final String INITIAL = "INITIAL";
    field public static final com.mapbox.navigation.base.trip.model.eh.EHorizonResultType INSTANCE;
    field public static final String UPDATE = "UPDATE";
  }

  @StringDef({com.mapbox.navigation.base.trip.model.eh.EHorizonResultType.INITIAL, com.mapbox.navigation.base.trip.model.eh.EHorizonResultType.UPDATE}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface EHorizonResultType.Type {
  }

  public final class OpenLRStandard {
    field public static final com.mapbox.navigation.base.trip.model.eh.OpenLRStandard INSTANCE;
    field public static final String TOM_TOM = "TOM_TOM";
    field public static final String TPEG = "TPEG";
  }

  @StringDef({com.mapbox.navigation.base.trip.model.eh.OpenLRStandard.TOM_TOM, com.mapbox.navigation.base.trip.model.eh.OpenLRStandard.TPEG}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface OpenLRStandard.Type {
  }

  public final class RoadClass {
    field public static final com.mapbox.navigation.base.trip.model.eh.RoadClass INSTANCE;
    field public static final String MOTORWAY = "MOTORWAY";
    field public static final String PRIMARY = "PRIMARY";
    field public static final String RESIDENTIAL = "RESIDENTIAL";
    field public static final String SECONDARY = "SECONDARY";
    field public static final String SERVICE_OTHER = "SERVICE_OTHER";
    field public static final String TERTIARY = "TERTIARY";
    field public static final String TRUNK = "TRUNK";
    field public static final String UNCLASSIFIED = "UNCLASSIFIED";
  }

  @StringDef({com.mapbox.navigation.base.trip.model.eh.RoadClass.MOTORWAY, com.mapbox.navigation.base.trip.model.eh.RoadClass.TRUNK, com.mapbox.navigation.base.trip.model.eh.RoadClass.PRIMARY, com.mapbox.navigation.base.trip.model.eh.RoadClass.SECONDARY, com.mapbox.navigation.base.trip.model.eh.RoadClass.TERTIARY, com.mapbox.navigation.base.trip.model.eh.RoadClass.UNCLASSIFIED, com.mapbox.navigation.base.trip.model.eh.RoadClass.RESIDENTIAL, com.mapbox.navigation.base.trip.model.eh.RoadClass.SERVICE_OTHER}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface RoadClass.Type {
  }

  public final class RoadName {
    method public String getName();
    method public boolean getShielded();
    property public final String name;
    property public final boolean shielded;
  }

}

package com.mapbox.navigation.base.trip.model.roadobject {

  public abstract class RoadObject {
    method public final String getId();
    method public final Double? getLength();
    method public final com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocation getLocation();
    method public final int getObjectType();
    method public final String getProvider();
    property public final String id;
    property public final Double? length;
    property public final com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocation location;
    property public final int objectType;
    property public final String provider;
  }

  public final class RoadObjectEdgeLocation {
    method public double getPercentAlongBegin();
    method public double getPercentAlongEnd();
    property public final double percentAlongBegin;
    property public final double percentAlongEnd;
  }

  public final class RoadObjectEnterExitInfo {
    method public boolean getEnterFromStartOrExitFromEnd();
    method public String getRoadObjectId();
    method public int getType();
    property public final boolean enterFromStartOrExitFromEnd;
    property public final String roadObjectId;
    property public final int type;
  }

  public final class RoadObjectMapperKt {
  }

  public final class RoadObjectMatcherError {
    method public String getError();
    method public String getRoadObjectId();
    property public final String error;
    property public final String roadObjectId;
  }

  public final class RoadObjectPassInfo {
    method public String getRoadObjectId();
    method public int getType();
    property public final String roadObjectId;
    property public final int type;
  }

  public final class RoadObjectPosition {
    method public com.mapbox.geojson.Point getCoordinate();
    method public com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPosition getEHorizonGraphPosition();
    property public final com.mapbox.geojson.Point coordinate;
    property public final com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPosition eHorizonGraphPosition;
  }

  public final class RoadObjectProvider {
    field public static final String CUSTOM = "CUSTOM";
    field public static final com.mapbox.navigation.base.trip.model.roadobject.RoadObjectProvider INSTANCE;
    field public static final String MAPBOX = "MAPBOX";
  }

  @StringDef({com.mapbox.navigation.base.trip.model.roadobject.RoadObjectProvider.MAPBOX, com.mapbox.navigation.base.trip.model.roadobject.RoadObjectProvider.CUSTOM}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface RoadObjectProvider.Type {
  }

  public final class RoadObjectType {
    field public static final int BRIDGE = 5; // 0x5
    field public static final int COUNTRY_BORDER_CROSSING = 1; // 0x1
    field public static final int CUSTOM = 7; // 0x7
    field public static final int INCIDENT = 6; // 0x6
    field public static final com.mapbox.navigation.base.trip.model.roadobject.RoadObjectType INSTANCE;
    field public static final int RESTRICTED_AREA = 4; // 0x4
    field public static final int REST_STOP = 3; // 0x3
    field public static final int TOLL_COLLECTION = 2; // 0x2
    field public static final int TUNNEL = 0; // 0x0
  }

  @IntDef({com.mapbox.navigation.base.trip.model.roadobject.RoadObjectType.TUNNEL, com.mapbox.navigation.base.trip.model.roadobject.RoadObjectType.COUNTRY_BORDER_CROSSING, com.mapbox.navigation.base.trip.model.roadobject.RoadObjectType.TOLL_COLLECTION, com.mapbox.navigation.base.trip.model.roadobject.RoadObjectType.REST_STOP, com.mapbox.navigation.base.trip.model.roadobject.RoadObjectType.RESTRICTED_AREA, com.mapbox.navigation.base.trip.model.roadobject.RoadObjectType.BRIDGE, com.mapbox.navigation.base.trip.model.roadobject.RoadObjectType.INCIDENT, com.mapbox.navigation.base.trip.model.roadobject.RoadObjectType.CUSTOM}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface RoadObjectType.Type {
  }

  public final class UpcomingRoadObject {
    method public com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfo? getDistanceInfo();
    method public double getDistanceToStart();
    method public com.mapbox.navigation.base.trip.model.roadobject.RoadObject getRoadObject();
    property public final com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfo? distanceInfo;
    property public final double distanceToStart;
    property public final com.mapbox.navigation.base.trip.model.roadobject.RoadObject roadObject;
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.border {

  public final class CountryBorderCrossing extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.base.trip.model.roadobject.border.CountryBorderCrossingInfo getCountryBorderCrossingInfo();
    property public final com.mapbox.navigation.base.trip.model.roadobject.border.CountryBorderCrossingInfo countryBorderCrossingInfo;
  }

  public final class CountryBorderCrossingAdminInfo {
    method public String getCode();
    method public String getCodeAlpha3();
    property public final String code;
    property public final String codeAlpha3;
  }

  public final class CountryBorderCrossingInfo {
    method public com.mapbox.navigation.base.trip.model.roadobject.border.CountryBorderCrossingAdminInfo getFrom();
    method public com.mapbox.navigation.base.trip.model.roadobject.border.CountryBorderCrossingAdminInfo getTo();
    property public final com.mapbox.navigation.base.trip.model.roadobject.border.CountryBorderCrossingAdminInfo from;
    property public final com.mapbox.navigation.base.trip.model.roadobject.border.CountryBorderCrossingAdminInfo to;
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.bridge {

  public final class Bridge extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.custom {

  public final class Custom extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.distanceinfo {

  public final class GantryDistanceInfo extends com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfo {
    method public double getDistanceToStart();
    property public double distanceToStart;
  }

  public final class LineDistanceInfo extends com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfo {
    method public double getDistanceToEnd();
    method public double getDistanceToEntry();
    method public double getDistanceToExit();
    method public double getDistanceToStart();
    method public boolean getEntryFromStart();
    method public double getLength();
    property public final double distanceToEnd;
    property public final double distanceToEntry;
    property public final double distanceToExit;
    property public double distanceToStart;
    property public final boolean entryFromStart;
    property public final double length;
  }

  public final class PointDistanceInfo extends com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfo {
    method public double getDistanceToStart();
    property public double distanceToStart;
  }

  public final class PolygonDistanceInfo extends com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfo {
    method public double getDistanceToNearestEntry();
    method public double getDistanceToNearestExit();
    method public double getDistanceToStart();
    method public boolean getInside();
    property public final double distanceToNearestEntry;
    property public final double distanceToNearestExit;
    property public double distanceToStart;
    property public final boolean inside;
  }

  public abstract class RoadObjectDistanceInfo {
    method public final int getDistanceInfoType();
    method public abstract double getDistanceToStart();
    method public final String getRoadObjectId();
    method public final int getRoadObjectType();
    property public final int distanceInfoType;
    property public abstract double distanceToStart;
    property public final String roadObjectId;
    property public final int roadObjectType;
  }

  public final class RoadObjectDistanceInfoType {
    field public static final int GANTRY = 0; // 0x0
    field public static final com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfoType INSTANCE;
    field public static final int LINE = 1; // 0x1
    field public static final int POINT = 2; // 0x2
    field public static final int POLYGON = 3; // 0x3
    field public static final int SUB_GRAPH = 4; // 0x4
  }

  @IntDef({com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfoType.GANTRY, com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfoType.LINE, com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfoType.POINT, com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfoType.POLYGON, com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfoType.SUB_GRAPH}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface RoadObjectDistanceInfoType.Type {
  }

  public final class SubGraphDistanceInfo extends com.mapbox.navigation.base.trip.model.roadobject.distanceinfo.RoadObjectDistanceInfo {
    method public double getDistanceToNearestEntry();
    method public double getDistanceToNearestExit();
    method public double getDistanceToStart();
    method public boolean getInside();
    property public final double distanceToNearestEntry;
    property public final double distanceToNearestExit;
    property public double distanceToStart;
    property public final boolean inside;
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.incident {

  public final class Incident extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentInfo getInfo();
    property public final com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentInfo info;
  }

  public final class IncidentCongestion {
    method public Integer? getValue();
    property public final Integer? value;
  }

  public final class IncidentImpact {
    field public static final String CRITICAL = "critical";
    field public static final com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentImpact INSTANCE;
    field public static final String LOW = "low";
    field public static final String MAJOR = "major";
    field public static final String MINOR = "minor";
    field public static final String UNKNOWN = "unknown";
  }

  @StringDef({com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentImpact.UNKNOWN, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentImpact.CRITICAL, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentImpact.MAJOR, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentImpact.MINOR, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentImpact.LOW}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface IncidentImpact.Impact {
  }

  public final class IncidentInfo {
    method public java.util.List<java.lang.Integer>? getAlertcCodes();
    method public com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentCongestion? getCongestion();
    method public String? getCountryCodeAlpha2();
    method public String? getCountryCodeAlpha3();
    method public java.util.Date? getCreationTime();
    method public String? getDescription();
    method public java.util.Date? getEndTime();
    method public String getId();
    method public String getImpact();
    method public java.util.List<java.lang.String> getLanesBlocked();
    method public String? getLanesClearDesc();
    method public String? getLongDescription();
    method public Long? getNumLanesBlocked();
    method public java.util.Date? getStartTime();
    method public String? getSubType();
    method public String? getSubTypeDescription();
    method public int getType();
    method public boolean isClosed();
    property public final java.util.List<java.lang.Integer>? alertcCodes;
    property public final com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentCongestion? congestion;
    property public final String? countryCodeAlpha2;
    property public final String? countryCodeAlpha3;
    property public final java.util.Date? creationTime;
    property public final String? description;
    property public final java.util.Date? endTime;
    property public final String id;
    property public final String impact;
    property public final boolean isClosed;
    property public final java.util.List<java.lang.String> lanesBlocked;
    property public final String? lanesClearDesc;
    property public final String? longDescription;
    property public final Long? numLanesBlocked;
    property public final java.util.Date? startTime;
    property public final String? subType;
    property public final String? subTypeDescription;
    property public final int type;
  }

  public final class IncidentType {
    field public static final int ACCIDENT = 41; // 0x29
    field public static final int CONGESTION = 42; // 0x2a
    field public static final int CONSTRUCTION = 43; // 0x2b
    field public static final int DISABLED_VEHICLE = 44; // 0x2c
    field public static final com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType INSTANCE;
    field public static final int LANE_RESTRICTION = 45; // 0x2d
    field public static final int MASS_TRANSIT = 46; // 0x2e
    field public static final int MISCELLANEOUS = 47; // 0x2f
    field public static final int OTHER_NEWS = 48; // 0x30
    field public static final int PLANNED_EVENT = 49; // 0x31
    field public static final int ROAD_CLOSURE = 50; // 0x32
    field public static final int ROAD_HAZARD = 51; // 0x33
    field public static final int UNKNOWN = 40; // 0x28
    field public static final int WEATHER = 52; // 0x34
  }

  @IntDef({com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.UNKNOWN, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.ACCIDENT, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.CONGESTION, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.CONSTRUCTION, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.DISABLED_VEHICLE, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.LANE_RESTRICTION, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.MASS_TRANSIT, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.MISCELLANEOUS, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.OTHER_NEWS, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.PLANNED_EVENT, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.ROAD_CLOSURE, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.ROAD_HAZARD, com.mapbox.navigation.base.trip.model.roadobject.incident.IncidentType.WEATHER}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface IncidentType.Type {
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.location {

  public final class GantryLocation extends com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocation {
    method public java.util.List<com.mapbox.navigation.base.trip.model.roadobject.RoadObjectPosition> getPositions();
    property public final java.util.List<com.mapbox.navigation.base.trip.model.roadobject.RoadObjectPosition> positions;
  }

  public final class OpenLRLineLocation extends com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocation {
    method public com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPath getGraphPath();
    property public final com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPath graphPath;
  }

  public final class OpenLROrientation {
    field public static final int AGAINST_LINE_DIRECTION = 2; // 0x2
    field public static final int BOTH = 3; // 0x3
    field public static final com.mapbox.navigation.base.trip.model.roadobject.location.OpenLROrientation INSTANCE;
    field public static final int NO_ORIENTATION_OR_UNKNOWN = 0; // 0x0
    field public static final int WITH_LINE_DIRECTION = 1; // 0x1
  }

  @IntDef({com.mapbox.navigation.base.trip.model.roadobject.location.OpenLROrientation.NO_ORIENTATION_OR_UNKNOWN, com.mapbox.navigation.base.trip.model.roadobject.location.OpenLROrientation.WITH_LINE_DIRECTION, com.mapbox.navigation.base.trip.model.roadobject.location.OpenLROrientation.AGAINST_LINE_DIRECTION, com.mapbox.navigation.base.trip.model.roadobject.location.OpenLROrientation.BOTH}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface OpenLROrientation.Type {
  }

  public final class OpenLRPointLocation extends com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocation {
    method public int getOpenLROrientation();
    method public int getOpenLRSideOfRoad();
    method public com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPosition getPosition();
    property public final int openLROrientation;
    property public final int openLRSideOfRoad;
    property public final com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPosition position;
  }

  public final class OpenLRSideOfRoad {
    field public static final int BOTH = 3; // 0x3
    field public static final com.mapbox.navigation.base.trip.model.roadobject.location.OpenLRSideOfRoad INSTANCE;
    field public static final int LEFT = 2; // 0x2
    field public static final int ON_ROAD_OR_UNKNOWN = 0; // 0x0
    field public static final int RIGHT = 1; // 0x1
  }

  @IntDef({com.mapbox.navigation.base.trip.model.roadobject.location.OpenLRSideOfRoad.ON_ROAD_OR_UNKNOWN, com.mapbox.navigation.base.trip.model.roadobject.location.OpenLRSideOfRoad.RIGHT, com.mapbox.navigation.base.trip.model.roadobject.location.OpenLRSideOfRoad.LEFT, com.mapbox.navigation.base.trip.model.roadobject.location.OpenLRSideOfRoad.BOTH}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface OpenLRSideOfRoad.Type {
  }

  public final class PointLocation extends com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocation {
    method public com.mapbox.navigation.base.trip.model.roadobject.RoadObjectPosition getPosition();
    property public final com.mapbox.navigation.base.trip.model.roadobject.RoadObjectPosition position;
  }

  public final class PolygonLocation extends com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocation {
    method public java.util.List<com.mapbox.navigation.base.trip.model.roadobject.RoadObjectPosition> getEntries();
    method public java.util.List<com.mapbox.navigation.base.trip.model.roadobject.RoadObjectPosition> getExits();
    property public final java.util.List<com.mapbox.navigation.base.trip.model.roadobject.RoadObjectPosition> entries;
    property public final java.util.List<com.mapbox.navigation.base.trip.model.roadobject.RoadObjectPosition> exits;
  }

  public final class PolylineLocation extends com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocation {
    method public com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPath getPath();
    property public final com.mapbox.navigation.base.trip.model.eh.EHorizonGraphPath path;
  }

  public abstract class RoadObjectLocation {
    method public final int getLocationType();
    method public final com.mapbox.geojson.Geometry getShape();
    property public final int locationType;
    property public final com.mapbox.geojson.Geometry shape;
  }

  public final class RoadObjectLocationType {
    field public static final int GANTRY = 0; // 0x0
    field public static final com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocationType INSTANCE;
    field public static final int OPEN_LR_LINE = 1; // 0x1
    field public static final int OPEN_LR_POINT = 2; // 0x2
    field public static final int POINT = 3; // 0x3
    field public static final int POLYGON = 4; // 0x4
    field public static final int POLYLINE = 5; // 0x5
    field public static final int ROUTE_ALERT = 6; // 0x6
  }

  @IntDef({com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocationType.GANTRY, com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocationType.OPEN_LR_LINE, com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocationType.OPEN_LR_POINT, com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocationType.POINT, com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocationType.POLYGON, com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocationType.POLYLINE, com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocationType.ROUTE_ALERT}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface RoadObjectLocationType.Type {
  }

  public final class RouteAlertLocation extends com.mapbox.navigation.base.trip.model.roadobject.location.RoadObjectLocation {
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.restrictedarea {

  public final class RestrictedArea extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.reststop {

  public final class RestStop extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public int getRestStopType();
    property public final int restStopType;
  }

  public final class RestStopType {
    field public static final com.mapbox.navigation.base.trip.model.roadobject.reststop.RestStopType INSTANCE;
    field public static final int REST_AREA = 1; // 0x1
    field public static final int SERVICE_AREA = 2; // 0x2
    field public static final int UNKNOWN = -1; // 0xffffffff
  }

  @IntDef({com.mapbox.navigation.base.trip.model.roadobject.reststop.RestStopType.UNKNOWN, com.mapbox.navigation.base.trip.model.roadobject.reststop.RestStopType.REST_AREA, com.mapbox.navigation.base.trip.model.roadobject.reststop.RestStopType.SERVICE_AREA}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface RestStopType.Type {
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.tollcollection {

  public final class TollCollection extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public int getTollCollectionType();
    property public final int tollCollectionType;
  }

  public final class TollCollectionType {
    field public static final com.mapbox.navigation.base.trip.model.roadobject.tollcollection.TollCollectionType INSTANCE;
    field public static final int TOLL_BOOTH = 1; // 0x1
    field public static final int TOLL_GANTRY = 2; // 0x2
    field public static final int UNKNOWN = -1; // 0xffffffff
  }

  @IntDef({com.mapbox.navigation.base.trip.model.roadobject.tollcollection.TollCollectionType.UNKNOWN, com.mapbox.navigation.base.trip.model.roadobject.tollcollection.TollCollectionType.TOLL_BOOTH, com.mapbox.navigation.base.trip.model.roadobject.tollcollection.TollCollectionType.TOLL_GANTRY}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface TollCollectionType.Type {
  }

}

package com.mapbox.navigation.base.trip.model.roadobject.tunnel {

  public final class Tunnel extends com.mapbox.navigation.base.trip.model.roadobject.RoadObject {
    method public com.mapbox.navigation.base.trip.model.roadobject.tunnel.TunnelInfo getInfo();
    property public final com.mapbox.navigation.base.trip.model.roadobject.tunnel.TunnelInfo info;
  }

  public final class TunnelInfo {
    method public String? getName();
    property public final String? name;
  }

}

package com.mapbox.navigation.base.trip.notification {

  public enum NotificationAction {
    enum_constant public static final com.mapbox.navigation.base.trip.notification.NotificationAction END_NAVIGATION;
  }

  public interface TripNotification {
    method public android.app.Notification getNotification();
    method public int getNotificationId();
    method public void onTripSessionStarted();
    method public void onTripSessionStopped();
    method public void updateNotification(com.mapbox.navigation.base.trip.model.TripNotificationState state);
  }

}

package com.mapbox.navigation.base.utils {

  public final class NullUtilsKt {
  }

}

