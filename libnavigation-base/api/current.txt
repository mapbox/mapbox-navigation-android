// Signature format: 3.0
package com.mapbox.navigation.base {

  public final class TimeFormat {
    field public static final com.mapbox.navigation.base.TimeFormat INSTANCE;
    field public static final int NONE_SPECIFIED = -1; // 0xffffffff
    field public static final int TWELVE_HOURS = 0; // 0x0
    field public static final int TWENTY_FOUR_HOURS = 1; // 0x1
  }

  @IntDef({com.mapbox.navigation.base.TimeFormat.NONE_SPECIFIED, com.mapbox.navigation.base.TimeFormat.TWELVE_HOURS, com.mapbox.navigation.base.TimeFormat.TWENTY_FOUR_HOURS}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface TimeFormat.Type {
  }

}

package com.mapbox.navigation.base.extensions {

  public final class RouteOptionsEx {
    method public static boolean supportsRouteRefresh(com.mapbox.api.directions.v5.models.RouteOptions?);
  }

}

package com.mapbox.navigation.base.formatter {

  public interface DistanceFormatter {
    method public android.text.SpannableString formatDistance(double distance);
  }

  public final class DistanceFormatterOptions {
    method public android.content.Context getApplicationContext();
    method public java.util.Locale getLocale();
    method public int getRoundingIncrement();
    method public String getUnitType();
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions.Builder toBuilder();
    property public final android.content.Context applicationContext;
    property public final java.util.Locale locale;
    property public final int roundingIncrement;
    property public final String unitType;
  }

  public static final class DistanceFormatterOptions.Builder {
    ctor public DistanceFormatterOptions.Builder(android.content.Context applicationContext);
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions build();
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions.Builder locale(java.util.Locale? locale);
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions.Builder roundingIncrement(@com.mapbox.navigation.base.formatter.Rounding.Increment int roundingIncrement);
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions.Builder unitType(String unitType);
  }

  public final class Rounding {
    field public static final int INCREMENT_FIFTY = 50; // 0x32
    field public static final int INCREMENT_FIVE = 5; // 0x5
    field public static final int INCREMENT_ONE_HUNDRED = 100; // 0x64
    field public static final int INCREMENT_TEN = 10; // 0xa
    field public static final int INCREMENT_TWENTY_FIVE = 25; // 0x19
    field public static final com.mapbox.navigation.base.formatter.Rounding INSTANCE;
  }

  @IntDef({com.mapbox.navigation.base.formatter.Rounding.INCREMENT_FIVE, com.mapbox.navigation.base.formatter.Rounding.INCREMENT_TEN, com.mapbox.navigation.base.formatter.Rounding.INCREMENT_TWENTY_FIVE, com.mapbox.navigation.base.formatter.Rounding.INCREMENT_FIFTY, com.mapbox.navigation.base.formatter.Rounding.INCREMENT_ONE_HUNDRED}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface Rounding.Increment {
  }

}

package com.mapbox.navigation.base.metrics {

  public final class DirectionsMetrics {
    field public static final com.mapbox.navigation.base.metrics.DirectionsMetrics INSTANCE;
    field public static final String ROUTE_RETRIEVAL = "route_retrieval_event";
  }

  public interface MetricEvent {
    method public String getMetricName();
    method public String toJson(com.google.gson.Gson gson);
    property public abstract String metricName;
  }

  @StringDef({com.mapbox.navigation.base.metrics.DirectionsMetrics.ROUTE_RETRIEVAL, com.mapbox.navigation.base.metrics.NavigationMetrics.ARRIVE, com.mapbox.navigation.base.metrics.NavigationMetrics.CANCEL_SESSION, com.mapbox.navigation.base.metrics.NavigationMetrics.DEPART, com.mapbox.navigation.base.metrics.NavigationMetrics.REROUTE, com.mapbox.navigation.base.metrics.NavigationMetrics.FEEDBACK, com.mapbox.navigation.base.metrics.NavigationMetrics.INITIAL_GPS, com.mapbox.navigation.base.metrics.NavigationMetrics.FASTER_ROUTE, com.mapbox.navigation.base.metrics.NavigationMetrics.APP_USER_TURNSTILE, com.mapbox.navigation.base.metrics.NavigationMetrics.FREE_DRIVE}) public static @interface MetricEvent.Metric {
  }

  public interface MetricsObserver {
    method public void onMetricUpdated(@com.mapbox.navigation.base.metrics.MetricEvent.Metric String metricName, String jsonStringData);
  }

  public interface MetricsReporter {
    method public void addEvent(com.mapbox.navigation.base.metrics.MetricEvent metricEvent);
    method public void removeObserver();
    method public void setMetricsObserver(com.mapbox.navigation.base.metrics.MetricsObserver metricsObserver);
  }

  public final class NavigationMetrics {
    field public static final String APP_USER_TURNSTILE = "appUserTurnstile";
    field public static final String ARRIVE = "navigation.arrive";
    field public static final String CANCEL_SESSION = "navigation.cancel";
    field public static final String DEPART = "navigation.depart";
    field public static final String FASTER_ROUTE = "navigation.fasterRoute";
    field public static final String FEEDBACK = "navigation.feedback";
    field public static final String FREE_DRIVE = "navigation.freeDrive";
    field public static final String INITIAL_GPS = "initial_gps_event";
    field public static final com.mapbox.navigation.base.metrics.NavigationMetrics INSTANCE;
    field public static final String REROUTE = "navigation.reroute";
  }

}

package com.mapbox.navigation.base.options {

  public final class DeviceProfile {
    method public String getCustomConfig();
    method public com.mapbox.navigation.base.options.DeviceType getDeviceType();
    method public com.mapbox.navigation.base.options.DeviceProfile.Builder toBuilder();
    property public final String customConfig;
    property public final com.mapbox.navigation.base.options.DeviceType deviceType;
  }

  public static final class DeviceProfile.Builder {
    ctor public DeviceProfile.Builder();
    method public com.mapbox.navigation.base.options.DeviceProfile build();
    method public com.mapbox.navigation.base.options.DeviceProfile.Builder customConfig(String customConfig);
    method public com.mapbox.navigation.base.options.DeviceProfile.Builder deviceType(com.mapbox.navigation.base.options.DeviceType deviceType);
  }

  public enum DeviceType {
    enum_constant public static final com.mapbox.navigation.base.options.DeviceType AUTOMOBILE;
    enum_constant public static final com.mapbox.navigation.base.options.DeviceType HANDHELD;
  }

  public final class EHorizonOptions {
    method public double getBranchLength();
    method public int getExpansion();
    method public double getLength();
    method public Double? getMinTimeDeltaBetweenUpdates();
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder toBuilder();
    property public final double branchLength;
    property public final int expansion;
    property public final double length;
    property public final Double? minTimeDeltaBetweenUpdates;
  }

  public static final class EHorizonOptions.Builder {
    ctor public EHorizonOptions.Builder();
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder branchLength(double branchLength);
    method public com.mapbox.navigation.base.options.EHorizonOptions build();
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder expansion(int expansion);
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder length(double length);
    method public com.mapbox.navigation.base.options.EHorizonOptions.Builder minTimeDeltaBetweenUpdates(Double? minTimeDeltaBetweenUpdates);
  }

  public final class IncidentsOptions {
    method public String getApiUrl();
    method public String getGraph();
    method public com.mapbox.navigation.base.options.IncidentsOptions.Builder toBuilder();
    property public final String apiUrl;
    property public final String graph;
  }

  public static final class IncidentsOptions.Builder {
    ctor public IncidentsOptions.Builder();
    method public com.mapbox.navigation.base.options.IncidentsOptions.Builder apiUrl(String apiUrl);
    method public com.mapbox.navigation.base.options.IncidentsOptions build();
    method public com.mapbox.navigation.base.options.IncidentsOptions.Builder graph(String graph);
  }

  public final class NavigationOptions {
    method public String? getAccessToken();
    method public android.content.Context getApplicationContext();
    method public com.mapbox.navigation.base.options.DeviceProfile getDeviceProfile();
    method public com.mapbox.navigation.base.formatter.DistanceFormatterOptions getDistanceFormatterOptions();
    method public com.mapbox.navigation.base.options.EHorizonOptions getEHorizonOptions();
    method public com.mapbox.navigation.base.options.IncidentsOptions getIncidentsOptions();
    method public com.mapbox.android.core.location.LocationEngine getLocationEngine();
    method public com.mapbox.android.core.location.LocationEngineRequest getLocationEngineRequest();
    method public long getNavigatorPredictionMillis();
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions getPredictiveCacheLocationOptions();
    method public com.mapbox.navigation.base.options.RoutingTilesOptions getRoutingTilesOptions();
    method public int getTimeFormatType();
    method public boolean isDebugLoggingEnabled();
    method public boolean isFromNavigationUi();
    method public boolean isRouteRefreshEnabled();
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder toBuilder();
    property public final String? accessToken;
    property public final android.content.Context applicationContext;
    property public final com.mapbox.navigation.base.options.DeviceProfile deviceProfile;
    property public final com.mapbox.navigation.base.formatter.DistanceFormatterOptions distanceFormatterOptions;
    property public final com.mapbox.navigation.base.options.EHorizonOptions eHorizonOptions;
    property public final com.mapbox.navigation.base.options.IncidentsOptions incidentsOptions;
    property public final boolean isDebugLoggingEnabled;
    property public final boolean isFromNavigationUi;
    property public final boolean isRouteRefreshEnabled;
    property public final com.mapbox.android.core.location.LocationEngine locationEngine;
    property public final com.mapbox.android.core.location.LocationEngineRequest locationEngineRequest;
    property public final long navigatorPredictionMillis;
    property public final com.mapbox.navigation.base.options.PredictiveCacheLocationOptions predictiveCacheLocationOptions;
    property public final com.mapbox.navigation.base.options.RoutingTilesOptions routingTilesOptions;
    property public final int timeFormatType;
  }

  public static final class NavigationOptions.Builder {
    ctor public NavigationOptions.Builder(android.content.Context applicationContext);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder accessToken(String? accessToken);
    method public com.mapbox.navigation.base.options.NavigationOptions build();
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder deviceProfile(com.mapbox.navigation.base.options.DeviceProfile deviceProfile);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder distanceFormatterOptions(com.mapbox.navigation.base.formatter.DistanceFormatterOptions distanceFormatterOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder eHorizonOptions(com.mapbox.navigation.base.options.EHorizonOptions eHorizonOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder incidentsOptions(com.mapbox.navigation.base.options.IncidentsOptions incidentsOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder isDebugLoggingEnabled(boolean flag);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder isFromNavigationUi(boolean flag);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder isRouteRefreshEnabled(boolean flag);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder locationEngine(com.mapbox.android.core.location.LocationEngine locationEngine);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder locationEngineRequest(com.mapbox.android.core.location.LocationEngineRequest locationEngineRequest);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder navigatorPredictionMillis(long predictionMillis);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder predictiveCacheLocationOptions(com.mapbox.navigation.base.options.PredictiveCacheLocationOptions predictiveCacheLocationOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder routingTilesOptions(com.mapbox.navigation.base.options.RoutingTilesOptions routingTilesOptions);
    method public com.mapbox.navigation.base.options.NavigationOptions.Builder timeFormatType(int type);
  }

  public final class NavigationOptionsKt {
    field public static final long DEFAULT_NAVIGATOR_PREDICTION_MILLIS = 1100L; // 0x44cL
  }

  public final class PredictiveCacheLocationOptions {
    method public int getCurrentLocationRadiusInMeters();
    method public int getDestinationLocationRadiusInMeters();
    method public int getRouteBufferRadiusInMeters();
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions.Builder toBuilder();
    property public final int currentLocationRadiusInMeters;
    property public final int destinationLocationRadiusInMeters;
    property public final int routeBufferRadiusInMeters;
  }

  public static final class PredictiveCacheLocationOptions.Builder {
    ctor public PredictiveCacheLocationOptions.Builder();
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions build();
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions.Builder currentLocationRadiusInMeters(int radiusInMeters);
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions.Builder destinationLocationRadiusInMeters(int radiusInMeters);
    method public com.mapbox.navigation.base.options.PredictiveCacheLocationOptions.Builder routeBufferRadiusInMeters(int radiusInMeters);
  }

  public final class RoutingTilesOptions {
    method public String? getFilePath();
    method public int getMinDaysBetweenServerAndLocalTilesVersion();
    method public java.net.URI getTilesBaseUri();
    method public String getTilesDataset();
    method public String getTilesProfile();
    method public String getTilesVersion();
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder toBuilder();
    property public final String? filePath;
    property public final int minDaysBetweenServerAndLocalTilesVersion;
    property public final java.net.URI tilesBaseUri;
    property public final String tilesDataset;
    property public final String tilesProfile;
    property public final String tilesVersion;
  }

  public static final class RoutingTilesOptions.Builder {
    ctor public RoutingTilesOptions.Builder();
    method public com.mapbox.navigation.base.options.RoutingTilesOptions build();
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder filePath(String? filePath);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder minDaysBetweenServerAndLocalTilesVersion(int minDaysBetweenServerAndLocalTilesVersion);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder tilesBaseUri(java.net.URI tilesBaseUri);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder tilesDataset(String tilesDataset);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder tilesProfile(String tilesProfile);
    method public com.mapbox.navigation.base.options.RoutingTilesOptions.Builder tilesVersion(String version);
  }

}

package com.mapbox.navigation.base.route {

  public interface RouteRefreshCallback {
    method public void onError(com.mapbox.navigation.base.route.RouteRefreshError error);
    method public void onRefresh(com.mapbox.api.directions.v5.models.DirectionsRoute directionsRoute);
  }

  public final class RouteRefreshError {
    ctor public RouteRefreshError(String? message = null, Throwable? throwable = null);
    method public String? component1();
    method public Throwable? component2();
    method public com.mapbox.navigation.base.route.RouteRefreshError copy(String? message, Throwable? throwable);
    method public String? getMessage();
    method public Throwable? getThrowable();
    property public final String? message;
    property public final Throwable? throwable;
  }

  public interface Router {
    method public void cancel();
    method public void getRoute(com.mapbox.api.directions.v5.models.RouteOptions routeOptions, com.mapbox.navigation.base.route.Router.Callback callback);
    method public void getRouteRefresh(com.mapbox.api.directions.v5.models.DirectionsRoute route, int legIndex, com.mapbox.navigation.base.route.RouteRefreshCallback callback);
    method public void shutdown();
  }

  public static interface Router.Callback {
    method public void onCanceled();
    method public void onFailure(Throwable throwable);
    method public void onResponse(java.util.List<? extends com.mapbox.api.directions.v5.models.DirectionsRoute> routes);
  }

}

package com.mapbox.navigation.base.speed.model {

  public final class SpeedLimit {
    ctor public SpeedLimit(Integer? speedKmph, com.mapbox.navigation.base.speed.model.SpeedLimitUnit speedLimitUnit, com.mapbox.navigation.base.speed.model.SpeedLimitSign speedLimitSign);
    method public Integer? component1();
    method public com.mapbox.navigation.base.speed.model.SpeedLimitUnit component2();
    method public com.mapbox.navigation.base.speed.model.SpeedLimitSign component3();
    method public com.mapbox.navigation.base.speed.model.SpeedLimit copy(Integer? speedKmph, com.mapbox.navigation.base.speed.model.SpeedLimitUnit speedLimitUnit, com.mapbox.navigation.base.speed.model.SpeedLimitSign speedLimitSign);
    method public Integer? getSpeedKmph();
    method public com.mapbox.navigation.base.speed.model.SpeedLimitSign getSpeedLimitSign();
    method public com.mapbox.navigation.base.speed.model.SpeedLimitUnit getSpeedLimitUnit();
    property public final Integer? speedKmph;
    property public final com.mapbox.navigation.base.speed.model.SpeedLimitSign speedLimitSign;
    property public final com.mapbox.navigation.base.speed.model.SpeedLimitUnit speedLimitUnit;
  }

  public enum SpeedLimitSign {
    enum_constant public static final com.mapbox.navigation.base.speed.model.SpeedLimitSign MUTCD;
    enum_constant public static final com.mapbox.navigation.base.speed.model.SpeedLimitSign VIENNA;
  }

  public enum SpeedLimitUnit {
    enum_constant public static final com.mapbox.navigation.base.speed.model.SpeedLimitUnit KILOMETRES_PER_HOUR;
    enum_constant public static final com.mapbox.navigation.base.speed.model.SpeedLimitUnit MILES_PER_HOUR;
  }

}

package com.mapbox.navigation.base.time.span {

  public final class SpanExKt {
  }

}

package com.mapbox.navigation.base.trip.model {

  public final class RouteLegProgress {
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress? getCurrentStepProgress();
    method public float getDistanceRemaining();
    method public float getDistanceTraveled();
    method public double getDurationRemaining();
    method public float getFractionTraveled();
    method public int getLegIndex();
    method public com.mapbox.api.directions.v5.models.RouteLeg? getRouteLeg();
    method public com.mapbox.api.directions.v5.models.LegStep? getUpcomingStep();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder toBuilder();
    property public final com.mapbox.navigation.base.trip.model.RouteStepProgress? currentStepProgress;
    property public final float distanceRemaining;
    property public final float distanceTraveled;
    property public final double durationRemaining;
    property public final float fractionTraveled;
    property public final int legIndex;
    property public final com.mapbox.api.directions.v5.models.RouteLeg? routeLeg;
    property public final com.mapbox.api.directions.v5.models.LegStep? upcomingStep;
  }

  public static final class RouteLegProgress.Builder {
    ctor public RouteLegProgress.Builder();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress build();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder currentStepProgress(com.mapbox.navigation.base.trip.model.RouteStepProgress? currentStepProgress);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder distanceRemaining(float distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder distanceTraveled(float distanceTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder durationRemaining(double durationRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder fractionTraveled(float fractionTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder legIndex(int legIndex);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder routeLeg(com.mapbox.api.directions.v5.models.RouteLeg? routeLeg);
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress.Builder upcomingStep(com.mapbox.api.directions.v5.models.LegStep? upcomingStep);
  }

  public final class RouteProgress {
    method public com.mapbox.api.directions.v5.models.BannerInstructions? getBannerInstructions();
    method public com.mapbox.navigation.base.trip.model.RouteLegProgress? getCurrentLegProgress();
    method public com.mapbox.navigation.base.trip.model.RouteProgressState getCurrentState();
    method public float getDistanceRemaining();
    method public float getDistanceTraveled();
    method public double getDurationRemaining();
    method public float getFractionTraveled();
    method public boolean getInTunnel();
    method public int getRemainingWaypoints();
    method public com.mapbox.api.directions.v5.models.DirectionsRoute getRoute();
    method public com.mapbox.geojson.Geometry? getRouteGeometryWithBuffer();
    method public java.util.List<com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject> getUpcomingRoadObjects();
    method public java.util.List<com.mapbox.geojson.Point>? getUpcomingStepPoints();
    method public com.mapbox.api.directions.v5.models.VoiceInstructions? getVoiceInstructions();
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder toBuilder();
    property public final com.mapbox.api.directions.v5.models.BannerInstructions? bannerInstructions;
    property public final com.mapbox.navigation.base.trip.model.RouteLegProgress? currentLegProgress;
    property public final com.mapbox.navigation.base.trip.model.RouteProgressState currentState;
    property public final float distanceRemaining;
    property public final float distanceTraveled;
    property public final double durationRemaining;
    property public final float fractionTraveled;
    property public final boolean inTunnel;
    property public final int remainingWaypoints;
    property public final com.mapbox.api.directions.v5.models.DirectionsRoute route;
    property public final com.mapbox.geojson.Geometry? routeGeometryWithBuffer;
    property public final java.util.List<com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject> upcomingRoadObjects;
    property public final java.util.List<com.mapbox.geojson.Point>? upcomingStepPoints;
    property public final com.mapbox.api.directions.v5.models.VoiceInstructions? voiceInstructions;
  }

  public static final class RouteProgress.Builder {
    ctor public RouteProgress.Builder(com.mapbox.api.directions.v5.models.DirectionsRoute route);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder bannerInstructions(com.mapbox.api.directions.v5.models.BannerInstructions? bannerInstructions);
    method public com.mapbox.navigation.base.trip.model.RouteProgress build();
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder currentLegProgress(com.mapbox.navigation.base.trip.model.RouteLegProgress? legProgress);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder currentState(com.mapbox.navigation.base.trip.model.RouteProgressState currentState);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder distanceRemaining(float distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder distanceTraveled(float distanceTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder durationRemaining(double durationRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder fractionTraveled(float fractionTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder inTunnel(boolean inTunnel);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder remainingWaypoints(int remainingWaypoints);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder routeGeometryWithBuffer(com.mapbox.geojson.Geometry? routeGeometryWithBuffer);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder upcomingRoadObjects(java.util.List<com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject> upcomingRoadObjects);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder upcomingStepPoints(java.util.List<com.mapbox.geojson.Point>? upcomingStepPoints);
    method public com.mapbox.navigation.base.trip.model.RouteProgress.Builder voiceInstructions(com.mapbox.api.directions.v5.models.VoiceInstructions? voiceInstructions);
  }

  public enum RouteProgressState {
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState LOCATION_STALE;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState LOCATION_TRACKING;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState OFF_ROUTE;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState ROUTE_COMPLETE;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState ROUTE_INITIALIZED;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState ROUTE_INVALID;
    enum_constant public static final com.mapbox.navigation.base.trip.model.RouteProgressState ROUTE_UNCERTAIN;
  }

  public final class RouteStepProgress {
    method public float getDistanceRemaining();
    method public float getDistanceTraveled();
    method public double getDurationRemaining();
    method public float getFractionTraveled();
    method public int getIntersectionIndex();
    method public com.mapbox.api.directions.v5.models.LegStep? getStep();
    method public int getStepIndex();
    method public java.util.List<com.mapbox.geojson.Point>? getStepPoints();
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder toBuilder();
    property public final float distanceRemaining;
    property public final float distanceTraveled;
    property public final double durationRemaining;
    property public final float fractionTraveled;
    property public final int intersectionIndex;
    property public final com.mapbox.api.directions.v5.models.LegStep? step;
    property public final int stepIndex;
    property public final java.util.List<com.mapbox.geojson.Point>? stepPoints;
  }

  public static final class RouteStepProgress.Builder {
    ctor public RouteStepProgress.Builder();
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress build();
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder distanceRemaining(float distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder distanceTraveled(float distanceTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder durationRemaining(double durationRemaining);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder fractionTraveled(float fractionTraveled);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder intersectionIndex(int intersectionIndex);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder step(com.mapbox.api.directions.v5.models.LegStep? step);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder stepIndex(int stepIndex);
    method public com.mapbox.navigation.base.trip.model.RouteStepProgress.Builder stepPoints(java.util.List<com.mapbox.geojson.Point>? stepPoints);
  }

}

package com.mapbox.navigation.base.trip.model.roadobject {

  public abstract class RoadObject {
    ctor public RoadObject(int objectType, Double? distanceFromStartOfRoute, com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry);
    method public final Double? getDistanceFromStartOfRoute();
    method public final com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry getObjectGeometry();
    method public final int getObjectType();
    property public final Double? distanceFromStartOfRoute;
    property public final com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry objectGeometry;
    property public final int objectType;
  }

  public final class RoadObjectGeometry {
    method public Integer? getEndGeometryIndex();
    method public Double? getLength();
    method public com.mapbox.geojson.Geometry getShape();
    method public Integer? getStartGeometryIndex();
    method public com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry.Builder toBuilder();
    property public final Integer? endGeometryIndex;
    property public final Double? length;
    property public final com.mapbox.geojson.Geometry shape;
    property public final Integer? startGeometryIndex;
  }

  public static final class RoadObjectGeometry.Builder {
    ctor public RoadObjectGeometry.Builder(Double? length, com.mapbox.geojson.Geometry shape, Integer? startGeometryIndex, Integer? endGeometryIndex);
    method public com.mapbox.navigation.base.trip.model.roadobject.RoadObjectGeometry build();
  }

  public final class UpcomingRoadObject {
    method public double getDistanceToStart();
    method public com.mapbox.navigation.base.trip.model.roadobject.RoadObject getRoadObject();
    method public com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject.Builder toBuilder();
    property public final double distanceToStart;
    property public final com.mapbox.navigation.base.trip.model.roadobject.RoadObject roadObject;
  }

  public static final class UpcomingRoadObject.Builder {
    ctor public UpcomingRoadObject.Builder(com.mapbox.navigation.base.trip.model.roadobject.RoadObject roadObject, double distanceRemaining);
    method public com.mapbox.navigation.base.trip.model.roadobject.UpcomingRoadObject build();
  }

}

package com.mapbox.navigation.base.trip.notification {

  public enum NotificationAction {
    enum_constant public static final com.mapbox.navigation.base.trip.notification.NotificationAction END_NAVIGATION;
  }

  public interface TripNotification {
    method public android.app.Notification getNotification();
    method public int getNotificationId();
    method public void onTripSessionStarted();
    method public void onTripSessionStopped();
    method public void updateNotification(com.mapbox.navigation.base.trip.model.RouteProgress? routeProgress);
  }

}

package com.mapbox.navigation.base.utils {

  public final class NullUtilsKt {
  }

}

