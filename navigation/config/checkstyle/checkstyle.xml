<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="fileExtensions" value="java, properties, xml"/>

    <module name="SuppressionFilter">
        <property name="file" value="config/checkstyle/suppressions.xml"/>
        <property name="optional" value="false"/>
    </module>

    <!-- Require UTF-8 encoding for all files -->
    <property name="charset" value="UTF-8"/>

    <!-- Default severity is error -->
    <property name="severity" value="error"/>

    <!-- Report every line containing a tab character" -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Checks that each java package has a package-info.java file. -->
    <!--<module name="JavadocPackage">-->
        <!--<property name="allowLegacy" value="false"/>-->
    <!--</module>-->

    <!-- Checks for long source files. -->
    <module name="FileLength">
        <property name="max" value="2000"/>
    </module>

    <!-- Trailing spaces -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <!--################################################-->
    <!--################ Non-AST checks ################-->
    <!--################################################-->

    <module name="TreeWalker">

        <!--#################################################################-->
        <!--################ NAMING CHECKS ##################################-->
        <!--#################################################################-->


        <!-- allow the dev to switch the checker OFF in a single file or a method -->
        <!-- <module name="SuppressionCommentFilter"/> -->

        <!-- needed for switching the checks on and off-->
        <!--<module name="FileContentsHolder" />-->

        <!-- Require package names to be all lower-case -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="Package name ''{0}'' must be lower-case."/>
        </module>

        <!-- Require standard type names -->
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must begin with a capital letter."/>
        </module>

        <!--
        Type parameters must either be a single upper-case character, or must begin
        with an upper-case character and end with "T" (e.g. DataT).
        -->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type parameter ''{0}'' must either be a single upper-case character, or begin with an upper-case character and end with 'T'."/>
        </module>

        <!--
        Non-public, non-static members must start with a lowercase letter and be
        at least two characters long.
        -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="false"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must start off lowercase and be at least two characters long."/>
        </module>

        <!--
        Require method names to be at least two characters long, and start with a
        lower case letter.
        -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must be at least two characters long."/>
        </module>

        <!--
        Type parameters must either be a single upper-case character, or must begin
        with an upper-case character and end with "T" (e.g. DataT).
        -->
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]+[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type parameter ''{0}'' must either be a single upper-case character or begin with an upper-case character and end with 'T'."/>
        </module>

        <!--
        Type parameters must either be a single upper-case character, or must begin
        with an upper-case character and end with "T" (e.g. DataT).
        -->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Interface type parameter ''{0}'' must either be a single upper-case character or begin with an upper-case character and end with 'T'."/>
        </module>

        <!-- Require parameter names to be at least two characters long -->
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must be at least two characters long."/>
        </module>

        <!--
        Require local variables to be at least two characters long,
        unless they are counters on a for loop.
        -->
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must be at least two characters long."/>
        </module>

        <!-- Require that constants be capitalized. -->
        <!--<module name="ConstantName"/>-->

        <module name="LocalFinalVariableName"/>

        <!-- Capitalized abbreviations are forbidden (e.g. URL, XML, HTTP) -->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
        </module>

        <!-- Forbid unnecessary escaping. -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>

        <!-- Forbid unnecessary unicode escapes -->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <!-- Require array notation on type (e.g. int[] x, not int x[]) -->
        <module name="ArrayTypeStyle"/>

        <!-- Checks that catch parameter names conform to a format specified by
        the format property.
        -->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--###################################################-->
        <!--################ IMPORTS ##########################-->
        <!--###################################################-->

        <!-- Star imports are forbidden. -->
        <module name="AvoidStarImport"/>

        <!--
        Imports should be ordered such that static imports come before normal
        imports. Within these groups (separated by an empty line), imports should
        be lexicographially sorted with no further subcategorization required.
         -->
        <!--<module name="CustomImportOrder">-->
            <!--<property name="sortImportsInGroupAlphabetically" value="false"/>-->
            <!--<property name="customImportOrderRules" value="THIRD_PARTY_PACKAGE###STATIC"/>-->
        <!--</module>-->

        <!-- Forbid imports from sun.* -->
        <module name="IllegalImport"/>

        <!-- Forbid redudant imports (e.g. import java.lang.String;) -->
        <module name="RedundantImport"/>

        <!-- Forbid unused imports -->
        <module name="UnusedImports"/>

        <!-- Forbid redundant modifiers -->
        <module name="RedundantModifier"/>

        <!--##############################################################-->
        <!--################ STRUCTURAL / WRAPPING CHECKS ################-->
        <!--##############################################################-->

        <!-- Require One top-level class per file -->
        <module name="OneTopLevelClass"/>

        <!-- Line-wrapping in import statements is forbidden. -->
        <module name="NoLineWrap"/>

        <!-- Any empty block forbidden. -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>

        <!-- Empty catch blocks are forbidden. -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected|ignore"/>
        </module>

        <!-- Require braces for all code blocks -->
        <module name="NeedBraces"/>

        <!-- Require One statement per line (e.g. no "a = b; c = d;") -->
        <module name="OneStatementPerLine"/>

        <!-- Multiple variable declarations on one line is forbidden. -->
        <module name="MultipleVariableDeclarations"/>

        <!-- Require switch statements to have default clause -->
        <module name="MissingSwitchDefault"/>

        <!--
        Case fall-through in switch statements is forbidden, except where an
        explicit "// fall-through" comment exists.
        -->
        <module name="FallThrough">
            <property name="reliefPattern" value="fall-through"/>
        </module>

        <!-- Require empty lines between definitions -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <!-- Wrap only permitted before dot, e.g.
        fluentInterface.doX()
          .doY()
          .doZ();
        -->
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>

        <!-- Wrap only permitted after comma, e.g.
        doThings(withA,
          withB,
          withC);
        -->
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>

        <!-- require line breaks before common binary operators -->
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>

        <!--
         Require that annotations on type, method and constructor definitions be on
         a separate line.
         -->
        <module name="AnnotationLocation">
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>

        <!-- Variable declarations may have annotations on the same line. -->
        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>

        <!-- Forbid empty statements -->
        <module name="EmptyStatement"/>

        <!--#################################################################-->
        <!--################ WHITESPACE / LINE LENGTH CHECKS ################-->
        <!--#################################################################-->

        <!-- Forbid whitespace after prefix unary operators and accessors -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
        </module>

        <!-- Forbid whitespace before comma, semi-colon, and postfix unary operators -->
        <module name="NoWhitespaceBefore"/>

        <!-- Require whitespace around common tokens (=, if, etc.) -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- Require standard whitespace around type parameters -->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- Require Mapbox standard indentation. -->
        <module name="Indentation">
            <property name="basicOffset" value="2"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="2"/>
            <property name="throwsIndent" value="2"/>
            <property name="lineWrappingIndentation" value="2"/>
            <property name="arrayInitIndent" value="2"/>
        </module>

        <!--
        Require that comments be placed at the same level of indentation as
        surrounding code.
        -->
        <module name="CommentsIndentation"/>

        <!-- 100 char per line max, unless unavoidable -->
        <module name="LineLength">
            <property name="max" value="120"/>
            <property name="ignorePattern"
                      value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>

        <!-- Checks for the placement of left curly braces ('{') for code blocks. -->
        <module name="LeftCurly"/>

        <!-- Checks the placement of right curly braces ('}') for if-else,
        try-catch-finally blocks, while-loops, for-loops, method definitions,
        class definitions, constructor definitions, instance and static
        initialization blocks.
        -->
        <module name="RightCurly"/>

        <!-- To configure the check with policy -->
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>

        <!-- Checks the padding between the identifier of a method definition,
        constructor definition, method call, or constructor invocation.
        -->
        <module name="MethodParamPad"/>

        <!--################################################-->
        <!--################ JAVADOC CHECKS ################-->
        <!--################################################-->

        <!--
        Require Javadoc for public methods:
        https://source.android.com/source/code-style.html#use-javadoc-standard-comments
        -->
        <!--<module name="JavadocMethod">-->
            <!--<property name="scope" value="public"/>-->

            <!--&lt;!&ndash; exception: property methods (getX, setX, isX) &ndash;&gt;-->
            <!--<property name="allowMissingPropertyJavadoc" value="true"/>-->

            <!--&lt;!&ndash; exception: method overrides, test methods &ndash;&gt;-->
            <!--<property name="allowedAnnotations" value="Override, Test, Before, After"/>-->

            <!--&lt;!&ndash; Require every method param to be documented &ndash;&gt;-->
            <!--<property name="allowMissingParamTags" value="false"/>-->

            <!--&lt;!&ndash;-->
            <!--The return value need not be documented. This is to avoid the need for-->
            <!--redundant descriptions between the main description and the return value-->
            <!--descriptions.-->
            <!--&ndash;&gt;-->
            <!--<property name="allowMissingReturnTag" value="true"/>-->
            <!--<property name="allowThrowsTagsForSubclasses" value="true"/>-->
            <!--<property name="suppressLoadErrors" value="true"/>-->
        <!--</module>-->

        <!-- Javadoc required for public fields (part of API) -->
        <!--<module name="JavadocVariable">-->
            <!--<property name="scope" value="public"/>-->
        <!--</module>-->

        <!-- Javadoc must be well-formed -->
        <!--<module name="JavadocStyle">-->
            <!--<property name="checkFirstSentence" value="true"/>-->
        <!--</module>-->

        <!--
        Require descriptions for all included @param / @return / @throws /
        @deprecated tags in Javadoc comments.
        -->
        <module name="NonEmptyAtclauseDescription"/>

        <!--
        Require 2-character indentation of @param / @return / @throws / @deprecated
        descriptions which span more than one line.
        -->
        <!--<module name="JavadocTagContinuationIndentation">-->
            <!--<property name="offset" value="2"/>-->
        <!--</module>-->

        <!--<module name="JavadocType">-->
            <!--<property name="scope" value="public"/>-->
        <!--</module>-->

        <!-- Require the @since tag to be on all public javadoc methods. -->
        <!--<module name="WriteTag">-->
            <!--<property name="tag" value="@since"/>-->
            <!--<property name="severity" value="warning"/>-->
            <!--<property name="tagSeverity" value="ignore"/>-->
        <!--</module>-->

        <!-- Forbid pointless Javadoc summary sentences. -->
        <!--<module name="SummaryJavadocCheck">-->
            <!--<property name="forbiddenSummaryFragments"-->
                      <!--value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>-->
        <!--</module>-->

        <!-- Require correct order of Javadoc comment tags. -->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>

        <!-- Single line Javadoc comments with a tag are forbidden. -->
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>

        <!--Check for stopship comments -->
        <!--<module name="TodoComment">-->
            <!--<property name="format" value="(STOPSHIP)"/>-->
        <!--</module>-->

        <!--&lt;!&ndash;Check for TODO comments &ndash;&gt;-->
        <!--<module name="TodoComment">-->
            <!--<property name="format" value="(TODO)|(FIXME)"/>-->
            <!--<property name="severity" value="warning"/>-->
        <!--</module>-->

        <!--Check for commented out code-->
        <module name="Regexp">
            <property name="format" value="^\s*//.*;\s*$"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Commented out code detected, remove it!"/>
        </module>

        <!--
        Require @deprecated Javadoc tag and @Deprecated annotation to be used
        together.
        -->
        <module name="MissingDeprecated"/>

        <!--#################################################################-->
        <!--################ MISC. LANGUAGE CHECKS ##########################-->
        <!--#################################################################-->

        <!-- Checks that system.out.println isn't being used properly -->
        <module name="Regexp">
            <property name="format" value="System\.out\.println"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!-- File name must correspond to contained class -->
        <module name="OuterTypeFilename"/>

        <!--
        Long constants must be suffixed with L:
        "The suffix L is preferred, because the letter l (ell) is often hard to
        distinguish from the digit 1 (one)."
        http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.1
        -->
        <module name="UpperEll"/>

        <!--
        Require modifier order consistent with recommends in JLS:
        http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html
        -->
        <module name="ModifierOrder"/>

        <!-- Finalizers are forbidden. -->
        <module name="NoFinalizer"/>

        <!-- overloaded methods must be grouped together -->
        <module name="OverloadMethodsDeclarationOrder"/>

        <!-- Require variables to be declared close to where they are used -->
        <module name="VariableDeclarationUsageDistance"/>

        <!-- Require that equals() and hashCode() are overridden together -->
        <module name="EqualsHashCode"/>

        <!-- Forbid assignments in expressions, with the exception of loop conditions -->
        <module name="InnerAssignment"/>

        <!-- Require @Override on overridden methods -->
        <module name="MissingOverride"/>

        <!-- Forbid arbitrarily nested blocks -->
        <module name="AvoidNestedBlocks"/>

        <!-- Forbid the use of arbitrary numeric literals -->
        <!--<module name="MagicNumber">-->
            <!--<property name="tokens" value="NUM_DOUBLE,NUM_FLOAT,NUM_LONG"/>-->
        <!--</module>-->

        <!-- Require boolean expressions to be simplifed -->
        <module name="SimplifyBooleanExpression"/>

        <!-- Require boolean returns to be simplified -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Forbid interfaces with no methods -->
        <module name="InterfaceIsType"/>

    </module>
</module>