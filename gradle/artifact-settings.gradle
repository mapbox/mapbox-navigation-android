ext {
    mapboxArtifactGroupId = 'com.mapbox.navigationcore'
    mapboxArtifactTitle = project.property('POM_ARTIFACT_TITLE')
    mapboxArtifactDescription = project.property('POM_DESCRIPTION')
    mapboxDeveloperName = 'Mapbox'
    mapboxDeveloperId = 'mapbox'
    mapboxArtifactUrl = 'https://github.com/mapbox/mapbox-navigation-android'
    mapboxArtifactVcsUrl = 'https://github.com/mapbox/mapbox-navigation-android.git'
    mapboxArtifactScmUrl = 'scm:git@github.com:mapbox/mapbox-navigation-android.git'
    mapboxArtifactLicenseName = 'Mapbox Terms of Service'
    mapboxArtifactLicenseUrl = 'https://www.mapbox.com/legal/tos/'
    snapshot = project.hasProperty("snapshot") ? project.property("snapshot").toBoolean() : false
    releaseTagPrefix = project.hasProperty('RELEASE_TAG_PREFIX') ? project.property('RELEASE_TAG_PREFIX') : 'mapbox-navigation-android_dash-core_'
    versionName = getVersionName()
        
    /**
     * Properties used for artifact publishing.
     *
     * The map consists of:
     * - Key: The name of the Gradle module from which the artifact is built.
     * - Value: A tuple with two elements:
     *     1. The artifact ID.
     *     2. The SDK name used in the SDK registry.
     */
    navSdkArtifactSettings = [
        'libnavigation-android' : new Tuple2('android', 'navigation-core-android'),
        'base' : new Tuple2('base', 'navigation-core-base'),
        'navigation' : new Tuple2('navigation', 'navigation-core-navigation'),
        'copilot' : new Tuple2('copilot', 'navigation-core-copilot'),
        'metrics' : new Tuple2('metrics', 'navigation-core-metrics'),
        'tripdata' : new Tuple2('tripdata', 'navigation-core-tripdata'),
        'utils' : new Tuple2('utils', 'navigation-core-utils'),
        'voice' : new Tuple2('voice', 'navigation-core-voice'),
        'navigator' : new Tuple2('navigator', 'navigation-core-navigator'),
        'ui-base' : new Tuple2('ui-base', 'navigation-core-ui-base'),
        'ui-maps' : new Tuple2('ui-maps', 'navigation-core-ui-maps'),
        'ui-utils' : new Tuple2('ui-utils', 'navigation-core-ui-utils'),
        'notification' : new Tuple2('notification', 'navigation-core-notification'),
        'search' : new Tuple2('search', 'navigation-core-search'),
        'ui-components' : new Tuple2('ui-components', 'navigation-core-ui-components'),
        'androidauto' : new Tuple2('android-auto-components', 'navigation-core-androidauto'),
        'libtesting-router' : new Tuple2('test-router', 'navigation-core-testing-router'),
        'libnavigation-custom-route' : new Tuple2('customroute', 'navigation-core-custom-route'),
        'datainputs' : new Tuple2('datainputs', 'navigation-core-datainputs'),
        'adasis' : new Tuple2('adasis', 'navigation-core-adasis'),
        'ev' : new Tuple2('ev', 'navigation-core-ev'),
        'ev-rangemap' : new Tuple2('ev-rangemap', 'navigation-core-ev-rangemap'),
        'ev-ui' : new Tuple2('ev-ui', 'navigation-core-ev-ui'),
        'weather' : new Tuple2('weather', 'navigation-core-weather'),
        'roadcam' : new Tuple2('roadcam', 'navigation-core-roadcam'),
        'roadcam-ui' : new Tuple2('roadcam-ui', 'navigation-core-roadcam-ui'),
        'libnavigation-compose' : new Tuple2('compose', 'navigation-core-compose'),
        'libnavigation-compose-core' : new Tuple2('compose-core', 'navigation-core-compose-core'),
        'libnavigation-compose-foundation' : new Tuple2('compose-foundation', 'navigation-core-compose-foundation'),
        'coordination' : new Tuple2('coordination', 'navigation-core-coordination'),
        'coordination-full-hd' : new Tuple2('coordination-full-hd', 'navigation-core-coordination-full-hd'),
        'core-mapgpt' : new Tuple2('core-mapgpt', 'navigation-core-mapgpt-core'),
        'ui-mapgpt' : new Tuple2('ui-mapgpt', 'navigation-core-mapgpt-ui'),
        'applemusic-mapgpt' : new Tuple2('applemusic-mapgpt', 'navigation-core-applemusic-mapgpt'),
    ]
}

def getVersionName() {
    if (project.hasProperty('VERSION_NAME')) {
      return project.property('VERSION_NAME')
    }
    def prefix = project.ext.releaseTagPrefix

    def process = new ProcessBuilder("git", "tag", "-l", "${prefix}*", "--sort=-creatordate")
            .redirectErrorStream(true)
            .start()

    def reader = new BufferedReader(new InputStreamReader(process.inputStream))
    def version = reader.lines().toArray().first()

    if (!version.isEmpty()) {
        version = version.substring(prefix.length())
    }
    return project.ext.snapshot ? getSnapshotVersion(version) : getReleaseVersion(version)
}

static def getReleaseVersion(String version) {
    if (version.isEmpty()) {
        return "1.0.0"
    } else {
        return version
    }
}

def getSnapshotVersion(String version) {
    if (version.isEmpty()) {
        return "1.0.0-SNAPSHOT"
    } else {
        def matcher = version =~ /(\d+)\.(\d+)\.(\d+.*)/
        def major = (matcher[0][1] as Integer)
        def isPreRelease
        def patch = 0
        try {
            patch = Integer.parseInt(matcher[0][3])
            isPreRelease = false
        } catch (NumberFormatException ignored) {
            isPreRelease = true
        }
        def minor = (matcher[0][2] as Integer)
        if (!isPreRelease) {
            minor += 1
        }
        def branch = System.getenv("CIRCLE_BRANCH")
        if (!branch || branch == "main" || branch ==~ /release_mapbox-navigation-android_.*/) {
            return "${major}.${minor}.${patch}-SNAPSHOT"
        } else {
            return "${major}.${minor}.${patch}-${branch}-SNAPSHOT"
        }
    }
}
