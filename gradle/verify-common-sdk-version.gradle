def navigatorModuleName = "libnavigator"
def moduleNames = ["libnavigation-core", navigatorModuleName]

task verifyCommonSdkVersion {
    moduleNames.each { moduleName ->
        dependsOn ":" + moduleName + ":generateDependencyReportFile"
    }
    doLast {
        def moduleDependencyMap = [:]
        moduleNames.each { moduleName ->
            String commonDependency = parseCommonLibDependency(moduleName)
            moduleDependencyMap[moduleName] = commonDependency
        }
        moduleNames.each { moduleName ->
            if (moduleName != navigatorModuleName
                    && moduleDependencyMap[moduleName] != moduleDependencyMap[navigatorModuleName]) {
                throw new GradleException(moduleName + " (" + moduleDependencyMap[moduleName] + ") " +
                        "and " + navigatorModuleName + " (" + moduleDependencyMap[navigatorModuleName] + ") " +
                        "have different versions of Common SDK library. " +
                        "Please align Common SDK version in both SDKs before push changes.")
            }
        }
        println("Common SDK versions are equal for Navigation SDK and for Navigation Native")
        println(moduleDependencyMap)
    }
}

allprojects.findAll {it.name in moduleNames}.each { p ->
    configure(p) {
        task generateDependencyReportFile(type: DependencyReportTask) {
            outputFile = file("build/reports/dependencies_report.txt")
        }
    }
}

static def parseCommonLibDependency(String moduleName) {
    File dependenciesFile = new File(moduleName + "/build/reports/dependencies_report.txt")
    int startSearchIndex = dependenciesFile.text.indexOf("releaseCompileClasspath")
    int firstIndexCommonLib = dependenciesFile.text.indexOf("com.mapbox.common:common:", startSearchIndex)
    int lastIndexCommonLib = Math.min(
            dependenciesFile.text.indexOf("\n", firstIndexCommonLib),
            dependenciesFile.text.indexOf(" ", firstIndexCommonLib)
    )
    String commonLibDependency = dependenciesFile.text.substring(firstIndexCommonLib, lastIndexCommonLib)
    return commonLibDependency
}