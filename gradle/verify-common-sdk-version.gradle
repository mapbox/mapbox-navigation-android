import java.util.regex.Matcher
import java.util.regex.Pattern

task generateDependencyReportFile(type: DependencyReportTask) {
    outputFile = file("build/reports/dependencies_report.txt")
}

/**
 * Task that verifies that Nav SDK and all transitive dependencies use the same major and minor versions of the Common SDK.
 * Different patch versions are allowed.
 */
task verifyCommonSdkVersion(dependsOn: generateDependencyReportFile) {
    doLast {
        File dependenciesFile = new File(projectDir.toString() + "/build/reports/dependencies_report.txt")
        // find main classpath
        int startIndex = dependenciesFile.text.indexOf("releaseCompileClasspath")
        // find the end of the classpath definition
        int lastIndex = dependenciesFile.text.indexOf("\n\n", startIndex)
        String dependenciesString = dependenciesFile.text.substring(startIndex, lastIndex)

        // find all Common SDK versions
        Set<String> commonVersions = new ArrayList<>()
        Pattern p = Pattern.compile("com.mapbox.common:common:\\d+\\.\\d+\\.[^\\s]+")
        Matcher m = p.matcher(dependenciesString)
        while (m.find()) {
            String[] elements = m.group().split(":")
            commonVersions.add(elements[elements.length - 1])
        }

        if (commonVersions.size() > 1) {
            // verify that major and minor versions are consistent
            String mismatchArea = null

            // splitting up each versioning component and counting distinct occurrences
            // example of versionComponents with mismatched MINOR version: [[21, 2, 0], [21, 1, 0]]
            String[][] versionComponents = commonVersions.stream().map({ it.split("\\.") }).toArray()
            if (Arrays.stream(versionComponents).map({ it[0] }).distinct().count() != 1) {
                mismatchArea = "MAJOR"
            } else if (Arrays.stream(versionComponents).map({ it[1] }).distinct().count() != 1) {
                mismatchArea = "MINOR"
            } else if (!Arrays.stream(versionComponents).allMatch({ it[2].matches("^\\d+") })) {
                // If there are more than one version of Common SDK, and any of them is a pre-release, we have no compatibility guarantees
                mismatchArea = "PRE-RELEASE"
            }

            if (mismatchArea != null) {
                println("Dependencies for " + project.toString() + ":")
                println(dependenciesString)
                throw new IllegalArgumentException(
                        mismatchArea + " Common SDK versions across dependencies are mismatched."
                                + " All projects should use the same major, minor, and pre-release versions of the Common SDK. Only mismatched patches of stable versions are allowed.\n"
                                + " Found versions: " + commonVersions
                )
            } else if (Arrays.stream(versionComponents).map({ it[2] }).distinct().count() != 1) {
                println(
                        "INFO: Common SDK versions across all dependencies use different patches (which is acceptable).\n"
                                + "Found versions: " + commonVersions
                )
            }
        } else {
            println(
                    "Common SDK version is consistent across all dependencies.\n"
                            + "Found version: " + commonVersions
            )
        }
    }
}