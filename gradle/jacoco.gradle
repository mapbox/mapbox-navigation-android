apply plugin: 'jacoco'

jacoco {
  toolVersion = pluginVersion.jacoco
}

android {
  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
    }
  }
}

project.afterEvaluate {
  //Gather build type and product flavor names in a list
  def buildTypes = android.buildTypes.collect { type -> type.name }
  def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
  if (!productFlavors) productFlavors.add('')

  productFlavors.each { productFlavorName ->
    buildTypes.each { buildTypeName ->

      //Define the sourceName and the sourcePath.
      def sourceName, sourcePath
      if (!productFlavorName) {
        sourceName = sourcePath = "${buildTypeName}"
      } else {
        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
        sourcePath = "${productFlavorName}/${buildTypeName}"
      }

      def testTaskName = "test${sourceName.capitalize()}UnitTest"

      //noinspection GroovyAssignabilityCheck
      task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

        group = "Reporting"
        description =
            "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

        //Directory where the compiled class files are
        classDirectories =
            fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                excludes: [
                    '**/R.class',
                    '**/R$*.class',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                    '**/*_Provide*Factory*.*',
                    '**/*$*$*.*' // Anonymous classes generated by kotlin
                ])

        sourceDirectories = files(["src/main/java",
                                   "src/$productFlavorName/java",
                                   "src/$buildTypeName/java"])

        executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

      }
    }
  }
}