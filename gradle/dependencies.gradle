ext {
  def kotlinVersion = "1.5.31"

  androidVersions = [
      minSdkVersion           : 21,
      targetSdkVersion        : 31,
      compileSdkVersion       : 31,
      carMinSdkVersion        : 23
  ]

  // Navigation Native CI can run SDK CI downstream with forced Navigation Native version
  // in this case `FORCE_MAPBOX_NAVIGATION_NATIVE_VERSION` environment variable will contain
  // version which we should use in this build
  def mapboxNavigatorVersion = System.getenv("FORCE_MAPBOX_NAVIGATION_NATIVE_VERSION")
  if (mapboxNavigatorVersion == null || mapboxNavigatorVersion == '') {
      mapboxNavigatorVersion = '99.0.0'
  }
  println("Navigation Native version: " + mapboxNavigatorVersion)

  version = [
      mapboxMapSdk              : '10.5.0',
      mapboxSdkServices         : '6.5.0-beta.5',
      mapboxEvents              : '8.1.1',
      mapboxCore                : '5.0.1',
      mapboxNavigator           : "${mapboxNavigatorVersion}",
      mapboxCommonNative        : '21.3.1',
      mapboxSearchSdk           : '1.0.0-beta.29',
      mapboxCrashMonitor        : '2.0.0',
      mapboxAnnotationPlugin    : '0.8.0',
      mapboxBaseAndroid         : '0.8.0',
      mapboxMapsAndroidAuto     : '0.1.0',
      androidXLifecycle         : '2.4.0',
      androidXCoreVersion       : '1.6.0',
      androidXArchCoreVersion   : '2.1.0',
      androidXAppCompatVersion  : '1.3.1',
      androidXPreferenceVersion : '1.1.0',
      androidXAnnotationVersion : '1.2.0',
      androidXFragmentVersion   : '1.4.0',
      androidXDataStore         : '1.0.0',
      cardViewVersion           : '1.0.0',
      recyclerViewVersion       : '1.1.0',
      materialDesignVersion     : '1.1.0',
      autoValue                 : '1.5.4',
      autoValueParcel           : '0.2.5',
      junit                     : '4.12',
      constraintLayout          : '1.1.3',
      mockito                   : '2.23.4',
      mockkVersion              : '1.12.1',
      leakCanaryVersion         : '2.7',
      commonsIO                 : '2.6',
      robolectric               : '4.7.3',
      mockwebserver             : '4.9.0',
      gmsLocation               : '17.0.0',
      ktlint                    : '0.45.2',
      kotlinStdLib              : kotlinVersion,
      firebaseCrashlytics       : '17.3.1',
      multidex                  : '2.0.1',
      json                      : '20180813',
      coroutinesAndroid         : '1.5.1',
      okhttp                    : '4.9.0',
      okio                      : '2.10.0',
      androidxTestJunit         : '1.1.3',
      androidxTest              : '1.4.0',
      barista                   : '4.2.0',
      svgParser                 : '1.4',
      androidStartup            : '1.0.0',
  ]
  dependenciesList = [
      // mapbox
      mapboxMapSdk              : "com.mapbox.maps:android:${version.mapboxMapSdk}",
      mapboxSdkServices         : "com.mapbox.mapboxsdk:mapbox-sdk-services:${version.mapboxSdkServices}",
      mapboxSdkServicesCore     : "com.mapbox.mapboxsdk:mapbox-sdk-core:${version.mapboxSdkServices}",
      mapboxSdkGeoJSON          : "com.mapbox.mapboxsdk:mapbox-sdk-geojson:${version.mapboxSdkServices}",
      mapboxSdkTurf             : "com.mapbox.mapboxsdk:mapbox-sdk-turf:${version.mapboxSdkServices}",
      mapboxSdkDirectionsModels : "com.mapbox.mapboxsdk:mapbox-sdk-directions-models:${version.mapboxSdkServices}",
      mapboxSdkRefreshModels    : "com.mapbox.mapboxsdk:mapbox-sdk-directions-refresh-models:${version.mapboxSdkServices}",
      mapboxEvents              : "com.mapbox.mapboxsdk:mapbox-android-telemetry:${version.mapboxEvents}",
      mapboxCore                : "com.mapbox.mapboxsdk:mapbox-android-core:${version.mapboxCore}",
      mapboxNavigator           : "com.mapbox.navigator:mapbox-navigation-native:${version.mapboxNavigator}",
      mapboxCommonNative        : "com.mapbox.common:common:${version.mapboxCommonNative}",
      mapboxSearchSdk           : "com.mapbox.search:mapbox-search-android:${version.mapboxSearchSdk}",

      /**
       * explicitly define Mapbox OkHttp dependency so that we are sure it's in sync with the Common SDK version we define
       * and we're not relying on Mapbox OKHttp coming in transitively
       */
      mapboxCommonOkHttp        : "com.mapbox.common:okhttp:${version.mapboxCommonNative}",
      mapboxAnnotationPlugin    : "com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:${version.mapboxAnnotationPlugin}",
      mapboxCrashMonitor        : "com.mapbox.crashmonitor:mapbox-crash-monitor-native:${version.mapboxCrashMonitor}",
      mapboxAnnotations         : "com.mapbox.base:annotations:${version.mapboxBaseAndroid}",
      mapboxAnnotationsProcessor: "com.mapbox.base:annotations-processor:${version.mapboxBaseAndroid}",
      mapboxAndroidCommon       : "com.mapbox.base:common:${version.mapboxBaseAndroid}",
      mapboxLogger              : "com.mapbox.common:logger:${version.mapboxBaseAndroid}",
      mapboxMapsAndroidAuto     : "com.mapbox.extension:maps-androidauto:${version.mapboxMapsAndroidAuto}",

      // Kotlin
      kotlinStdLib              : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${version.kotlinStdLib}",
      kotlinReflect             : "org.jetbrains.kotlin:kotlin-reflect:${version.kotlinStdLib}",

      // Coroutines and Channels
      coroutinesAndroid         : "org.jetbrains.kotlinx:kotlinx-coroutines-android:${version.coroutinesAndroid}",
      coroutinesTestAndroid     : "org.jetbrains.kotlinx:kotlinx-coroutines-test:${version.coroutinesAndroid}",
      coroutinesCore            : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${version.coroutinesAndroid}",

      // code style
      ktlint                    : "com.pinterest:ktlint:${version.ktlint}",

      // network
      okhttp                    : "com.squareup.okhttp3:okhttp:${version.okhttp}",
      okhttpInterceptor         : "com.squareup.okhttp3:logging-interceptor:${version.okhttp}",

      // I/O
      okio                      : "com.squareup.okio:okio:${version.okio}",

      // AutoValue
      autoValue                 : "com.google.auto.value:auto-value:${version.autoValue}",
      autoValuesParcel          : "com.ryanharter.auto.value:auto-value-parcel:${version.autoValueParcel}",
      autoValuesParcelAdapter   : "com.ryanharter.auto.value:auto-value-parcel-adapter:${version.autoValueParcel}",

      // support
      androidXAnnotation        : "androidx.annotation:annotation:${version.androidXAnnotationVersion}",
      androidXAppCompat         : "androidx.appcompat:appcompat:${version.androidXAppCompatVersion}",
      androidXCore              : "androidx.core:core:${version.androidXCoreVersion}",
      androidXCoreKtx           : "androidx.core:core-ktx:${version.androidXCoreVersion}",
      materialDesign            : "com.google.android.material:material:${version.materialDesignVersion}",
      androidXRecyclerView      : "androidx.recyclerview:recyclerview:${version.recyclerViewVersion}",
      androidXCardView          : "androidx.cardview:cardview:${version.cardViewVersion}",
      androidXConstraintLayout  : "androidx.constraintlayout:constraintlayout:${version.constraintLayout}",
      androidXPreference        : "androidx.preference:preference-ktx:${version.androidXPreferenceVersion}",
      androidStartup            : "androidx.startup:startup-runtime:${version.androidStartup}",
      androidXFragment          : "androidx.fragment:fragment-ktx:${version.androidXFragmentVersion}",
      androidXArchCoreTesting   : "androidx.arch.core:core-testing:${version.androidXArchCoreVersion}",
      androidXDataStore         : "androidx.datastore:datastore-preferences:${version.androidXDataStore}",

      // lifecycle
      androidXLifecycleRuntime  : "androidx.lifecycle:lifecycle-runtime-ktx:${version.androidXLifecycle}",
      androidXLifecycleLivedata : "androidx.lifecycle:lifecycle-livedata-ktx:${version.androidXLifecycle}",
      androidXLifecycleViewmodel: "androidx.lifecycle:lifecycle-viewmodel-ktx:${version.androidXLifecycle}",
      androidXLifecycleTesting  : "androidx.lifecycle:lifecycle-runtime-testing:${version.androidXLifecycle}",

      // square crew
      leakCanaryDebug           : "com.squareup.leakcanary:leakcanary-android:${version.leakCanaryVersion}",

      // instrumentation test
      testRunner                : "androidx.test:runner:${version.androidxTest}",
      testOrchestrator          : "androidx.test:orchestrator:${version.androidxTest}",
      testRules                 : "androidx.test:rules:${version.androidxTest}",
      androidxTestJunit         : "androidx.test.ext:junit:${version.androidxTestJunit}",
      barista                   : "com.adevinta.android:barista:${version.barista}",

      // unit test
      junit                     : "junit:junit:${version.junit}",
      mockito                   : "org.mockito:mockito-core:${version.mockito}",
      mockk                     : "io.mockk:mockk:${version.mockkVersion}",
      mockkAndroid              : "io.mockk:mockk-android:${version.mockkVersion}",
      commonsIO                 : "commons-io:commons-io:${version.commonsIO}",
      robolectric               : "org.robolectric:robolectric:${version.robolectric}",
      mockwebserver             : "com.squareup.okhttp3:mockwebserver:${version.mockwebserver}",
      json                      : "org.json:json:${version.json}",
      androidxTestCore          : "androidx.test:core:${version.androidxTest}",

      // play services
      gmsLocation               : "com.google.android.gms:play-services-location:${version.gmsLocation}",

      multidex                  : "androidx.multidex:multidex:${version.multidex}",

      svgParser                 : "com.caverock:androidsvg-aar:${version.svgParser}",

      // Test app crashlytics
      firebaseCrashlyticsNdk    : "com.google.firebase:firebase-crashlytics-ndk:${version.firebaseCrashlytics}"
  ]

  pluginVersion = [
      checkstyle           : '8.2',
      pmd                  : '5.8.1',
      gradle               : '7.0.4',
      dependencyGraph      : '0.5.0',
      dependencyUpdates    : '0.29.0',
      kotlin               : kotlinVersion,
      license              : '0.8.80',
      jacoco               : '0.2',
      googleServices       : '4.3.3',
      mapboxSdkVersions    : '1.1.3',
      dokka                : '1.4.20',
      mapboxSdkRegistry    : '0.7.0',
      mapboxAccessToken    : '0.2.1',
      mapboxNativeDownload : '0.2.2',
      firebaseCrashlytics  : '2.5.1'
  ]

  pluginDependencies = [
      gradle               : "com.android.tools.build:gradle:${pluginVersion.gradle}",
      kotlin               : "org.jetbrains.kotlin:kotlin-gradle-plugin:${pluginVersion.kotlin}",
      checkstyle           : "com.puppycrawl.tools:checkstyle:${pluginVersion.checkstyle}",
      license              : "com.jaredsburrows:gradle-license-plugin:${pluginVersion.license}",
      dependencyGraph      : "com.vanniktech:gradle-dependency-graph-generator-plugin:${pluginVersion.dependencyGraph}",
      dependencyUpdates    : "com.github.ben-manes:gradle-versions-plugin:${pluginVersion.dependencyUpdates}",
      jacoco               : "com.hiya:jacoco-android:${pluginVersion.jacoco}",
      googleServices       : "com.google.gms:google-services:${pluginVersion.googleServices}",
      mapboxSdkVersions    : "com.mapbox.mapboxsdk:mapbox-android-sdk-versions:${pluginVersion.mapboxSdkVersions}",
      dokka                : "org.jetbrains.dokka:dokka-gradle-plugin:${pluginVersion.dokka}",
      mapboxSdkRegistry    : "com.mapbox.gradle.plugins:sdk-registry:${pluginVersion.mapboxSdkRegistry}",
      mapboxAccessToken    : "com.mapbox.gradle.plugins:access-token:${pluginVersion.mapboxAccessToken}",
      mapboxNativeDownload : "com.mapbox.gradle.plugins:native-download:${pluginVersion.mapboxNativeDownload}",
      firebaseCrashlytics  : "com.google.firebase:firebase-crashlytics-gradle:${pluginVersion.firebaseCrashlytics}"
  ]
}
