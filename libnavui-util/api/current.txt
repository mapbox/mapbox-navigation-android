// Signature format: 3.0
package com.mapbox.navigation.ui.utils.resource {

  public interface ResourceLoadCallback extends com.mapbox.navigation.ui.utils.resource.ResourceLoadObserver {
  }

  public interface ResourceLoadObserver {
    method public void onFinish(com.mapbox.navigation.ui.utils.resource.ResourceLoadRequest request, com.mapbox.bindgen.Expected<com.mapbox.common.ResourceLoadError,com.mapbox.common.ResourceLoadResult> result);
    method public void onProgress(com.mapbox.navigation.ui.utils.resource.ResourceLoadRequest request, com.mapbox.common.ResourceLoadProgress progress);
    method public void onStart(com.mapbox.navigation.ui.utils.resource.ResourceLoadRequest request);
  }

  public final class ResourceLoadRequest {
    ctor public ResourceLoadRequest(String url);
    method public com.mapbox.common.ResourceLoadFlags getFlags();
    method public com.mapbox.common.NetworkRestriction getNetworkRestriction();
    method public String getUrl();
    method public void setFlags(com.mapbox.common.ResourceLoadFlags p);
    method public void setNetworkRestriction(com.mapbox.common.NetworkRestriction p);
    property public final com.mapbox.common.ResourceLoadFlags flags;
    property public final com.mapbox.common.NetworkRestriction networkRestriction;
    property public final String url;
  }

  public abstract class ResourceLoader {
    ctor public ResourceLoader();
    method public abstract void cancel(long requestId);
    method public abstract long load(com.mapbox.navigation.ui.utils.resource.ResourceLoadRequest request, com.mapbox.navigation.ui.utils.resource.ResourceLoadCallback callback);
    method public abstract void registerObserver(com.mapbox.navigation.ui.utils.resource.ResourceLoadObserver observer);
    method public abstract void unregisterObserver(com.mapbox.navigation.ui.utils.resource.ResourceLoadObserver observer);
  }

  public final class ResourceLoaderExtensionsKt {
    method public static long load(com.mapbox.navigation.ui.utils.resource.ResourceLoader, com.mapbox.navigation.ui.utils.resource.ResourceLoadRequest request, kotlin.jvm.functions.Function1<? super com.mapbox.bindgen.Expected<com.mapbox.common.ResourceLoadError,com.mapbox.common.ResourceLoadResult>,kotlin.Unit> onFinished);
    method public static suspend Object? load(com.mapbox.navigation.ui.utils.resource.ResourceLoader, com.mapbox.navigation.ui.utils.resource.ResourceLoadRequest request, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.common.ResourceLoadError,com.mapbox.common.ResourceLoadResult>> p);
  }

  public final class ResourceLoaderFactory {
    method public com.mapbox.navigation.ui.utils.resource.ResourceLoader getInstance();
    field public static final com.mapbox.navigation.ui.utils.resource.ResourceLoaderFactory INSTANCE;
  }

}

