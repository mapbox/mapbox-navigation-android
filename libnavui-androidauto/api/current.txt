// Signature format: 3.0
package com.mapbox.androidauto {

  public final class MapboxCarApp {
    method public com.mapbox.androidauto.navigation.location.CarAppLocation carAppLocationService();
    method @UiThread public void setup();
    field public static final com.mapbox.androidauto.MapboxCarApp INSTANCE;
  }

  public final class MapboxCarNavigationManager implements com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver {
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getAutoDriveEnabledFlow();
    method public void onAttached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public void onDetached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    property public final kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> autoDriveEnabledFlow;
  }

}

package com.mapbox.androidauto.car {

  public final class FreeDriveActionStrip {
    ctor public FreeDriveActionStrip(androidx.car.app.Screen screen);
    method public androidx.car.app.model.ActionStrip.Builder builder();
  }

  public final class FreeDriveCarScreen extends androidx.car.app.Screen {
    ctor @UiThread public FreeDriveCarScreen(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public com.mapbox.androidauto.car.location.CarLocationRenderer getCarLocationRenderer();
    method public com.mapbox.androidauto.car.navigation.CarNavigationCamera getCarNavigationCamera();
    method public com.mapbox.androidauto.car.preview.CarRouteLine getCarRouteLine();
    method public com.mapbox.androidauto.car.navigation.speedlimit.CarSpeedLimitRenderer getCarSpeedLimitRenderer();
    method public androidx.car.app.model.Template onGetTemplate();
    property public final com.mapbox.androidauto.car.location.CarLocationRenderer carLocationRenderer;
    property public final com.mapbox.androidauto.car.navigation.CarNavigationCamera carNavigationCamera;
    property public final com.mapbox.androidauto.car.preview.CarRouteLine carRouteLine;
    property public final com.mapbox.androidauto.car.navigation.speedlimit.CarSpeedLimitRenderer carSpeedLimitRenderer;
  }

  public final class MainMapActionStrip {
    ctor public MainMapActionStrip(androidx.car.app.Screen screen, com.mapbox.androidauto.car.navigation.CarNavigationCamera carNavigationCamera);
    method public androidx.car.app.model.ActionStrip build();
  }

  public final class MapboxCarContext {
    ctor public MapboxCarContext(androidx.lifecycle.Lifecycle lifecycle, com.mapbox.maps.extension.androidauto.MapboxCarMap mapboxCarMap);
    method public com.mapbox.androidauto.car.MapboxCarContext customize(kotlin.jvm.functions.Function1<? super com.mapbox.androidauto.car.MapboxCarOptionsCustomization,kotlin.Unit> action);
    method public androidx.car.app.CarContext getCarContext();
    method public androidx.lifecycle.Lifecycle getLifecycle();
    method public com.mapbox.maps.extension.androidauto.MapboxCarMap getMapboxCarMap();
    method public com.mapbox.androidauto.car.settings.MapboxCarStorage getMapboxCarStorage();
    method public com.mapbox.androidauto.MapboxCarNavigationManager getMapboxNavigationManager();
    method public com.mapbox.androidauto.screenmanager.MapboxScreenManager getMapboxScreenManager();
    method public com.mapbox.androidauto.car.MapboxCarOptions getOptions();
    method public com.mapbox.androidauto.car.preview.CarRoutePreviewRequest getRoutePreviewRequest();
    property public final androidx.car.app.CarContext carContext;
    property public final androidx.lifecycle.Lifecycle lifecycle;
    property public final com.mapbox.maps.extension.androidauto.MapboxCarMap mapboxCarMap;
    property public final com.mapbox.androidauto.car.settings.MapboxCarStorage mapboxCarStorage;
    property public final com.mapbox.androidauto.MapboxCarNavigationManager mapboxNavigationManager;
    property public final com.mapbox.androidauto.screenmanager.MapboxScreenManager mapboxScreenManager;
    property public final com.mapbox.androidauto.car.MapboxCarOptions options;
    property public final com.mapbox.androidauto.car.preview.CarRoutePreviewRequest routePreviewRequest;
  }

  public final class MapboxCarOptions {
    ctor public MapboxCarOptions();
    method public void applyCustomization(com.mapbox.androidauto.car.MapboxCarOptionsCustomization customization);
    method public com.mapbox.androidauto.car.feedback.core.CarFeedbackOptions getCarFeedbackOptions();
    method public com.mapbox.androidauto.car.search.CarPlaceSearchOptions getCarPlaceSearchOptions();
    method public com.mapbox.androidauto.car.feedback.core.CarFeedbackPollProvider getFeedbackPollProvider();
    method public com.mapbox.androidauto.notification.MapboxCarNotificationOptions getNotificationOptions();
    method public com.mapbox.androidauto.car.preview.CarRouteOptionsInterceptor getRouteOptionsInterceptor();
    method public kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.navigation.speedlimit.SpeedLimitOptions> getSpeedLimitOptions();
    property public final com.mapbox.androidauto.car.feedback.core.CarFeedbackOptions carFeedbackOptions;
    property public final com.mapbox.androidauto.car.search.CarPlaceSearchOptions carPlaceSearchOptions;
    property public final com.mapbox.androidauto.car.feedback.core.CarFeedbackPollProvider feedbackPollProvider;
    property public final com.mapbox.androidauto.notification.MapboxCarNotificationOptions notificationOptions;
    property public final com.mapbox.androidauto.car.preview.CarRouteOptionsInterceptor routeOptionsInterceptor;
    property public final kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.navigation.speedlimit.SpeedLimitOptions> speedLimitOptions;
  }

  public final class MapboxCarOptionsCustomization {
    ctor public MapboxCarOptionsCustomization();
    method public com.mapbox.androidauto.car.feedback.core.CarFeedbackOptions? getCarFeedbackOptions();
    method public com.mapbox.androidauto.car.feedback.core.CarFeedbackPollProvider? getFeedbackPollProvider();
    method public com.mapbox.androidauto.notification.MapboxCarNotificationOptions? getNotificationOptions();
    method public com.mapbox.androidauto.car.search.CarPlaceSearchOptions? getPlaceSearchOptions();
    method public com.mapbox.androidauto.car.preview.CarRouteOptionsInterceptor? getRouteOptionsInterceptor();
    method public com.mapbox.androidauto.car.navigation.speedlimit.SpeedLimitOptions? getSpeedLimitOptions();
    method public void setCarFeedbackOptions(com.mapbox.androidauto.car.feedback.core.CarFeedbackOptions?);
    method public void setFeedbackPollProvider(com.mapbox.androidauto.car.feedback.core.CarFeedbackPollProvider?);
    method public void setNotificationOptions(com.mapbox.androidauto.notification.MapboxCarNotificationOptions?);
    method public void setPlaceSearchOptions(com.mapbox.androidauto.car.search.CarPlaceSearchOptions?);
    method public void setRouteOptionsInterceptor(com.mapbox.androidauto.car.preview.CarRouteOptionsInterceptor?);
    method public void setSpeedLimitOptions(com.mapbox.androidauto.car.navigation.speedlimit.SpeedLimitOptions?);
    property public final com.mapbox.androidauto.car.feedback.core.CarFeedbackOptions? carFeedbackOptions;
    property public final com.mapbox.androidauto.car.feedback.core.CarFeedbackPollProvider? feedbackPollProvider;
    property public final com.mapbox.androidauto.notification.MapboxCarNotificationOptions? notificationOptions;
    property public final com.mapbox.androidauto.car.search.CarPlaceSearchOptions? placeSearchOptions;
    property public final com.mapbox.androidauto.car.preview.CarRouteOptionsInterceptor? routeOptionsInterceptor;
    property public final com.mapbox.androidauto.car.navigation.speedlimit.SpeedLimitOptions? speedLimitOptions;
  }

}

package com.mapbox.androidauto.car.action {

  public fun interface MapboxActionProvider {
    method public androidx.car.app.model.Action getAction(androidx.car.app.Screen screen);
  }

}

package com.mapbox.androidauto.car.feedback.core {

  public final class CarFeedbackOptions {
    method public com.mapbox.navigation.core.telemetry.events.BitmapEncodeOptions getBitmapEncodeOptions();
    property public final com.mapbox.navigation.core.telemetry.events.BitmapEncodeOptions bitmapEncodeOptions;
  }

  public static final class CarFeedbackOptions.Builder {
    ctor public CarFeedbackOptions.Builder();
    method public com.mapbox.androidauto.car.feedback.core.CarFeedbackOptions build();
  }

  public class CarFeedbackPollProvider {
    ctor public CarFeedbackPollProvider();
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getActiveGuidanceFeedbackPoll(androidx.car.app.CarContext carContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getArrivalFeedbackPoll(androidx.car.app.CarContext carContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getFreeDriveFeedbackPoll(androidx.car.app.CarContext carContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getRoutePreviewFeedbackPoll(androidx.car.app.CarContext carContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getSearchFeedbackPoll(androidx.car.app.CarContext carContext);
  }

  public abstract class CarFeedbackScreenFactory implements com.mapbox.androidauto.screenmanager.MapboxScreenFactory {
    ctor public CarFeedbackScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
    method public abstract com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getCarFeedbackPoll(androidx.car.app.CarContext carContext);
    method public abstract String getSourceName();
    method public void onFinish();
  }

}

package com.mapbox.androidauto.car.feedback.ui {

  public final class CarFeedbackAction implements com.mapbox.androidauto.car.action.MapboxActionProvider {
    ctor public CarFeedbackAction(String carFeedbackScreen);
    method public androidx.car.app.model.Action getAction(androidx.car.app.Screen screen);
  }

  public abstract sealed class CarFeedbackIcon {
  }

  public static final class CarFeedbackIcon.Local extends com.mapbox.androidauto.car.feedback.ui.CarFeedbackIcon {
    ctor public CarFeedbackIcon.Local(androidx.car.app.model.CarIcon icon);
    method public androidx.car.app.model.CarIcon component1();
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackIcon.Local copy(androidx.car.app.model.CarIcon icon);
    method public androidx.car.app.model.CarIcon getIcon();
    property public final androidx.car.app.model.CarIcon icon;
  }

  public static final class CarFeedbackIcon.Remote extends com.mapbox.androidauto.car.feedback.ui.CarFeedbackIcon {
    ctor public CarFeedbackIcon.Remote(android.net.Uri uri);
    method public android.net.Uri component1();
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackIcon.Remote copy(android.net.Uri uri);
    method public android.net.Uri getUri();
    property public final android.net.Uri uri;
  }

  public final class CarFeedbackOption {
    ctor public CarFeedbackOption(String title, com.mapbox.androidauto.car.feedback.ui.CarFeedbackIcon icon, String? type = null, java.util.List<java.lang.String>? subType = null, String? searchFeedbackReason = null, String? favoritesFeedbackReason = null, com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll? nextPoll = null);
    method public String component1();
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackIcon component2();
    method public String? component3();
    method public java.util.List<java.lang.String>? component4();
    method public String? component5();
    method public String? component6();
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll? component7();
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackOption copy(String title, com.mapbox.androidauto.car.feedback.ui.CarFeedbackIcon icon, String? type, java.util.List<java.lang.String>? subType, String? searchFeedbackReason, String? favoritesFeedbackReason, com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll? nextPoll);
    method public String? getFavoritesFeedbackReason();
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackIcon getIcon();
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll? getNextPoll();
    method public String? getSearchFeedbackReason();
    method public java.util.List<java.lang.String>? getSubType();
    method public String getTitle();
    method public String? getType();
    property public final String? favoritesFeedbackReason;
    property public final com.mapbox.androidauto.car.feedback.ui.CarFeedbackIcon icon;
    property public final com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll? nextPoll;
    property public final String? searchFeedbackReason;
    property public final java.util.List<java.lang.String>? subType;
    property public final String title;
    property public final String? type;
  }

  public final class CarFeedbackPoll {
    ctor public CarFeedbackPoll(String title, java.util.List<com.mapbox.androidauto.car.feedback.ui.CarFeedbackOption> options);
    method public String component1();
    method public java.util.List<com.mapbox.androidauto.car.feedback.ui.CarFeedbackOption> component2();
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll copy(String title, java.util.List<com.mapbox.androidauto.car.feedback.ui.CarFeedbackOption> options);
    method public java.util.List<com.mapbox.androidauto.car.feedback.ui.CarFeedbackOption> getOptions();
    method public String getTitle();
    property public final java.util.List<com.mapbox.androidauto.car.feedback.ui.CarFeedbackOption> options;
    property public final String title;
  }

}

package com.mapbox.androidauto.car.location {

  public final class CarLocationPuck {
    method public com.mapbox.maps.plugin.LocationPuck2D navigationPuck2D(android.content.Context context);
    field public static final com.mapbox.androidauto.car.location.CarLocationPuck INSTANCE;
  }

  public final class CarLocationRenderer implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarLocationRenderer();
  }

}

package com.mapbox.androidauto.car.map.widgets.compass {

  public final class CarCompassSurfaceRenderer implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarCompassSurfaceRenderer();
  }

}

package com.mapbox.androidauto.car.map.widgets.logo {

  public final class CarLogoSurfaceRenderer implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarLogoSurfaceRenderer();
  }

}

package com.mapbox.androidauto.car.navigation {

  public final class CarActiveGuidanceMarkers implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarActiveGuidanceMarkers();
  }

  public final class CarArrivalTrigger implements com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver {
    ctor public CarArrivalTrigger();
    method public void onAttached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public void onDetached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public void triggerArrival();
  }

  public enum CarCameraMode {
    enum_constant public static final com.mapbox.androidauto.car.navigation.CarCameraMode FOLLOWING;
    enum_constant public static final com.mapbox.androidauto.car.navigation.CarCameraMode IDLE;
    enum_constant public static final com.mapbox.androidauto.car.navigation.CarCameraMode OVERVIEW;
  }

  public final class CarDistanceFormatter {
    method public static androidx.car.app.model.Distance carDistance(double distanceMeters);
    method public static android.text.SpannableString formatDistance(double distance);
    field public static final com.mapbox.androidauto.car.navigation.CarDistanceFormatter INSTANCE;
  }

  public final class CarLocationsOverviewCamera implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarLocationsOverviewCamera(com.mapbox.maps.CameraOptions initialCameraOptions = CameraOptions.<init>().zoom(DEFAULT_INITIAL_ZOOM).build());
    method @UiThread public void updateWithLocations(java.util.List<com.mapbox.geojson.Point> points);
    field public static final double DEFAULT_INITIAL_ZOOM = 15.0;
  }

  @UiThread public final class CarNavigationCamera implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarNavigationCamera(com.mapbox.androidauto.car.navigation.CarCameraMode initialCarCameraMode, com.mapbox.androidauto.car.navigation.CarCameraMode? alternativeCarCameraMode, com.mapbox.androidauto.car.routes.CarRoutesProvider carRoutesProvider = com.mapbox.androidauto.car.routes.NavigationCarRoutesProvider(), com.mapbox.maps.CameraOptions? initialCameraOptions = CameraOptions.<init>().zoom(DEFAULT_INITIAL_ZOOM).build());
    method public boolean followingZoomUpdatesAllowed();
    method public com.mapbox.maps.extension.androidauto.DefaultMapboxCarMapGestureHandler getGestureHandler();
    method public kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.navigation.CarCameraMode> getNextCameraMode();
    method public void updateCameraMode(com.mapbox.androidauto.car.navigation.CarCameraMode carCameraMode);
    method public void zoomInAction();
    method public void zoomOutAction();
    method public void zoomUpdatesAllowed(boolean allowed);
    property public final com.mapbox.maps.extension.androidauto.DefaultMapboxCarMapGestureHandler gestureHandler;
    property public final kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.navigation.CarCameraMode> nextCameraMode;
  }

  public final class CarNavigationCameraKt {
  }

  public final class CarNavigationEtaMapper {
    ctor public CarNavigationEtaMapper(com.mapbox.navigation.ui.tripprogress.api.MapboxTripProgressApi tripProgressApi);
    method public androidx.car.app.navigation.model.TravelEstimate getDestinationTravelEstimate(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
  }

  public final class CarNavigationInfo {
    method public androidx.car.app.navigation.model.TravelEstimate? getDestinationTravelEstimate();
    method public androidx.car.app.navigation.model.NavigationTemplate.NavigationInfo? getNavigationInfo();
    property public final androidx.car.app.navigation.model.TravelEstimate? destinationTravelEstimate;
    property public final androidx.car.app.navigation.model.NavigationTemplate.NavigationInfo? navigationInfo;
  }

  public final class CarNavigationInfoMapper {
    ctor public CarNavigationInfoMapper(android.content.Context context, com.mapbox.androidauto.car.navigation.maneuver.CarManeuverInstructionRenderer carManeuverInstructionRenderer, com.mapbox.androidauto.car.navigation.maneuver.CarManeuverIconRenderer carManeuverIconRenderer, com.mapbox.androidauto.car.navigation.lanes.CarLanesImageRenderer carLanesImageGenerator);
    method public androidx.car.app.navigation.model.NavigationTemplate.NavigationInfo? mapNavigationInfo(com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maneuver.model.ManeuverError,java.util.List<com.mapbox.navigation.ui.maneuver.model.Maneuver>> expectedManeuvers, java.util.List<? extends com.mapbox.navigation.ui.shield.model.RouteShield> routeShields, com.mapbox.navigation.base.trip.model.RouteProgress routeProgress);
  }

  @com.mapbox.maps.MapboxExperimental public final class CarNavigationInfoProvider implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarNavigationInfoProvider();
    method public kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.navigation.CarNavigationInfo> getCarNavigationInfo();
    method public com.mapbox.androidauto.car.navigation.CarNavigationInfoProvider invalidateOnChange(androidx.car.app.Screen screen);
    method public androidx.car.app.navigation.model.NavigationTemplate.Builder setNavigationInfo(androidx.car.app.navigation.model.NavigationTemplate.Builder builder);
    property public final kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.navigation.CarNavigationInfo> carNavigationInfo;
  }

  public final class MapUserStyleObserver implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public MapUserStyleObserver();
    method public String getStyleId();
    method public String getUserId();
    method public void setStyleId(String);
    method public void setUserId(String);
    property public final String styleId;
    property public final String userId;
  }

}

package com.mapbox.androidauto.car.navigation.lanes {

  public final class CarLaneIcon {
    ctor public CarLaneIcon(com.mapbox.navigation.ui.maneuver.model.LaneIcon laneIcon, boolean isActive);
    method public com.mapbox.navigation.ui.maneuver.model.LaneIcon component1();
    method public boolean component2();
    method public com.mapbox.androidauto.car.navigation.lanes.CarLaneIcon copy(com.mapbox.navigation.ui.maneuver.model.LaneIcon laneIcon, boolean isActive);
    method public com.mapbox.navigation.ui.maneuver.model.LaneIcon getLaneIcon();
    method public boolean isActive();
    property public final boolean isActive;
    property public final com.mapbox.navigation.ui.maneuver.model.LaneIcon laneIcon;
  }

  public final class CarLaneIconOptions {
    method public android.content.res.Resources.Theme getActiveTheme();
    method public android.content.res.Resources.Theme getNotActiveTheme();
    method public com.mapbox.androidauto.car.navigation.lanes.CarLaneIconOptions.Builder toBuilder();
    property public final android.content.res.Resources.Theme activeTheme;
    property public final android.content.res.Resources.Theme notActiveTheme;
  }

  public static final class CarLaneIconOptions.Builder {
    ctor public CarLaneIconOptions.Builder();
    method public com.mapbox.androidauto.car.navigation.lanes.CarLaneIconOptions.Builder activeTheme(android.content.res.Resources.Theme activeTheme);
    method public com.mapbox.androidauto.car.navigation.lanes.CarLaneIconOptions build(android.content.Context? context = null);
    method public com.mapbox.androidauto.car.navigation.lanes.CarLaneIconOptions.Builder notActiveTheme(android.content.res.Resources.Theme notActiveTheme);
  }

  public final class CarLanesImage {
    method public androidx.car.app.model.CarIcon getCarIcon();
    method public java.util.List<androidx.car.app.navigation.model.Lane> getLanes();
    property public final androidx.car.app.model.CarIcon carIcon;
    property public final java.util.List<androidx.car.app.navigation.model.Lane> lanes;
  }

  public final class CarLanesImageRenderer {
    ctor public CarLanesImageRenderer(android.content.Context context, @ColorInt int background = 0, com.mapbox.androidauto.car.navigation.lanes.CarLaneIconOptions options = CarLaneIconOptions.<init>().build(context));
    method public int getBackground();
    method public com.mapbox.androidauto.car.navigation.lanes.CarLaneIconOptions getOptions();
    method public com.mapbox.androidauto.car.navigation.lanes.CarLanesImage? renderLanesImage(com.mapbox.navigation.ui.maneuver.model.Lane? lane);
    property public final int background;
    property public final com.mapbox.androidauto.car.navigation.lanes.CarLaneIconOptions options;
  }

  public final class CarLanesImageRendererKt {
    method public static androidx.car.app.navigation.model.Step.Builder useMapboxLaneGuidance(androidx.car.app.navigation.model.Step.Builder, com.mapbox.androidauto.car.navigation.lanes.CarLanesImageRenderer imageGenerator, com.mapbox.navigation.ui.maneuver.model.Lane? laneGuidance);
  }

}

package com.mapbox.androidauto.car.navigation.maneuver {

  public final class CarManeuverIconOptions {
    method public int getBackground();
    method public android.content.Context getContext();
    method public int getStyleRes();
    method public com.mapbox.androidauto.car.navigation.maneuver.CarManeuverIconOptions.Builder toBuilder();
    property public final int background;
    property public final android.content.Context context;
    property public final int styleRes;
  }

  public static final class CarManeuverIconOptions.Builder {
    ctor public CarManeuverIconOptions.Builder(android.content.Context context);
    method public com.mapbox.androidauto.car.navigation.maneuver.CarManeuverIconOptions.Builder background(@ColorInt int background);
    method public com.mapbox.androidauto.car.navigation.maneuver.CarManeuverIconOptions build();
    method public com.mapbox.androidauto.car.navigation.maneuver.CarManeuverIconOptions.Builder styleRes(@StyleRes Integer? styleRes);
  }

  public final class CarManeuverIconRenderer {
    ctor public CarManeuverIconRenderer(com.mapbox.androidauto.car.navigation.maneuver.CarManeuverIconOptions options);
    method public androidx.car.app.model.CarIcon? renderManeuverIcon(com.mapbox.navigation.ui.maneuver.model.PrimaryManeuver maneuver);
    method public androidx.car.app.model.CarIcon? renderManeuverIcon(com.mapbox.navigation.ui.maneuver.model.SubManeuver maneuver);
  }

  public final class CarManeuverInstructionRenderer {
    ctor public CarManeuverInstructionRenderer();
    method public CharSequence renderInstruction(java.util.List<com.mapbox.navigation.ui.maneuver.model.Component> maneuver, java.util.List<? extends com.mapbox.navigation.ui.shield.model.RouteShield> shields, com.mapbox.navigation.ui.maneuver.view.MapboxExitText exitView, String? modifier, int desiredHeight);
  }

  public final class CarManeuverMapper {
    method public androidx.car.app.navigation.model.Trip from(com.mapbox.navigation.base.trip.model.RouteProgress routeProgress, com.mapbox.navigation.ui.maneuver.api.MapboxManeuverApi maneuverApi);
    method public androidx.car.app.navigation.model.Maneuver.Builder from(com.mapbox.bindgen.Expected<com.mapbox.navigation.ui.maneuver.model.ManeuverError,java.util.List<com.mapbox.navigation.ui.maneuver.model.Maneuver>> expected);
    method public androidx.car.app.navigation.model.Maneuver.Builder from(String? maneuverType, String? maneuverModifier, Double? degrees = null);
    field public static final com.mapbox.androidauto.car.navigation.maneuver.CarManeuverMapper INSTANCE;
  }

}

package com.mapbox.androidauto.car.navigation.roadlabel {

  public final class RoadLabelOptions {
    method public int getBackgroundColor();
    method public int getRoundedLabelColor();
    method public Integer? getShadowColor();
    method public int getTextColor();
    method public com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions.Builder toBuilder();
    property public final int backgroundColor;
    property public final int roundedLabelColor;
    property public final Integer? shadowColor;
    property public final int textColor;
    field public static final com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions.Companion Companion;
  }

  public static final class RoadLabelOptions.Builder {
    ctor public RoadLabelOptions.Builder();
    method public com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions.Builder backgroundColor(@ColorInt int backgroundColor);
    method public com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions build();
    method public com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions.Builder roundedLabelColor(@ColorInt int roundedLabelColor);
    method public com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions.Builder shadowColor(@ColorInt Integer? shadowColor);
    method public com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions.Builder textColor(@ColorInt int textColor);
  }

  public static final class RoadLabelOptions.Companion {
    method public com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions getDefault();
    property public final com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions default;
  }

  public final class RoadLabelRenderer {
    ctor public RoadLabelRenderer(android.content.res.Resources resources);
    method public android.graphics.Bitmap? render(java.util.List<com.mapbox.navigation.base.road.model.RoadComponent> road, java.util.List<? extends com.mapbox.navigation.ui.shield.model.RouteShield> shields, com.mapbox.androidauto.car.navigation.roadlabel.RoadLabelOptions options = RoadLabelOptions.default);
  }

  public final class RoadLabelSurfaceLayer extends com.mapbox.androidauto.surfacelayer.CarSurfaceLayer {
    ctor public RoadLabelSurfaceLayer(androidx.car.app.CarContext carContext);
    method public java.util.List<com.mapbox.androidauto.surfacelayer.textview.CarScene2d> children();
    method public androidx.car.app.CarContext getCarContext();
    property public final androidx.car.app.CarContext carContext;
  }

  public abstract class RoadNameObserver implements com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver {
    ctor public RoadNameObserver(com.mapbox.navigation.ui.shield.api.MapboxRouteShieldApi routeShieldApi, com.mapbox.androidauto.car.navigation.MapUserStyleObserver mapUserStyleObserver);
    method public final java.util.List<com.mapbox.navigation.base.road.model.RoadComponent> getCurrentRoad();
    method public final java.util.List<com.mapbox.navigation.ui.shield.model.RouteShield> getCurrentShields();
    method public final void onAttached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public final void onDetached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public abstract void onRoadUpdate(java.util.List<com.mapbox.navigation.base.road.model.RoadComponent> road, java.util.List<? extends com.mapbox.navigation.ui.shield.model.RouteShield> shields);
    method public final void setCurrentRoad(java.util.List<com.mapbox.navigation.base.road.model.RoadComponent>);
    method public final void setCurrentShields(java.util.List<? extends com.mapbox.navigation.ui.shield.model.RouteShield>);
    property public final java.util.List<com.mapbox.navigation.base.road.model.RoadComponent> currentRoad;
    property public final java.util.List<com.mapbox.navigation.ui.shield.model.RouteShield> currentShields;
  }

}

package com.mapbox.androidauto.car.navigation.speedlimit {

  public final class CarSpeedLimitRenderer implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarSpeedLimitRenderer(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
  }

  public final class SpeedLimitOptions {
    method public com.mapbox.navigation.base.speed.model.SpeedLimitSign? getForcedSignFormat();
    method public int getWarningThreshold();
    method public com.mapbox.androidauto.car.navigation.speedlimit.SpeedLimitOptions.Builder toBuilder();
    property public final com.mapbox.navigation.base.speed.model.SpeedLimitSign? forcedSignFormat;
    property public final int warningThreshold;
  }

  public static final class SpeedLimitOptions.Builder {
    ctor public SpeedLimitOptions.Builder();
    method public com.mapbox.androidauto.car.navigation.speedlimit.SpeedLimitOptions build();
    method public com.mapbox.androidauto.car.navigation.speedlimit.SpeedLimitOptions.Builder forcedSignFormat(com.mapbox.navigation.base.speed.model.SpeedLimitSign? forcedSignFormat);
    method public com.mapbox.androidauto.car.navigation.speedlimit.SpeedLimitOptions.Builder warningThreshold(int warningThreshold);
  }

  public final class SpeedLimitWidget extends com.mapbox.maps.renderer.widget.BitmapWidget {
    ctor public SpeedLimitWidget(com.mapbox.navigation.base.speed.model.SpeedLimitSign initialSignFormat = com.mapbox.navigation.base.speed.model.SpeedLimitSign.MUTCD);
    method public void update(Integer? speedLimit, int speed, com.mapbox.navigation.base.speed.model.SpeedLimitSign? signFormat, int threshold);
    method public void update(com.mapbox.navigation.base.speed.model.SpeedLimitSign? signFormat, int threshold);
  }

}

package com.mapbox.androidauto.car.permissions {

  public final class NeedsLocationPermissionsScreen extends androidx.car.app.Screen {
    ctor public NeedsLocationPermissionsScreen(androidx.car.app.CarContext carContext);
    method public androidx.car.app.model.Template onGetTemplate();
  }

}

package com.mapbox.androidauto.car.placeslistonmap {

  public final class PlaceMarkerRenderer {
    ctor public PlaceMarkerRenderer(android.content.Context context, @ColorInt int background = 0);
    method public android.graphics.Bitmap? getBitmap();
    method public androidx.car.app.model.CarIcon renderMarker();
    method public void setBitmap(android.graphics.Bitmap?);
    property public final android.graphics.Bitmap? bitmap;
  }

  @UiThread public interface PlacesListItemClickListener {
    method public void onItemClick(com.mapbox.androidauto.car.search.PlaceRecord placeRecord);
  }

  public final class PlacesListItemMapper {
    ctor public PlacesListItemMapper(com.mapbox.androidauto.car.placeslistonmap.PlaceMarkerRenderer placeMarkerRenderer, com.mapbox.navigation.base.formatter.UnitType unitType);
    method public androidx.car.app.model.ItemList mapToItemList(android.location.Location anchorLocation, java.util.List<com.mapbox.androidauto.car.search.PlaceRecord> places, com.mapbox.androidauto.car.placeslistonmap.PlacesListItemClickListener? itemClickListener);
  }

  @UiThread public final class PlacesListOnMapLayerUtil {
    ctor public PlacesListOnMapLayerUtil();
    method public void initializePlacesListOnMapLayer(com.mapbox.maps.Style style, android.content.res.Resources resources);
    method public void removePlacesListOnMapLayer(com.mapbox.maps.Style style);
    method public void updatePlacesListOnMapLayer(com.mapbox.maps.Style style, com.mapbox.geojson.FeatureCollection featureCollection);
    field public static final com.mapbox.androidauto.car.placeslistonmap.PlacesListOnMapLayerUtil.Companion Companion;
  }

  public static final class PlacesListOnMapLayerUtil.Companion {
  }

  public final class PlacesListOnMapManager implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public PlacesListOnMapManager(com.mapbox.androidauto.car.placeslistonmap.PlacesListOnMapProvider placesListOnMapProvider);
    method public androidx.car.app.model.ItemList? currentItemList();
    method public kotlinx.coroutines.flow.StateFlow<java.util.List<com.mapbox.androidauto.car.search.PlaceRecord>> getPlaceRecords();
    method public kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.search.PlaceRecord> getPlaceSelected();
    property public final kotlinx.coroutines.flow.StateFlow<java.util.List<com.mapbox.androidauto.car.search.PlaceRecord>> placeRecords;
    property public final kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.search.PlaceRecord> placeSelected;
  }

  public interface PlacesListOnMapProvider {
    method public void cancel();
    method public suspend Object? getPlaces(kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<com.mapbox.androidauto.car.search.GetPlacesError,java.util.List<? extends com.mapbox.androidauto.car.search.PlaceRecord>>>);
  }

}

package com.mapbox.androidauto.car.preview {

  public final class CarRouteLine implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarRouteLine(com.mapbox.androidauto.car.routes.CarRoutesProvider carRoutesProvider = com.mapbox.androidauto.car.routes.NavigationCarRoutesProvider());
  }

  public fun interface CarRouteOptionsInterceptor {
    method public com.mapbox.api.directions.v5.models.RouteOptions.Builder intercept(com.mapbox.api.directions.v5.models.RouteOptions.Builder builder);
  }

  public final class CarRoutePreviewRepository {
    ctor public CarRoutePreviewRepository();
    method public kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.search.PlaceRecord> getPlaceRecord();
    method public kotlinx.coroutines.flow.StateFlow<java.util.List<com.mapbox.navigation.base.route.NavigationRoute>> getRoutes();
    method public void setRoutePreview(com.mapbox.androidauto.car.search.PlaceRecord placeRecord, java.util.List<com.mapbox.navigation.base.route.NavigationRoute> routes);
    property public final kotlinx.coroutines.flow.StateFlow<com.mapbox.androidauto.car.search.PlaceRecord> placeRecord;
    property public final kotlinx.coroutines.flow.StateFlow<java.util.List<com.mapbox.navigation.base.route.NavigationRoute>> routes;
  }

  public final class CarRoutePreviewRequest implements com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver {
    method @UiThread public void cancelRequest();
    method public com.mapbox.androidauto.car.preview.CarRoutePreviewRepository? getRepository();
    method public void onAttached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public void onDetached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method @UiThread public void request(com.mapbox.androidauto.car.search.PlaceRecord placeRecord, com.mapbox.androidauto.car.preview.CarRoutePreviewRequestCallback callback);
    property public final com.mapbox.androidauto.car.preview.CarRoutePreviewRepository? repository;
  }

  public interface CarRoutePreviewRequestCallback {
    method public void onDestinationLocationUnknown();
    method public void onNoRoutesFound();
    method public void onRoutesReady(com.mapbox.androidauto.car.search.PlaceRecord placeRecord, java.util.List<com.mapbox.navigation.base.route.NavigationRoute> routes);
    method public void onUnknownCurrentLocation();
  }

  public final class PreviewCarRoutesProvider implements com.mapbox.androidauto.car.routes.CarRoutesProvider {
    ctor public PreviewCarRoutesProvider(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> routes);
    method public kotlinx.coroutines.flow.StateFlow<java.util.List<com.mapbox.navigation.base.route.NavigationRoute>> getNavigationRoutes();
    method public void updateRoutes(java.util.List<com.mapbox.navigation.base.route.NavigationRoute> routes);
    property public kotlinx.coroutines.flow.StateFlow<java.util.List<com.mapbox.navigation.base.route.NavigationRoute>> navigationRoutes;
  }

}

package com.mapbox.androidauto.car.routes {

  public interface CarRoutesProvider {
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.mapbox.navigation.base.route.NavigationRoute>> getNavigationRoutes();
    property public abstract kotlinx.coroutines.flow.Flow<java.util.List<com.mapbox.navigation.base.route.NavigationRoute>> navigationRoutes;
  }

  public final class NavigationCarRoutesProvider implements com.mapbox.androidauto.car.routes.CarRoutesProvider {
    ctor public NavigationCarRoutesProvider();
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.mapbox.navigation.base.route.NavigationRoute>> getNavigationRoutes();
    property public kotlinx.coroutines.flow.Flow<java.util.List<com.mapbox.navigation.base.route.NavigationRoute>> navigationRoutes;
  }

}

package com.mapbox.androidauto.car.search {

  public final class CarPlaceSearchOptions {
    method public String? getAccessToken();
    method public com.mapbox.androidauto.car.search.CarPlaceSearchOptions.Builder toBuilder();
    property public final String? accessToken;
  }

  public static final class CarPlaceSearchOptions.Builder {
    ctor public CarPlaceSearchOptions.Builder();
    method public com.mapbox.androidauto.car.search.CarPlaceSearchOptions.Builder accessToken(String? accessToken);
    method public com.mapbox.androidauto.car.search.CarPlaceSearchOptions build();
  }

  public final class GetPlacesError {
    method public String getErrorMessage();
    method public Throwable? getThrowable();
    property public final String errorMessage;
    property public final Throwable? throwable;
  }

  public final class PlaceRecord {
    ctor public PlaceRecord(String id, String name, com.mapbox.geojson.Point? coordinate, String? description = null, java.util.List<java.lang.String> categories = listOf());
    method public java.util.List<java.lang.String> getCategories();
    method public com.mapbox.geojson.Point? getCoordinate();
    method public String? getDescription();
    method public String getId();
    method public String getName();
    property public final java.util.List<java.lang.String> categories;
    property public final com.mapbox.geojson.Point? coordinate;
    property public final String? description;
    property public final String id;
    property public final String name;
  }

}

package com.mapbox.androidauto.car.settings {

  public final class CarSettingsScreen extends androidx.car.app.Screen {
    ctor public CarSettingsScreen(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public androidx.car.app.model.Template onGetTemplate();
  }

  public final class MapboxCarStorage {
    method public androidx.car.app.CarContext getCarContext();
    method public boolean readSharedPref(String key, boolean defaultValue);
    method public void writeSharedPref(String key, boolean value);
    property public final androidx.car.app.CarContext carContext;
  }

  public final class MapboxCarStorageKt {
  }

}

package com.mapbox.androidauto.deeplink {

  public final class GeoDeeplinkGeocoding {
    ctor public GeoDeeplinkGeocoding(String accessToken);
    method public void cancel();
    method public com.mapbox.api.geocoding.v5.MapboxGeocoding? getCurrentMapboxGeocoding();
    method public suspend Object? requestPlaces(com.mapbox.navigation.core.geodeeplink.GeoDeeplink geoDeeplink, com.mapbox.geojson.Point origin, kotlin.coroutines.Continuation<? super com.mapbox.api.geocoding.v5.models.GeocodingResponse>);
    method public void setCurrentMapboxGeocoding(com.mapbox.api.geocoding.v5.MapboxGeocoding?);
    property public final com.mapbox.api.geocoding.v5.MapboxGeocoding? currentMapboxGeocoding;
  }

  public final class GeoDeeplinkNavigateAction {
    ctor public GeoDeeplinkNavigateAction(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public com.mapbox.androidauto.car.MapboxCarContext getMapboxCarContext();
    method public boolean onNewIntent(android.content.Intent intent);
    property public final com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext;
  }

  public final class GeoDeeplinkParser {
    method public kotlinx.coroutines.channels.ReceiveChannel<com.mapbox.navigation.core.geodeeplink.GeoDeeplink> getDestinationReceiveChannel();
    method public void parseAndSave(String? geoDeeplink);
    property public final kotlinx.coroutines.channels.ReceiveChannel<com.mapbox.navigation.core.geodeeplink.GeoDeeplink> destinationReceiveChannel;
    field public static final com.mapbox.androidauto.deeplink.GeoDeeplinkParser INSTANCE;
  }

}

package com.mapbox.androidauto.navigation.audioguidance {

  public final class AppAudioGuidanceUiKt {
    method @UiThread public static void attachAudioGuidance(androidx.fragment.app.Fragment, com.mapbox.navigation.ui.voice.view.MapboxSoundButton mapboxSoundButton);
    method @UiThread public static void muteAudioGuidance(androidx.lifecycle.Lifecycle);
  }

  public final class CarAudioGuidanceUi implements com.mapbox.androidauto.car.action.MapboxActionProvider {
    ctor public CarAudioGuidanceUi();
    method public androidx.car.app.model.Action getAction(androidx.car.app.Screen screen);
  }

}

package com.mapbox.androidauto.navigation.location {

  public interface CarAppLocation extends com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver {
    method public com.mapbox.navigation.ui.maps.location.NavigationLocationProvider getNavigationLocationProvider();
    method public suspend Object? validLocation(kotlin.coroutines.Continuation<? super android.location.Location>);
    property public abstract com.mapbox.navigation.ui.maps.location.NavigationLocationProvider navigationLocationProvider;
  }

}

package com.mapbox.androidauto.notification {

  public final class MapboxCarNotification implements com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver {
    method public void onAttached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
    method public void onDetached(com.mapbox.navigation.core.MapboxNavigation mapboxNavigation);
  }

  public final class MapboxCarNotificationOptions {
    method public Class<? extends androidx.car.app.CarAppService>? getStartAppService();
    method public com.mapbox.androidauto.notification.MapboxCarNotificationOptions.Builder toBuilder();
    property public final Class<? extends androidx.car.app.CarAppService>? startAppService;
  }

  public static final class MapboxCarNotificationOptions.Builder {
    ctor public MapboxCarNotificationOptions.Builder();
    method public com.mapbox.androidauto.notification.MapboxCarNotificationOptions build();
    method public com.mapbox.androidauto.notification.MapboxCarNotificationOptions.Builder startAppService(Class<? extends androidx.car.app.CarAppService>? startAppService);
  }

}

package com.mapbox.androidauto.screenmanager {

  public final class MapboxScreen {
    field public static final String ACTIVE_GUIDANCE = "MAPBOX_ACTIVE_GUIDANCE";
    field public static final String ACTIVE_GUIDANCE_FEEDBACK = "MAPBOX_ACTIVE_GUIDANCE_FEEDBACK";
    field public static final String ARRIVAL = "MAPBOX_ARRIVAL";
    field public static final String FAVORITES = "MAPBOX_FAVORITES";
    field public static final String FAVORITES_FEEDBACK = "MAPBOX_FAVORITES_FEEDBACK";
    field public static final String FREE_DRIVE = "MAPBOX_FREE_DRIVE";
    field public static final String FREE_DRIVE_FEEDBACK = "MAPBOX_FREE_DRIVE_FEEDBACK";
    field public static final String GEO_DEEPLINK = "MAPBOX_GEO_DEEPLINK";
    field public static final com.mapbox.androidauto.screenmanager.MapboxScreen INSTANCE;
    field public static final String NEEDS_LOCATION_PERMISSION = "MAPBOX_NEEDS_LOCATION_PERMISSION";
    field public static final String ROUTE_PREVIEW = "MAPBOX_ROUTE_PREVIEW";
    field public static final String ROUTE_PREVIEW_FEEDBACK = "MAPBOX_ROUTE_PREVIEW_FEEDBACK";
    field public static final String SEARCH = "MAPBOX_SEARCH";
    field public static final String SEARCH_FEEDBACK = "MAPBOX_SEARCH_FEEDBACK";
    field public static final String SETTINGS = "MAPBOX_SETTINGS";
  }

  @StringDef({com.mapbox.androidauto.screenmanager.MapboxScreen.NEEDS_LOCATION_PERMISSION, com.mapbox.androidauto.screenmanager.MapboxScreen.SETTINGS, com.mapbox.androidauto.screenmanager.MapboxScreen.FREE_DRIVE, com.mapbox.androidauto.screenmanager.MapboxScreen.SEARCH, com.mapbox.androidauto.screenmanager.MapboxScreen.SEARCH_FEEDBACK, com.mapbox.androidauto.screenmanager.MapboxScreen.FAVORITES, com.mapbox.androidauto.screenmanager.MapboxScreen.FAVORITES_FEEDBACK, com.mapbox.androidauto.screenmanager.MapboxScreen.GEO_DEEPLINK, com.mapbox.androidauto.screenmanager.MapboxScreen.ROUTE_PREVIEW, com.mapbox.androidauto.screenmanager.MapboxScreen.ROUTE_PREVIEW_FEEDBACK, com.mapbox.androidauto.screenmanager.MapboxScreen.ACTIVE_GUIDANCE, com.mapbox.androidauto.screenmanager.MapboxScreen.ACTIVE_GUIDANCE_FEEDBACK, com.mapbox.androidauto.screenmanager.MapboxScreen.ARRIVAL}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public static @interface MapboxScreen.Key {
  }

  public final class MapboxScreenEvent {
    method public String getKey();
    method public String getOperation();
    property public final String key;
    property public final String operation;
  }

  public fun interface MapboxScreenFactory {
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
  }

  public final class MapboxScreenGraph {
    method public static com.mapbox.androidauto.car.MapboxCarContext prepareScreens(com.mapbox.androidauto.car.MapboxCarContext);
  }

  public final class MapboxScreenManager {
    method public operator boolean contains(String key);
    method @UiThread public androidx.car.app.Screen createScreen(String screenKey);
    method public static com.mapbox.androidauto.screenmanager.MapboxScreenEvent? current();
    method public static kotlinx.coroutines.flow.SharedFlow<com.mapbox.androidauto.screenmanager.MapboxScreenEvent> getScreenEvent();
    method @UiThread @kotlin.jvm.Throws(exceptionClasses=IllegalStateException::class) public boolean goBack() throws java.lang.IllegalStateException;
    method public static void push(String key);
    method public com.mapbox.androidauto.screenmanager.MapboxScreenManager putAll(kotlin.Pair<java.lang.String,? extends com.mapbox.androidauto.screenmanager.MapboxScreenFactory>... pairs);
    method public static void replaceTop(String key);
    method public operator <T extends com.mapbox.androidauto.screenmanager.MapboxScreenFactory> com.mapbox.androidauto.screenmanager.MapboxScreenFactory? set(String key, T factory);
    property public static final kotlinx.coroutines.flow.SharedFlow<com.mapbox.androidauto.screenmanager.MapboxScreenEvent> screenEvent;
    field public static final com.mapbox.androidauto.screenmanager.MapboxScreenManager.Companion Companion;
  }

  public static final class MapboxScreenManager.Companion {
    method public com.mapbox.androidauto.screenmanager.MapboxScreenEvent? current();
    method public kotlinx.coroutines.flow.SharedFlow<com.mapbox.androidauto.screenmanager.MapboxScreenEvent> getScreenEvent();
    method public void push(String key);
    method public void replaceTop(String key);
    property public final kotlinx.coroutines.flow.SharedFlow<com.mapbox.androidauto.screenmanager.MapboxScreenEvent> screenEvent;
  }

  public final class MapboxScreenOperation {
    field public static final String CREATED = "CREATED";
    field public static final String GO_BACK = "GO_BACK";
    field public static final com.mapbox.androidauto.screenmanager.MapboxScreenOperation INSTANCE;
    field public static final String PUSH = "PUSH";
    field public static final String REPLACE_TOP = "REPLACE_TOP";
  }

  @StringDef({com.mapbox.androidauto.screenmanager.MapboxScreenOperation.CREATED, com.mapbox.androidauto.screenmanager.MapboxScreenOperation.REPLACE_TOP, com.mapbox.androidauto.screenmanager.MapboxScreenOperation.PUSH, com.mapbox.androidauto.screenmanager.MapboxScreenOperation.GO_BACK}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public static @interface MapboxScreenOperation.Type {
  }

}

package com.mapbox.androidauto.screenmanager.factories {

  public final class ActiveGuidanceFeedbackScreenFactory extends com.mapbox.androidauto.car.feedback.core.CarFeedbackScreenFactory {
    ctor public ActiveGuidanceFeedbackScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getCarFeedbackPoll(androidx.car.app.CarContext carContext);
    method public String getSourceName();
  }

  public final class ActiveGuidanceScreenFactory implements com.mapbox.androidauto.screenmanager.MapboxScreenFactory {
    ctor public ActiveGuidanceScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
  }

  public final class ArrivalScreenFactory extends com.mapbox.androidauto.car.feedback.core.CarFeedbackScreenFactory {
    ctor public ArrivalScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getCarFeedbackPoll(androidx.car.app.CarContext carContext);
    method public String getSourceName();
  }

  public final class FavoritesFeedbackScreenFactory extends com.mapbox.androidauto.car.feedback.core.CarFeedbackScreenFactory {
    ctor public FavoritesFeedbackScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getCarFeedbackPoll(androidx.car.app.CarContext carContext);
    method public String getSourceName();
  }

  public final class FavoritesScreenFactory implements com.mapbox.androidauto.screenmanager.MapboxScreenFactory {
    ctor public FavoritesScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
  }

  public final class FreeDriveFeedbackScreenFactory extends com.mapbox.androidauto.car.feedback.core.CarFeedbackScreenFactory {
    ctor public FreeDriveFeedbackScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getCarFeedbackPoll(androidx.car.app.CarContext carContext);
    method public String getSourceName();
  }

  public final class FreeDriveScreenFactory implements com.mapbox.androidauto.screenmanager.MapboxScreenFactory {
    ctor public FreeDriveScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
  }

  public final class GeoDeeplinkPlacesCarScreenFactory implements com.mapbox.androidauto.screenmanager.MapboxScreenFactory {
    ctor public GeoDeeplinkPlacesCarScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
  }

  public final class NeedsLocationPermissionScreenFactory implements com.mapbox.androidauto.screenmanager.MapboxScreenFactory {
    ctor public NeedsLocationPermissionScreenFactory();
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
  }

  public final class RoutePreviewFeedbackScreenFactory extends com.mapbox.androidauto.car.feedback.core.CarFeedbackScreenFactory {
    ctor public RoutePreviewFeedbackScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getCarFeedbackPoll(androidx.car.app.CarContext carContext);
    method public String getSourceName();
  }

  public final class RoutePreviewScreenFactory implements com.mapbox.androidauto.screenmanager.MapboxScreenFactory {
    ctor public RoutePreviewScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
  }

  public final class SearchPlacesFeedbackScreenFactory extends com.mapbox.androidauto.car.feedback.core.CarFeedbackScreenFactory {
    ctor public SearchPlacesFeedbackScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public com.mapbox.androidauto.car.feedback.ui.CarFeedbackPoll getCarFeedbackPoll(androidx.car.app.CarContext carContext);
    method public String getSourceName();
  }

  public final class SearchPlacesScreenFactory implements com.mapbox.androidauto.screenmanager.MapboxScreenFactory {
    ctor public SearchPlacesScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
  }

  public final class SettingsScreenFactory implements com.mapbox.androidauto.screenmanager.MapboxScreenFactory {
    ctor public SettingsScreenFactory(com.mapbox.androidauto.car.MapboxCarContext mapboxCarContext);
    method public androidx.car.app.Screen create(androidx.car.app.CarContext carContext);
  }

}

package com.mapbox.androidauto.surfacelayer {

  public class CarSurfaceLayer implements com.mapbox.maps.extension.androidauto.MapboxCarMapObserver {
    ctor public CarSurfaceLayer();
    method public java.util.List<com.mapbox.maps.extension.androidauto.MapboxCarMapObserver> children();
    method public final com.mapbox.maps.EdgeInsets? getEdgeInsets();
    method protected final com.mapbox.maps.extension.androidauto.MapboxCarMapSurface? getMapboxCarMapSurface();
    method public final android.graphics.Rect? getVisibleArea();
    method public final kotlin.Pair<java.lang.Integer,java.lang.Integer>? surfaceDimensions();
    property public final com.mapbox.maps.EdgeInsets? edgeInsets;
    property protected final com.mapbox.maps.extension.androidauto.MapboxCarMapSurface? mapboxCarMapSurface;
    property public final android.graphics.Rect? visibleArea;
  }

  public final class GLUtilsKt {
  }

}

package com.mapbox.androidauto.surfacelayer.textview {

  public final class CarCamera2d extends com.mapbox.androidauto.surfacelayer.CarSurfaceLayer {
    ctor public CarCamera2d();
    method public float[] getProjM();
    method public float[] getViewM();
    property public final float[] projM;
    property public final float[] viewM;
  }

  public final class CarScene2d extends com.mapbox.androidauto.surfacelayer.CarSurfaceLayer {
    ctor public CarScene2d();
    method public java.util.List<com.mapbox.androidauto.surfacelayer.CarSurfaceLayer> children();
    method public com.mapbox.androidauto.surfacelayer.textview.CarCamera2d getCamera();
    method public com.mapbox.androidauto.surfacelayer.textview.CarTextModel2d getModel();
    method public float[] getMvpMatrix();
    property public final com.mapbox.androidauto.surfacelayer.textview.CarCamera2d camera;
    property public final com.mapbox.androidauto.surfacelayer.textview.CarTextModel2d model;
    property public final float[] mvpMatrix;
  }

  public final class CarTextLayerHost implements com.mapbox.maps.CustomLayerHost {
    ctor public CarTextLayerHost();
    method public void contextLost();
    method public void deinitialize();
    method public com.mapbox.androidauto.surfacelayer.textview.CarScene2d getMapScene();
    method public void initialize();
    method public void offerBitmap(android.graphics.Bitmap? bitmap);
    method public void render(com.mapbox.maps.CustomLayerRenderParameters parameters);
    property public final com.mapbox.androidauto.surfacelayer.textview.CarScene2d mapScene;
    field public static final com.mapbox.androidauto.surfacelayer.textview.CarTextLayerHost.Companion Companion;
  }

  public static final class CarTextLayerHost.Companion {
    method public float[] getColor();
    method public void setColor(float[]);
    property public final float[] color;
  }

  public final class CarTextModel2d extends com.mapbox.androidauto.surfacelayer.CarSurfaceLayer {
    ctor public CarTextModel2d();
    method public int getDimensions();
    method public int getLength();
    method public float[] getModelMatrix();
    method public int getStride();
    method public java.nio.FloatBuffer getTextureCords();
    method public java.nio.FloatBuffer getVertices();
    method public void updateModelMatrix(android.graphics.Bitmap? nextBitmap);
    property public final int dimensions;
    property public final int length;
    property public final float[] modelMatrix;
    property public final int stride;
    property public final java.nio.FloatBuffer textureCords;
    property public final java.nio.FloatBuffer vertices;
  }

}

