package com.mapbox.navigation.driver.notification

import androidx.annotation.RestrictTo
import com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI
import com.mapbox.navigation.core.lifecycle.MapboxNavigationObserver
import kotlinx.coroutines.flow.Flow

/**
 * Abstract base class for providing driver notifications.
 *
 * This class serves as a parent for specific notification providers
 * that generate and track notifications for drivers during navigation.
 *
 * Subclasses of `DriverNotificationProvider` should implement the logic for
 * generating notifications and provide a `Flow` of `DriverNotification` instances
 * through the `trackNotifications` method.
 *
 * @see [DriverNotification] for the base notification type.
 */
@OptIn(ExperimentalPreviewMapboxNavigationAPI::class)
abstract class DriverNotificationProvider
@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP_PREFIX)
constructor() : MapboxNavigationObserver {

    /**
     * Tracks notifications generated by the provider.
     *
     * Subclasses should implement this method to return a `Flow` of `DriverNotification`
     * instances. The flow should emit notifications as they are generated or updated.
     *
     * @return a `Flow` of `DriverNotification` instances.
     */
    abstract fun trackNotifications(): Flow<DriverNotification>
}
